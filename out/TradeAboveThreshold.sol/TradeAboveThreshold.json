{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "OrderNotValid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollNever",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryAtBlock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryAtEpoch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryNextBlock",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IConditionalOrder",
              "name": "handler",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IConditionalOrder.ConditionalOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ConditionalOrderCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getTradeableOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "validateData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "offchainInput",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b50610b8b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806314a2a78414610079578063a6ffa36c1461008e578063b8296fc41461009f575b600080fd5b61006461005f36600461053a565b6100bf565b60405190151581526020015b60405180910390f35b61008c6100873660046105ee565b610158565b005b61008c61009c36600461070b565b50565b6100b26100ad3660046107da565b610275565b6040516100709190610879565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc400000000000000000000000000000000000000000000000000000000148061015257507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101698b8b8989898989610275565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b9052602281019190915260429020909150891461026857604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261025f9190600401610967565b60405180910390fd5b5050505050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052906102e2868601876109d3565b80516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610a77565b905081608001518110156103ee57604080518082018252601481527f62616c616e636520696e73756666696369656e74000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261025f9190600401610967565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001600181526020016104748460600151610518565b63ffffffff1681526020018360a001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981525092505050979650505050505050565b600081806105268142610abf565b6105309190610b09565b6101529190610b31565b60006020828403121561054c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461057c57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461009c57600080fd5b60008083601f8401126105b757600080fd5b50813567ffffffffffffffff8111156105cf57600080fd5b6020830191508360208285010111156105e757600080fd5b9250929050565b6000806000806000806000806000806102608b8d03121561060e57600080fd5b6106188b35610583565b8a35995060208b013561062a81610583565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff8082111561065c57600080fd5b6106688e838f016105a5565b909750955060c08d013591508082111561068157600080fd5b5061068e8d828e016105a5565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff200112156106c757600080fd5b60e08b0190509295989b9194979a5092959850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561071d57600080fd5b813567ffffffffffffffff8082111561073557600080fd5b818401915084601f83011261074957600080fd5b81358181111561075b5761075b6106dc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156107a1576107a16106dc565b816040528281528760208487010111156107ba57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060a0888a0312156107f557600080fd5b873561080081610583565b9650602088013561081081610583565b955060408801359450606088013567ffffffffffffffff8082111561083457600080fd5b6108408b838c016105a5565b909650945060808a013591508082111561085957600080fd5b506108668a828b016105a5565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff168152610180810160208301516108bf602084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516108e7604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a083015161091360a084018263ffffffff169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516109488285018215159052565b5050610140838101519083015261016092830151929091019190915290565b600060208083528351808285015260005b8181101561099457858101830151858201604001528201610978565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060c082840312156109e557600080fd5b60405160c0810181811067ffffffffffffffff82111715610a0857610a086106dc565b6040528235610a1681610583565b81526020830135610a2681610583565b60208201526040830135610a3981610583565b6040820152606083013563ffffffff81168114610a5557600080fd5b60608201526080838101359082015260a0928301359281019290925250919050565b600060208284031215610a8957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff80841680610afd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910492915050565b63ffffffff818116838216028082169190828114610b2957610b29610a90565b505092915050565b63ffffffff818116838216019080821115610b4e57610b4e610a90565b509291505056fea264697066735822122054f7a4b3a4350b1c22b1660bc3dc205052e979f76db430885bf14081236dd6ee64736f6c63430008130033",
    "sourceMap": "539:1672:148:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806314a2a78414610079578063a6ffa36c1461008e578063b8296fc41461009f575b600080fd5b61006461005f36600461053a565b6100bf565b60405190151581526020015b60405180910390f35b61008c6100873660046105ee565b610158565b005b61008c61009c36600461070b565b50565b6100b26100ad3660046107da565b610275565b6040516100709190610879565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc400000000000000000000000000000000000000000000000000000000148061015257507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101698b8b8989898989610275565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b9052602281019190915260429020909150891461026857604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261025f9190600401610967565b60405180910390fd5b5050505050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052906102e2868601876109d3565b80516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610a77565b905081608001518110156103ee57604080518082018252601481527f62616c616e636520696e73756666696369656e74000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261025f9190600401610967565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001600181526020016104748460600151610518565b63ffffffff1681526020018360a001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981525092505050979650505050505050565b600081806105268142610abf565b6105309190610b09565b6101529190610b31565b60006020828403121561054c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461057c57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461009c57600080fd5b60008083601f8401126105b757600080fd5b50813567ffffffffffffffff8111156105cf57600080fd5b6020830191508360208285010111156105e757600080fd5b9250929050565b6000806000806000806000806000806102608b8d03121561060e57600080fd5b6106188b35610583565b8a35995060208b013561062a81610583565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff8082111561065c57600080fd5b6106688e838f016105a5565b909750955060c08d013591508082111561068157600080fd5b5061068e8d828e016105a5565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff200112156106c757600080fd5b60e08b0190509295989b9194979a5092959850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561071d57600080fd5b813567ffffffffffffffff8082111561073557600080fd5b818401915084601f83011261074957600080fd5b81358181111561075b5761075b6106dc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156107a1576107a16106dc565b816040528281528760208487010111156107ba57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060a0888a0312156107f557600080fd5b873561080081610583565b9650602088013561081081610583565b955060408801359450606088013567ffffffffffffffff8082111561083457600080fd5b6108408b838c016105a5565b909650945060808a013591508082111561085957600080fd5b506108668a828b016105a5565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff168152610180810160208301516108bf602084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516108e7604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a083015161091360a084018263ffffffff169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516109488285018215159052565b5050610140838101519083015261016092830151929091019190915290565b600060208083528351808285015260005b8181101561099457858101830151858201604001528201610978565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600060c082840312156109e557600080fd5b60405160c0810181811067ffffffffffffffff82111715610a0857610a086106dc565b6040528235610a1681610583565b81526020830135610a2681610583565b60208201526040830135610a3981610583565b6040820152606083013563ffffffff81168114610a5557600080fd5b60608201526080838101359082015260a0928301359281019290925250919050565b600060208284031215610a8957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff80841680610afd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910492915050565b63ffffffff818116838216028082169190828114610b2957610b29610a90565b505092915050565b63ffffffff818116838216019080821115610b4e57610b4e610a90565b509291505056fea264697066735822122054f7a4b3a4350b1c22b1660bc3dc205052e979f76db430885bf14081236dd6ee64736f6c63430008130033",
    "sourceMap": "539:1672:148:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1944:220:135;;;;;;:::i;:::-;;:::i;:::-;;;612:14:170;;605:22;587:41;;575:2;560:18;1944:220:135;;;;;;;;867:634;;;;;;:::i;:::-;;:::i;:::-;;2170:100;;;;;;:::i;:::-;;;1025:1184:148;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1944:220:135:-;2031:4;2054:59;;;2069:44;2054:59;;:103;;-1:-1:-1;2117:40:135;;;2132:25;2117:40;2054:103;2047:110;1944:220;-1:-1:-1;;1944:220:135:o;867:634::-;1153:36;1192:65;1210:5;1217:6;1225:3;1230:11;;1243:13;;1192:17;:65::i;:::-;5434:14:55;;;5473:16;;5520:9;5502:28;;5578:3;5557:25;;5595:23;;6176:4;6170:11;6220:10;6194:37;;6274:1;6251:25;;6244:50;;;6337:2;6314:26;;6307:46;;;;6410:2;6381:32;;1153:104:135;;-1:-1:-1;1359:5:135;:56;1353:142;;1471:12;;;;;;;;;;;;;;;;1439:45;;;;;;;1471:12;1439:45;;;:::i;:::-;;;;;;;;1353:142;1143:358;867:634;;;;;;;;;;:::o;1025:1184:148:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1352:31:148;;;;;;:::i;:::-;1412:14;;:31;;;;;:24;8177:55:170;;;1412:31:148;;;8159:74:170;1313:70:148;;-1:-1:-1;1394:15:148;;1412:24;;;;;;8132:18:170;;1412:31:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1394:49;;1559:4;:14;;;1548:7;:25;;1542:119;;1629:20;;;;;;;;;;;;;;;;1597:53;;;;;;;1629:20;1597:53;;;:::i;1542:119::-;1801:401;;;;;;;;1829:4;:14;;;1801:401;;;;;;1857:4;:13;;;1801:401;;;;;;1884:4;:13;;;1801:401;;;;;;1911:7;1801:401;;;;1932:1;1801:401;;;;1978:47;1998:4;:26;;;1978:19;:47::i;:::-;1801:401;;;;;;2039:4;:12;;;1801:401;;;;2065:1;1801:401;;;;2080:19;1801:401;;;;2113:5;1801:401;;;;;;2132:23;1801:401;;;;2169:23;1801:401;;;1793:409;;1224:985;;1025:1184;;;;;;;;;:::o;463:166:144:-;526:14;614:8;;564:34;614:8;571:15;564:34;:::i;:::-;563:47;;;;:::i;:::-;562:60;;;;:::i;14:332:170:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:170:o;639:154::-;725:42;718:5;714:54;707:5;704:65;694:93;;783:1;780;773:12;798:347;849:8;859:6;913:3;906:4;898:6;894:17;890:27;880:55;;931:1;928;921:12;880:55;-1:-1:-1;954:20:170;;997:18;986:30;;983:50;;;1029:1;1026;1019:12;983:50;1066:4;1058:6;1054:17;1042:29;;1118:3;1111:4;1102:6;1094;1090:19;1086:30;1083:39;1080:59;;;1135:1;1132;1125:12;1080:59;798:347;;;;;:::o;1150:1401::-;1319:6;1327;1335;1343;1351;1359;1367;1375;1383;1391;1444:3;1432:9;1423:7;1419:23;1415:33;1412:53;;;1461:1;1458;1451:12;1412:53;1474:49;1512:9;1499:23;1474:49;:::i;:::-;1555:9;1542:23;1532:33;;1615:2;1604:9;1600:18;1587:32;1628:31;1653:5;1628:31;:::i;:::-;1678:5;-1:-1:-1;1730:2:170;1715:18;;1702:32;;-1:-1:-1;1781:2:170;1766:18;;1753:32;;-1:-1:-1;1832:3:170;1817:19;;1804:33;;-1:-1:-1;1888:3:170;1873:19;;1860:33;1912:18;1942:14;;;1939:34;;;1969:1;1966;1959:12;1939:34;2008:58;2058:7;2049:6;2038:9;2034:22;2008:58;:::i;:::-;2085:8;;-1:-1:-1;1982:84:170;-1:-1:-1;2173:3:170;2158:19;;2145:33;;-1:-1:-1;2190:16:170;;;2187:36;;;2219:1;2216;2209:12;2187:36;;2258:60;2310:7;2299:8;2288:9;2284:24;2258:60;:::i;:::-;2337:8;;-1:-1:-1;2232:86:170;-1:-1:-1;;2486:3:170;2392:23;;;2417:66;2388:96;2384:106;2381:126;;;2503:1;2500;2493:12;2381:126;2541:3;2530:9;2526:19;2516:29;;1150:1401;;;;;;;;;;;;;:::o;2556:184::-;2608:77;2605:1;2598:88;2705:4;2702:1;2695:15;2729:4;2726:1;2719:15;2745:980;2813:6;2866:2;2854:9;2845:7;2841:23;2837:32;2834:52;;;2882:1;2879;2872:12;2834:52;2922:9;2909:23;2951:18;2992:2;2984:6;2981:14;2978:34;;;3008:1;3005;2998:12;2978:34;3046:6;3035:9;3031:22;3021:32;;3091:7;3084:4;3080:2;3076:13;3072:27;3062:55;;3113:1;3110;3103:12;3062:55;3149:2;3136:16;3171:2;3167;3164:10;3161:36;;;3177:18;;:::i;:::-;3311:2;3305:9;3373:4;3365:13;;3216:66;3361:22;;;3385:2;3357:31;3353:40;3341:53;;;3409:18;;;3429:22;;;3406:46;3403:72;;;3455:18;;:::i;:::-;3495:10;3491:2;3484:22;3530:2;3522:6;3515:18;3570:7;3565:2;3560;3556;3552:11;3548:20;3545:33;3542:53;;;3591:1;3588;3581:12;3542:53;3647:2;3642;3638;3634:11;3629:2;3621:6;3617:15;3604:46;3692:1;3670:15;;;3687:2;3666:24;3659:35;;;;-1:-1:-1;3674:6:170;2745:980;-1:-1:-1;;;;;2745:980:170:o;3730:1063::-;3847:6;3855;3863;3871;3879;3887;3895;3948:3;3936:9;3927:7;3923:23;3919:33;3916:53;;;3965:1;3962;3955:12;3916:53;4004:9;3991:23;4023:31;4048:5;4023:31;:::i;:::-;4073:5;-1:-1:-1;4130:2:170;4115:18;;4102:32;4143:33;4102:32;4143:33;:::i;:::-;4195:7;-1:-1:-1;4249:2:170;4234:18;;4221:32;;-1:-1:-1;4304:2:170;4289:18;;4276:32;4327:18;4357:14;;;4354:34;;;4384:1;4381;4374:12;4354:34;4423:58;4473:7;4464:6;4453:9;4449:22;4423:58;:::i;:::-;4500:8;;-1:-1:-1;4397:84:170;-1:-1:-1;4588:3:170;4573:19;;4560:33;;-1:-1:-1;4605:16:170;;;4602:36;;;4634:1;4631;4624:12;4602:36;;4673:60;4725:7;4714:8;4703:9;4699:24;4673:60;:::i;:::-;3730:1063;;;;-1:-1:-1;3730:1063:170;;-1:-1:-1;3730:1063:170;;;;4647:86;;-1:-1:-1;;;3730:1063:170:o;5037:1264::-;5257:13;;4883:42;4872:54;4860:67;;5217:3;5202:19;;5329:4;5321:6;5317:17;5311:24;5344:62;5400:4;5389:9;5385:20;5371:12;4883:42;4872:54;4860:67;;4798:135;5344:62;;5455:4;5447:6;5443:17;5437:24;5470:64;5528:4;5517:9;5513:20;5497:14;4883:42;4872:54;4860:67;;4798:135;5470:64;;5590:4;5582:6;5578:17;5572:24;5565:4;5554:9;5550:20;5543:54;5653:4;5645:6;5641:17;5635:24;5628:4;5617:9;5613:20;5606:54;5709:4;5701:6;5697:17;5691:24;5724:55;5773:4;5762:9;5758:20;5742:14;5014:10;5003:22;4991:35;;4938:94;5724:55;;5835:4;5827:6;5823:17;5817:24;5810:4;5799:9;5795:20;5788:54;5898:4;5890:6;5886:17;5880:24;5873:4;5862:9;5858:20;5851:54;5924:6;5984:2;5976:6;5972:15;5966:22;5961:2;5950:9;5946:18;5939:50;;6008:6;6063:2;6055:6;6051:15;6045:22;6076:51;6123:2;6112:9;6108:18;6092:14;421:13;414:21;402:34;;351:91;6076:51;-1:-1:-1;;6146:6:170;6194:15;;;6188:22;6168:18;;;6161:50;6230:6;6278:15;;;6272:22;6252:18;;;;6245:50;;;;5037:1264;:::o;6306:607::-;6418:4;6447:2;6476;6465:9;6458:21;6508:6;6502:13;6551:6;6546:2;6535:9;6531:18;6524:34;6576:1;6586:140;6600:6;6597:1;6594:13;6586:140;;;6695:14;;;6691:23;;6685:30;6661:17;;;6680:2;6657:26;6650:66;6615:10;;6586:140;;;6590:3;6775:1;6770:2;6761:6;6750:9;6746:22;6742:31;6735:42;6904:2;6834:66;6829:2;6821:6;6817:15;6813:88;6802:9;6798:104;6794:113;6786:121;;;;6306:607;;;;:::o;6918:1090::-;7000:6;7053:3;7041:9;7032:7;7028:23;7024:33;7021:53;;;7070:1;7067;7060:12;7021:53;7103:2;7097:9;7145:3;7137:6;7133:16;7215:6;7203:10;7200:22;7179:18;7167:10;7164:34;7161:62;7158:88;;;7226:18;;:::i;:::-;7262:2;7255:22;7299:23;;7331:31;7299:23;7331:31;:::i;:::-;7371:21;;7444:2;7429:18;;7416:32;7457:33;7416:32;7457:33;:::i;:::-;7518:2;7506:15;;7499:32;7583:2;7568:18;;7555:32;7596:33;7555:32;7596:33;:::i;:::-;7657:2;7645:15;;7638:32;7722:2;7707:18;;7694:32;7770:10;7757:24;;7745:37;;7735:65;;7796:1;7793;7786:12;7735:65;7828:2;7816:15;;7809:32;7903:3;7888:19;;;7875:33;7857:16;;;7850:59;7971:3;7956:19;;;7943:33;7925:16;;;7918:59;;;;-1:-1:-1;7820:6:170;6918:1090;-1:-1:-1;6918:1090:170:o;8244:184::-;8314:6;8367:2;8355:9;8346:7;8342:23;8338:32;8335:52;;;8383:1;8380;8373:12;8335:52;-1:-1:-1;8406:16:170;;8244:184;-1:-1:-1;8244:184:170:o;8433:::-;8485:77;8482:1;8475:88;8582:4;8579:1;8572:15;8606:4;8603:1;8596:15;8622:345;8661:1;8687:10;8724:2;8721:1;8717:10;8746:3;8736:191;;8783:77;8780:1;8773:88;8884:4;8881:1;8874:15;8912:4;8909:1;8902:15;8736:191;8945:10;;8941:20;;;;;8622:345;-1:-1:-1;;8622:345:170:o;8972:249::-;9043:10;9085;;;9097;;;9081:27;9128:20;;;;9043:10;9167:24;;;9157:58;;9195:18;;:::i;:::-;9157:58;;8972:249;;;;:::o;9226:172::-;9293:10;9323;;;9335;;;9319:27;;9358:11;;;9355:37;;;9372:18;;:::i;:::-;9355:37;9226:172;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getTradeableOrder(address,address,bytes32,bytes,bytes)": "b8296fc4",
    "supportsInterface(bytes4)": "01ffc9a7",
    "validateData(bytes)": "a6ffa36c",
    "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": "14a2a784"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"OrderNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollNever\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryAtBlock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryAtEpoch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryNextBlock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IConditionalOrder\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IConditionalOrder.ConditionalOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ConditionalOrderCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getTradeableOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validateData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainInput\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OrderNotValid(string)\":[{\"details\":\"This error is returned by the `getTradeableOrder` function if the order condition is not met.      A parameter of `string` type is included to allow the caller to specify the reason for the failure.\"}]},\"events\":{\"ConditionalOrderCreated(address,(address,bytes32,bytes))\":{\"details\":\"This event is emitted when a new conditional order is created.\",\"params\":{\"owner\":\"the address that has created the conditional order\",\"params\":\"the address / salt / data of the conditional order\"}}},\"kind\":\"dev\",\"methods\":{\"getTradeableOrder(address,address,bytes32,bytes,bytes)\":{\"details\":\"If the `owner`'s balance of `sellToken` is above the specified threshold, sell its entire balance for `buyToken` at the current market price (no limit!).\",\"params\":{\"ctx\":\"the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the parent `isValidSignature` call\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"},\"returns\":{\"order\":\"the tradeable order for submission to the CoW Protocol API\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"validateData(bytes)\":{\"details\":\"Throws if the data is invalid.\",\"params\":{\"data\":\"The ABI-encoded concrete order type's `Data` struct to be validated.\"}},\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"details\":\"As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.\",\"params\":{\"_hash\":\"the hash of the order\",\"ctx\":\"the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet\",\"domainSeparator\":\"the domain separator used to sign the order\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"order\":\"`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the transaction\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"}}},\"title\":\"A smart contract that trades whenever its balance of a certain token exceeds a target threshold\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateData(bytes)\":{\"notice\":\"A helper function for SDK users to verify if a given conditional order's data is valid.\"},\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"notice\":\"Verify if a given discrete order is valid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/types/TradeAboveThreshold.sol\":\"TradeAboveThreshold\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":balancer/=lib/balancer/src/\",\":canonical-weth/=lib/canonical-weth/src/\",\":cowprotocol/=lib/cowprotocol/src/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":helpers/=lib/balancer/src/lib/helpers/\",\":math/=lib/balancer/src/lib/math/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":safe/=lib/safe/contracts/\"]},\"sources\":{\"lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol\":{\"keccak256\":\"0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f\",\"dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF\"]},\"lib/cowprotocol/src/contracts/libraries/GPv2Order.sol\":{\"keccak256\":\"0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d\",\"dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45\",\"dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/safe/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89\",\"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38\"]},\"src/BaseConditionalOrder.sol\":{\"keccak256\":\"0x83d14b5411a5a1adc00da2d3e17703cd7be15de3f5637b2a3f77501df14c5e9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c007603000bb506c58265f61863bb90966a210429f2985a2632d4f00c7bbc1f\",\"dweb:/ipfs/QmUz7ikMYiS8MGNsMxvcHzpkX2yYiPidxvcfG97Vpqs73j\"]},\"src/interfaces/IConditionalOrder.sol\":{\"keccak256\":\"0x9ce9ab9b32a1cea3dd9390407f9733458868f0c4e706acbf5373d2c083ec363e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e033e894f26b27544fc11d9cc1cd21351693defc8bd8716a47a74da57c634e28\",\"dweb:/ipfs/QmcC4PtfpCpf3srEqAuU3GNxz4qvgX8bU5B78hAQQjQhMW\"]},\"src/types/ConditionalOrdersUtilsLib.sol\":{\"keccak256\":\"0x38e4ce4fc58c018f510ee45d78ae49253e8aa70fdf559d83ebb6c838c6b47aae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a38ccd5b8ce2895a77b7474b1ac36ebfccc975b3839f6d3bfef72700f8f6f777\",\"dweb:/ipfs/QmSfs5zZ4U14NkZYSqAFUBcuKGjyfMM5Dp2sbj14FmVYPf\"]},\"src/types/TradeAboveThreshold.sol\":{\"keccak256\":\"0x8ebd26e535cbbf811f04c7a2ce292af7d236db87dd4787473ea2c54fc1dbcc7c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f8e86036de882745b46353a8bd0ee8bc6d1c794a333c3928592f412d8d7eb91\",\"dweb:/ipfs/QmSYmqgfifBAwcHSuAtuzLmC9uTWULceDJYxsUpLTYs5sE\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "OrderNotValid"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollNever"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryAtBlock"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryAtEpoch"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryNextBlock"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct IConditionalOrder.ConditionalOrderParams",
              "name": "params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IConditionalOrder",
                  "name": "handler",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "staticInput",
                  "type": "bytes"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ConditionalOrderCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTradeableOrder",
          "outputs": [
            {
              "internalType": "struct GPv2Order.Data",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "validateData"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ctx",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "offchainInput",
              "type": "bytes"
            },
            {
              "internalType": "struct GPv2Order.Data",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verify"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getTradeableOrder(address,address,bytes32,bytes,bytes)": {
            "details": "If the `owner`'s balance of `sellToken` is above the specified threshold, sell its entire balance for `buyToken` at the current market price (no limit!).",
            "params": {
              "ctx": "the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the parent `isValidSignature` call",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            },
            "returns": {
              "order": "the tradeable order for submission to the CoW Protocol API"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "validateData(bytes)": {
            "details": "Throws if the data is invalid.",
            "params": {
              "data": "The ABI-encoded concrete order type's `Data` struct to be validated."
            }
          },
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "details": "As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.",
            "params": {
              "_hash": "the hash of the order",
              "ctx": "the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet",
              "domainSeparator": "the domain separator used to sign the order",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "order": "`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the transaction",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "validateData(bytes)": {
            "notice": "A helper function for SDK users to verify if a given conditional order's data is valid."
          },
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "notice": "Verify if a given discrete order is valid."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "balancer/=lib/balancer/src/",
        "canonical-weth/=lib/canonical-weth/src/",
        "cowprotocol/=lib/cowprotocol/src/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "helpers/=lib/balancer/src/lib/helpers/",
        "math/=lib/balancer/src/lib/math/",
        "murky/=lib/murky/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "safe/=lib/safe/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/types/TradeAboveThreshold.sol": "TradeAboveThreshold"
      },
      "libraries": {}
    },
    "sources": {
      "lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol": {
        "keccak256": "0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528",
        "urls": [
          "bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f",
          "dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/cowprotocol/src/contracts/libraries/GPv2Order.sol": {
        "keccak256": "0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f",
        "urls": [
          "bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d",
          "dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        "keccak256": "0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45",
        "urls": [
          "bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45",
          "dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/safe/contracts/interfaces/IERC165.sol": {
        "keccak256": "0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb",
        "urls": [
          "bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89",
          "dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"
        ],
        "license": "LGPL-3.0-only"
      },
      "src/BaseConditionalOrder.sol": {
        "keccak256": "0x83d14b5411a5a1adc00da2d3e17703cd7be15de3f5637b2a3f77501df14c5e9c",
        "urls": [
          "bzz-raw://4c007603000bb506c58265f61863bb90966a210429f2985a2632d4f00c7bbc1f",
          "dweb:/ipfs/QmUz7ikMYiS8MGNsMxvcHzpkX2yYiPidxvcfG97Vpqs73j"
        ],
        "license": "MIT"
      },
      "src/interfaces/IConditionalOrder.sol": {
        "keccak256": "0x9ce9ab9b32a1cea3dd9390407f9733458868f0c4e706acbf5373d2c083ec363e",
        "urls": [
          "bzz-raw://e033e894f26b27544fc11d9cc1cd21351693defc8bd8716a47a74da57c634e28",
          "dweb:/ipfs/QmcC4PtfpCpf3srEqAuU3GNxz4qvgX8bU5B78hAQQjQhMW"
        ],
        "license": "GPL-3.0"
      },
      "src/types/ConditionalOrdersUtilsLib.sol": {
        "keccak256": "0x38e4ce4fc58c018f510ee45d78ae49253e8aa70fdf559d83ebb6c838c6b47aae",
        "urls": [
          "bzz-raw://a38ccd5b8ce2895a77b7474b1ac36ebfccc975b3839f6d3bfef72700f8f6f777",
          "dweb:/ipfs/QmSfs5zZ4U14NkZYSqAFUBcuKGjyfMM5Dp2sbj14FmVYPf"
        ],
        "license": "MIT"
      },
      "src/types/TradeAboveThreshold.sol": {
        "keccak256": "0x8ebd26e535cbbf811f04c7a2ce292af7d236db87dd4787473ea2c54fc1dbcc7c",
        "urls": [
          "bzz-raw://8f8e86036de882745b46353a8bd0ee8bc6d1c794a333c3928592f412d8d7eb91",
          "dweb:/ipfs/QmSYmqgfifBAwcHSuAtuzLmC9uTWULceDJYxsUpLTYs5sE"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/types/TradeAboveThreshold.sol",
    "id": 55542,
    "exportedSymbols": {
      "BALANCE_INSUFFICIENT": [
        55440
      ],
      "BaseConditionalOrder": [
        53578
      ],
      "GPv2Interaction": [
        14303
      ],
      "GPv2Order": [
        14459
      ],
      "IConditionalOrder": [
        54540
      ],
      "IConditionalOrderGenerator": [
        54571
      ],
      "IERC165": [
        52197
      ],
      "IERC20": [
        45820
      ],
      "INVALID_HASH": [
        53472
      ],
      "TradeAboveThreshold": [
        55541
      ],
      "Utils": [
        54696
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2180:148",
    "nodes": [
      {
        "id": 55431,
        "nodeType": "PragmaDirective",
        "src": "32:31:148",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 55433,
        "nodeType": "ImportDirective",
        "src": "65:69:148",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
        "file": "@openzeppelin/contracts/interfaces/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55542,
        "sourceUnit": 45153,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55432,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45820,
              "src": "73:6:148",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55434,
        "nodeType": "ImportDirective",
        "src": "136:37:148",
        "nodes": [],
        "absolutePath": "src/BaseConditionalOrder.sol",
        "file": "../BaseConditionalOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55542,
        "sourceUnit": 53579,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 55436,
        "nodeType": "ImportDirective",
        "src": "174:83:148",
        "nodes": [],
        "absolutePath": "src/types/ConditionalOrdersUtilsLib.sol",
        "file": "./ConditionalOrdersUtilsLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55542,
        "sourceUnit": 54697,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55435,
              "name": "ConditionalOrdersUtilsLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 54696,
              "src": "182:25:148",
              "typeDescriptions": {}
            },
            "local": "Utils",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55440,
        "nodeType": "VariableDeclaration",
        "src": "361:61:148",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "BALANCE_INSUFFICIENT",
        "nameLocation": "377:20:148",
        "scope": 55542,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_memory_ptr",
          "typeString": "string"
        },
        "typeName": {
          "id": 55438,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "361:6:148",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "62616c616e636520696e73756666696369656e74",
          "id": 55439,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "400:22:148",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_a9ef3b4d07292ad1e9ff9cf86a951bcf260ed39b4c9f3962ba7c62aae85e2c4f",
            "typeString": "literal_string \"balance insufficient\""
          },
          "value": "balance insufficient"
        },
        "visibility": "internal"
      },
      {
        "id": 55541,
        "nodeType": "ContractDefinition",
        "src": "539:1672:148",
        "nodes": [
          {
            "id": 55458,
            "nodeType": "StructDefinition",
            "src": "598:186:148",
            "nodes": [],
            "canonicalName": "TradeAboveThreshold.Data",
            "members": [
              {
                "constant": false,
                "id": 55446,
                "mutability": "mutable",
                "name": "sellToken",
                "nameLocation": "627:9:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "620:16:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$45820",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 55445,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 55444,
                    "name": "IERC20",
                    "nameLocations": [
                      "620:6:148"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 45820,
                    "src": "620:6:148"
                  },
                  "referencedDeclaration": 45820,
                  "src": "620:6:148",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$45820",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 55449,
                "mutability": "mutable",
                "name": "buyToken",
                "nameLocation": "653:8:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "646:15:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$45820",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 55448,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 55447,
                    "name": "IERC20",
                    "nameLocations": [
                      "646:6:148"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 45820,
                    "src": "646:6:148"
                  },
                  "referencedDeclaration": 45820,
                  "src": "646:6:148",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$45820",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 55451,
                "mutability": "mutable",
                "name": "receiver",
                "nameLocation": "679:8:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "671:16:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 55450,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "671:7:148",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 55453,
                "mutability": "mutable",
                "name": "validityBucketSeconds",
                "nameLocation": "704:21:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "697:28:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 55452,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "697:6:148",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 55455,
                "mutability": "mutable",
                "name": "threshold",
                "nameLocation": "743:9:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "735:17:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 55454,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "735:7:148",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 55457,
                "mutability": "mutable",
                "name": "appData",
                "nameLocation": "770:7:148",
                "nodeType": "VariableDeclaration",
                "scope": 55458,
                "src": "762:15:148",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 55456,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "762:7:148",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Data",
            "nameLocation": "605:4:148",
            "scope": 55541,
            "visibility": "public"
          },
          {
            "id": 55540,
            "nodeType": "FunctionDefinition",
            "src": "1025:1184:148",
            "nodes": [],
            "body": {
              "id": 55539,
              "nodeType": "Block",
              "src": "1224:985:148",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55480
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55480,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "1345:4:148",
                      "nodeType": "VariableDeclaration",
                      "scope": 55539,
                      "src": "1313:36:148",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                        "typeString": "struct TradeAboveThreshold.Data"
                      },
                      "typeName": {
                        "id": 55479,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 55478,
                          "name": "TradeAboveThreshold.Data",
                          "nameLocations": [
                            "1313:19:148",
                            "1333:4:148"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 55458,
                          "src": "1313:24:148"
                        },
                        "referencedDeclaration": 55458,
                        "src": "1313:24:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55458_storage_ptr",
                          "typeString": "struct TradeAboveThreshold.Data"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Decode the payload into the trade above threshold parameters.",
                  "id": 55487,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 55483,
                        "name": "staticInput",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55467,
                        "src": "1363:11:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 55484,
                            "name": "Data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55458,
                            "src": "1377:4:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_Data_$55458_storage_ptr_$",
                              "typeString": "type(struct TradeAboveThreshold.Data storage pointer)"
                            }
                          }
                        ],
                        "id": 55485,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1376:6:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55458_storage_ptr_$",
                          "typeString": "type(struct TradeAboveThreshold.Data storage pointer)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55458_storage_ptr_$",
                          "typeString": "type(struct TradeAboveThreshold.Data storage pointer)"
                        }
                      ],
                      "expression": {
                        "id": 55481,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "1352:3:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 55482,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1356:6:148",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "1352:10:148",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 55486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1352:31:148",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                      "typeString": "struct TradeAboveThreshold.Data memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1313:70:148"
                },
                {
                  "assignments": [
                    55489
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55489,
                      "mutability": "mutable",
                      "name": "balance",
                      "nameLocation": "1402:7:148",
                      "nodeType": "VariableDeclaration",
                      "scope": 55539,
                      "src": "1394:15:148",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 55488,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1394:7:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 55495,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 55493,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55461,
                        "src": "1437:5:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "expression": {
                          "id": 55490,
                          "name": "data",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55480,
                          "src": "1412:4:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                            "typeString": "struct TradeAboveThreshold.Data memory"
                          }
                        },
                        "id": 55491,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1417:9:148",
                        "memberName": "sellToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 55446,
                        "src": "1412:14:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$45820",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 55492,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1427:9:148",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 45777,
                      "src": "1412:24:148",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 55494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1412:31:148",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1394:49:148"
                },
                {
                  "condition": {
                    "id": 55501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1546:28:148",
                    "subExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 55496,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55489,
                            "src": "1548:7:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "expression": {
                              "id": 55497,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55480,
                              "src": "1559:4:148",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                                "typeString": "struct TradeAboveThreshold.Data memory"
                              }
                            },
                            "id": 55498,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1564:9:148",
                            "memberName": "threshold",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55455,
                            "src": "1559:14:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1548:25:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 55500,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1547:27:148",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55509,
                  "nodeType": "IfStatement",
                  "src": "1542:119:148",
                  "trueBody": {
                    "id": 55508,
                    "nodeType": "Block",
                    "src": "1576:85:148",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 55505,
                              "name": "BALANCE_INSUFFICIENT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55440,
                              "src": "1629:20:148",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 55502,
                              "name": "IConditionalOrder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 54540,
                              "src": "1597:17:148",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IConditionalOrder_$54540_$",
                                "typeString": "type(contract IConditionalOrder)"
                              }
                            },
                            "id": 55504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1615:13:148",
                            "memberName": "OrderNotValid",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 54484,
                            "src": "1597:31:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 55506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1597:53:148",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55507,
                        "nodeType": "RevertStatement",
                        "src": "1590:60:148"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 55537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55510,
                      "name": "order",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55474,
                      "src": "1793:5:148",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 55513,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55480,
                            "src": "1829:4:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                              "typeString": "struct TradeAboveThreshold.Data memory"
                            }
                          },
                          "id": 55514,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1834:9:148",
                          "memberName": "sellToken",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 55446,
                          "src": "1829:14:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$45820",
                            "typeString": "contract IERC20"
                          }
                        },
                        {
                          "expression": {
                            "id": 55515,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55480,
                            "src": "1857:4:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                              "typeString": "struct TradeAboveThreshold.Data memory"
                            }
                          },
                          "id": 55516,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1862:8:148",
                          "memberName": "buyToken",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 55449,
                          "src": "1857:13:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$45820",
                            "typeString": "contract IERC20"
                          }
                        },
                        {
                          "expression": {
                            "id": 55517,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55480,
                            "src": "1884:4:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                              "typeString": "struct TradeAboveThreshold.Data memory"
                            }
                          },
                          "id": 55518,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1889:8:148",
                          "memberName": "receiver",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 55451,
                          "src": "1884:13:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 55519,
                          "name": "balance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55489,
                          "src": "1911:7:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "hexValue": "31",
                          "id": 55520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1932:1:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        {
                          "arguments": [
                            {
                              "expression": {
                                "id": 55523,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 55480,
                                "src": "1998:4:148",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                                  "typeString": "struct TradeAboveThreshold.Data memory"
                                }
                              },
                              "id": 55524,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2003:21:148",
                              "memberName": "validityBucketSeconds",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 55453,
                              "src": "1998:26:148",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "expression": {
                              "id": 55521,
                              "name": "Utils",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 54696,
                              "src": "1978:5:148",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ConditionalOrdersUtilsLib_$54696_$",
                                "typeString": "type(library ConditionalOrdersUtilsLib)"
                              }
                            },
                            "id": 55522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1984:13:148",
                            "memberName": "validToBucket",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 54642,
                            "src": "1978:19:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_uint32_$",
                              "typeString": "function (uint32) view returns (uint32)"
                            }
                          },
                          "id": 55525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1978:47:148",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        {
                          "expression": {
                            "id": 55526,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55480,
                            "src": "2039:4:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Data_$55458_memory_ptr",
                              "typeString": "struct TradeAboveThreshold.Data memory"
                            }
                          },
                          "id": 55527,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2044:7:148",
                          "memberName": "appData",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 55457,
                          "src": "2039:12:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "hexValue": "30",
                          "id": 55528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2065:1:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        {
                          "expression": {
                            "id": 55529,
                            "name": "GPv2Order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14459,
                            "src": "2080:9:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_GPv2Order_$14459_$",
                              "typeString": "type(library GPv2Order)"
                            }
                          },
                          "id": 55530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2090:9:148",
                          "memberName": "KIND_SELL",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 14342,
                          "src": "2080:19:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "hexValue": "66616c7365",
                          "id": 55531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2113:5:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        {
                          "expression": {
                            "id": 55532,
                            "name": "GPv2Order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14459,
                            "src": "2132:9:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_GPv2Order_$14459_$",
                              "typeString": "type(library GPv2Order)"
                            }
                          },
                          "id": 55533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2142:13:148",
                          "memberName": "BALANCE_ERC20",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 14350,
                          "src": "2132:23:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "expression": {
                            "id": 55534,
                            "name": "GPv2Order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14459,
                            "src": "2169:9:148",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_GPv2Order_$14459_$",
                              "typeString": "type(library GPv2Order)"
                            }
                          },
                          "id": 55535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2179:13:148",
                          "memberName": "BALANCE_ERC20",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 14350,
                          "src": "2169:23:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IERC20_$45820",
                            "typeString": "contract IERC20"
                          },
                          {
                            "typeIdentifier": "t_contract$_IERC20_$45820",
                            "typeString": "contract IERC20"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "id": 55511,
                          "name": "GPv2Order",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 14459,
                          "src": "1801:9:148",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_GPv2Order_$14459_$",
                            "typeString": "type(library GPv2Order)"
                          }
                        },
                        "id": 55512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1811:4:148",
                        "memberName": "Data",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 14334,
                        "src": "1801:14:148",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Data_$14334_storage_ptr_$",
                          "typeString": "type(struct GPv2Order.Data storage pointer)"
                        }
                      },
                      "id": 55536,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1801:401:148",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "src": "1793:409:148",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                      "typeString": "struct GPv2Order.Data memory"
                    }
                  },
                  "id": 55538,
                  "nodeType": "ExpressionStatement",
                  "src": "1793:409:148"
                }
              ]
            },
            "baseFunctions": [
              53546
            ],
            "documentation": {
              "id": 55459,
              "nodeType": "StructuredDocumentation",
              "src": "790:230:148",
              "text": " @inheritdoc IConditionalOrderGenerator\n @dev If the `owner`'s balance of `sellToken` is above the specified threshold, sell its entire balance\n for `buyToken` at the current market price (no limit!)."
            },
            "functionSelector": "b8296fc4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTradeableOrder",
            "nameLocation": "1034:17:148",
            "overrides": {
              "id": 55471,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1165:8:148"
            },
            "parameters": {
              "id": 55470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55461,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1060:5:148",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1052:13:148",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55460,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1052:7:148",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55463,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1067:7:148",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55462,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1067:7:148",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55465,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1076:7:148",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 55464,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1076:7:148",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55467,
                  "mutability": "mutable",
                  "name": "staticInput",
                  "nameLocation": "1100:11:148",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1085:26:148",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55466,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1085:5:148",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55469,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1113:14:148",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55468,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1113:5:148",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1051:77:148"
            },
            "returnParameters": {
              "id": 55475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55474,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "1213:5:148",
                  "nodeType": "VariableDeclaration",
                  "scope": 55540,
                  "src": "1191:27:148",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                    "typeString": "struct GPv2Order.Data"
                  },
                  "typeName": {
                    "id": 55473,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55472,
                      "name": "GPv2Order.Data",
                      "nameLocations": [
                        "1191:9:148",
                        "1201:4:148"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14334,
                      "src": "1191:14:148"
                    },
                    "referencedDeclaration": 14334,
                    "src": "1191:14:148",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$14334_storage_ptr",
                      "typeString": "struct GPv2Order.Data"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1190:29:148"
            },
            "scope": 55541,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 55442,
              "name": "BaseConditionalOrder",
              "nameLocations": [
                "571:20:148"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 53578,
              "src": "571:20:148"
            },
            "id": 55443,
            "nodeType": "InheritanceSpecifier",
            "src": "571:20:148"
          }
        ],
        "canonicalName": "TradeAboveThreshold",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 55441,
          "nodeType": "StructuredDocumentation",
          "src": "425:113:148",
          "text": " @title A smart contract that trades whenever its balance of a certain token exceeds a target threshold"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          55541,
          53578,
          54571,
          52197,
          54540
        ],
        "name": "TradeAboveThreshold",
        "nameLocation": "548:19:148",
        "scope": 55542,
        "usedErrors": [
          54484,
          54488,
          54494,
          54500,
          54504
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 148
}