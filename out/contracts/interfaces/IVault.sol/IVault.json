{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum IVault.SwapKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "int256[]",
          "name": "limits",
          "type": "int256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "batchSwap",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IVault.UserBalanceOpKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct IVault.UserBalanceOp[]",
          "name": "ops",
          "type": "tuple[]"
        }
      ],
      "name": "manageUserBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IERC20",
              "name": "assetIn",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "assetOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.SingleSwap",
          "name": "singleSwap",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
    "manageUserBalance((uint8,address,uint256,address,address)[])": "0e8e3e84",
    "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Minimal interface for the Vault core contract only containing methods used by Gnosis Protocol V2. Original source: <https://github.com/balancer-labs/balancer-core-v2/blob/v1.0.0/contracts/vault/interfaces/IVault.sol>\",\"kind\":\"dev\",\"methods\":{\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/cowprotocol/src/contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/=lib/@openzeppelin/contracts/\",\":@openzeppelin/contracts/=lib/@openzeppelin/contracts/\",\":balancer/=lib/balancer/src/\",\":canonical-weth/=lib/canonical-weth/src/\",\":cowprotocol/=lib/cowprotocol/src/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":helpers/=lib/balancer/src/lib/helpers/\",\":math/=lib/balancer/src/lib/math/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/@openzeppelin/contracts/\",\":safe/=lib/safe/contracts/\"]},\"sources\":{\"lib/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45\",\"dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq\"]},\"lib/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/cowprotocol/src/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x205fedd49ab79dd6d2824a056d61ec8bdd6bd02ea9b50e398ea4353095c5325b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4470ff225bda4345d08c27f7d2e41b079be66e51c2376f4170978aba85bef906\",\"dweb:/ipfs/QmUxq55vtTEDU63ttAUGUsEksH4gLq8dJHkQEC7Zy6gdT1\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "struct IVault.BatchSwapStep[]",
              "name": "swaps",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "assetInIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetOutIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "contract IERC20[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "struct IVault.FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "int256[]",
              "name": "limits",
              "type": "int256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "batchSwap",
          "outputs": [
            {
              "internalType": "int256[]",
              "name": "",
              "type": "int256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IVault.UserBalanceOp[]",
              "name": "ops",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "enum IVault.UserBalanceOpKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "manageUserBalance"
        },
        {
          "inputs": [
            {
              "internalType": "struct IVault.SingleSwap",
              "name": "singleSwap",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum IVault.SwapKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "assetIn",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "assetOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct IVault.FundManagement",
              "name": "funds",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fromInternalBalance",
                  "type": "bool"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "toInternalBalance",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
            "details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
          },
          "manageUserBalance((uint8,address,uint256,address,address)[])": {
            "details": "Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
          },
          "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
            "details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/@openzeppelin/contracts/",
        ":@openzeppelin/contracts/=lib/@openzeppelin/contracts/",
        ":balancer/=lib/balancer/src/",
        ":canonical-weth/=lib/canonical-weth/src/",
        ":cowprotocol/=lib/cowprotocol/src/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":helpers/=lib/balancer/src/lib/helpers/",
        ":math/=lib/balancer/src/lib/math/",
        ":murky/=lib/murky/src/",
        ":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/@openzeppelin/contracts/",
        ":safe/=lib/safe/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/cowprotocol/src/contracts/interfaces/IVault.sol": "IVault"
      },
      "libraries": {}
    },
    "sources": {
      "lib/@openzeppelin/contracts/interfaces/IERC20.sol": {
        "keccak256": "0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45",
        "urls": [
          "bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45",
          "dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/cowprotocol/src/contracts/interfaces/IVault.sol": {
        "keccak256": "0x205fedd49ab79dd6d2824a056d61ec8bdd6bd02ea9b50e398ea4353095c5325b",
        "urls": [
          "bzz-raw://4470ff225bda4345d08c27f7d2e41b079be66e51c2376f4170978aba85bef906",
          "dweb:/ipfs/QmUxq55vtTEDU63ttAUGUsEksH4gLq8dJHkQEC7Zy6gdT1"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/cowprotocol/src/contracts/interfaces/IVault.sol",
    "id": 17011,
    "exportedSymbols": {
      "IERC20": [
        670
      ],
      "IVault": [
        17010
      ]
    },
    "nodeType": "SourceUnit",
    "src": "688:12849:60",
    "nodes": [
      {
        "id": 16900,
        "nodeType": "PragmaDirective",
        "src": "688:31:60",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 16901,
        "nodeType": "ImportDirective",
        "src": "721:55:60",
        "nodes": [],
        "absolutePath": "lib/@openzeppelin/contracts/interfaces/IERC20.sol",
        "file": "@openzeppelin/contracts/interfaces/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 17011,
        "sourceUnit": 3,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 17010,
        "nodeType": "ContractDefinition",
        "src": "1017:12519:60",
        "nodes": [
          {
            "id": 16910,
            "nodeType": "FunctionDefinition",
            "src": "2163:72:60",
            "nodes": [],
            "documentation": {
              "id": 16903,
              "nodeType": "StructuredDocumentation",
              "src": "1742:416:60",
              "text": " @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
            },
            "functionSelector": "0e8e3e84",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "manageUserBalance",
            "nameLocation": "2172:17:60",
            "parameters": {
              "id": 16908,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16907,
                  "mutability": "mutable",
                  "name": "ops",
                  "nameLocation": "2213:3:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16910,
                  "src": "2190:26:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$16923_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IVault.UserBalanceOp[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16905,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 16904,
                        "name": "UserBalanceOp",
                        "nameLocations": [
                          "2190:13:60"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 16923,
                        "src": "2190:13:60"
                      },
                      "referencedDeclaration": 16923,
                      "src": "2190:13:60",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserBalanceOp_$16923_storage_ptr",
                        "typeString": "struct IVault.UserBalanceOp"
                      }
                    },
                    "id": 16906,
                    "nodeType": "ArrayTypeName",
                    "src": "2190:15:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$16923_storage_$dyn_storage_ptr",
                      "typeString": "struct IVault.UserBalanceOp[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2189:28:60"
            },
            "returnParameters": {
              "id": 16909,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2234:0:60"
            },
            "scope": 17010,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 16923,
            "nodeType": "StructDefinition",
            "src": "2421:165:60",
            "nodes": [],
            "canonicalName": "IVault.UserBalanceOp",
            "members": [
              {
                "constant": false,
                "id": 16913,
                "mutability": "mutable",
                "name": "kind",
                "nameLocation": "2470:4:60",
                "nodeType": "VariableDeclaration",
                "scope": 16923,
                "src": "2452:22:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_UserBalanceOpKind_$16928",
                  "typeString": "enum IVault.UserBalanceOpKind"
                },
                "typeName": {
                  "id": 16912,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 16911,
                    "name": "UserBalanceOpKind",
                    "nameLocations": [
                      "2452:17:60"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 16928,
                    "src": "2452:17:60"
                  },
                  "referencedDeclaration": 16928,
                  "src": "2452:17:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_UserBalanceOpKind_$16928",
                    "typeString": "enum IVault.UserBalanceOpKind"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16916,
                "mutability": "mutable",
                "name": "asset",
                "nameLocation": "2491:5:60",
                "nodeType": "VariableDeclaration",
                "scope": 16923,
                "src": "2484:12:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$670",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 16915,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 16914,
                    "name": "IERC20",
                    "nameLocations": [
                      "2484:6:60"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 670,
                    "src": "2484:6:60"
                  },
                  "referencedDeclaration": 670,
                  "src": "2484:6:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$670",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16918,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "2514:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 16923,
                "src": "2506:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16917,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2506:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16920,
                "mutability": "mutable",
                "name": "sender",
                "nameLocation": "2538:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 16923,
                "src": "2530:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 16919,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2530:7:60",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16922,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "2570:9:60",
                "nodeType": "VariableDeclaration",
                "scope": 16923,
                "src": "2554:25:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                },
                "typeName": {
                  "id": 16921,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2554:15:60",
                  "stateMutability": "payable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "UserBalanceOp",
            "nameLocation": "2428:13:60",
            "scope": 17010,
            "visibility": "public"
          },
          {
            "id": 16928,
            "nodeType": "EnumDefinition",
            "src": "4199:136:60",
            "nodes": [],
            "canonicalName": "IVault.UserBalanceOpKind",
            "members": [
              {
                "id": 16924,
                "name": "DEPOSIT_INTERNAL",
                "nameLocation": "4232:16:60",
                "nodeType": "EnumValue",
                "src": "4232:16:60"
              },
              {
                "id": 16925,
                "name": "WITHDRAW_INTERNAL",
                "nameLocation": "4258:17:60",
                "nodeType": "EnumValue",
                "src": "4258:17:60"
              },
              {
                "id": 16926,
                "name": "TRANSFER_INTERNAL",
                "nameLocation": "4285:17:60",
                "nodeType": "EnumValue",
                "src": "4285:17:60"
              },
              {
                "id": 16927,
                "name": "TRANSFER_EXTERNAL",
                "nameLocation": "4312:17:60",
                "nodeType": "EnumValue",
                "src": "4312:17:60"
              }
            ],
            "name": "UserBalanceOpKind",
            "nameLocation": "4204:17:60"
          },
          {
            "id": 16931,
            "nodeType": "EnumDefinition",
            "src": "7920:57:60",
            "nodes": [],
            "canonicalName": "IVault.SwapKind",
            "members": [
              {
                "id": 16929,
                "name": "GIVEN_IN",
                "nameLocation": "7944:8:60",
                "nodeType": "EnumValue",
                "src": "7944:8:60"
              },
              {
                "id": 16930,
                "name": "GIVEN_OUT",
                "nameLocation": "7962:9:60",
                "nodeType": "EnumValue",
                "src": "7962:9:60"
              }
            ],
            "name": "SwapKind",
            "nameLocation": "7925:8:60"
          },
          {
            "id": 16947,
            "nodeType": "FunctionDefinition",
            "src": "8575:179:60",
            "nodes": [],
            "documentation": {
              "id": 16932,
              "nodeType": "StructuredDocumentation",
              "src": "7983:587:60",
              "text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
            },
            "functionSelector": "52bbbe29",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swap",
            "nameLocation": "8584:4:60",
            "parameters": {
              "id": 16943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16935,
                  "mutability": "mutable",
                  "name": "singleSwap",
                  "nameLocation": "8616:10:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16947,
                  "src": "8598:28:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SingleSwap_$16963_memory_ptr",
                    "typeString": "struct IVault.SingleSwap"
                  },
                  "typeName": {
                    "id": 16934,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 16933,
                      "name": "SingleSwap",
                      "nameLocations": [
                        "8598:10:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 16963,
                      "src": "8598:10:60"
                    },
                    "referencedDeclaration": 16963,
                    "src": "8598:10:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SingleSwap_$16963_storage_ptr",
                      "typeString": "struct IVault.SingleSwap"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16938,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "8658:5:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16947,
                  "src": "8636:27:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$17009_memory_ptr",
                    "typeString": "struct IVault.FundManagement"
                  },
                  "typeName": {
                    "id": 16937,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 16936,
                      "name": "FundManagement",
                      "nameLocations": [
                        "8636:14:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 17009,
                      "src": "8636:14:60"
                    },
                    "referencedDeclaration": 17009,
                    "src": "8636:14:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$17009_storage_ptr",
                      "typeString": "struct IVault.FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16940,
                  "mutability": "mutable",
                  "name": "limit",
                  "nameLocation": "8681:5:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16947,
                  "src": "8673:13:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 16939,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8673:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16942,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "8704:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16947,
                  "src": "8696:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 16941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8696:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8588:130:60"
            },
            "returnParameters": {
              "id": 16946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16945,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 16947,
                  "src": "8745:7:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 16944,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8745:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8744:9:60"
            },
            "scope": 17010,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 16963,
            "nodeType": "StructDefinition",
            "src": "9310:169:60",
            "nodes": [],
            "canonicalName": "IVault.SingleSwap",
            "members": [
              {
                "constant": false,
                "id": 16949,
                "mutability": "mutable",
                "name": "poolId",
                "nameLocation": "9346:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9338:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 16948,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "9338:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16952,
                "mutability": "mutable",
                "name": "kind",
                "nameLocation": "9371:4:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9362:13:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_SwapKind_$16931",
                  "typeString": "enum IVault.SwapKind"
                },
                "typeName": {
                  "id": 16951,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 16950,
                    "name": "SwapKind",
                    "nameLocations": [
                      "9362:8:60"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 16931,
                    "src": "9362:8:60"
                  },
                  "referencedDeclaration": 16931,
                  "src": "9362:8:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$16931",
                    "typeString": "enum IVault.SwapKind"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16955,
                "mutability": "mutable",
                "name": "assetIn",
                "nameLocation": "9392:7:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9385:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$670",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 16954,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 16953,
                    "name": "IERC20",
                    "nameLocations": [
                      "9385:6:60"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 670,
                    "src": "9385:6:60"
                  },
                  "referencedDeclaration": 670,
                  "src": "9385:6:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$670",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16958,
                "mutability": "mutable",
                "name": "assetOut",
                "nameLocation": "9416:8:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9409:15:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$670",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 16957,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 16956,
                    "name": "IERC20",
                    "nameLocations": [
                      "9409:6:60"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 670,
                    "src": "9409:6:60"
                  },
                  "referencedDeclaration": 670,
                  "src": "9409:6:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$670",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16960,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "9442:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9434:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16959,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "9434:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16962,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "9464:8:60",
                "nodeType": "VariableDeclaration",
                "scope": 16963,
                "src": "9458:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 16961,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "9458:5:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "SingleSwap",
            "nameLocation": "9317:10:60",
            "scope": 17010,
            "visibility": "public"
          },
          {
            "id": 16989,
            "nodeType": "FunctionDefinition",
            "src": "11470:256:60",
            "nodes": [],
            "documentation": {
              "id": 16964,
              "nodeType": "StructuredDocumentation",
              "src": "9485:1980:60",
              "text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
            },
            "functionSelector": "945bcec9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "batchSwap",
            "nameLocation": "11479:9:60",
            "parameters": {
              "id": 16984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16967,
                  "mutability": "mutable",
                  "name": "kind",
                  "nameLocation": "11507:4:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11498:13:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_SwapKind_$16931",
                    "typeString": "enum IVault.SwapKind"
                  },
                  "typeName": {
                    "id": 16966,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 16965,
                      "name": "SwapKind",
                      "nameLocations": [
                        "11498:8:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 16931,
                      "src": "11498:8:60"
                    },
                    "referencedDeclaration": 16931,
                    "src": "11498:8:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_SwapKind_$16931",
                      "typeString": "enum IVault.SwapKind"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16971,
                  "mutability": "mutable",
                  "name": "swaps",
                  "nameLocation": "11544:5:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11521:28:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$17000_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IVault.BatchSwapStep[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16969,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 16968,
                        "name": "BatchSwapStep",
                        "nameLocations": [
                          "11521:13:60"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 17000,
                        "src": "11521:13:60"
                      },
                      "referencedDeclaration": 17000,
                      "src": "11521:13:60",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BatchSwapStep_$17000_storage_ptr",
                        "typeString": "struct IVault.BatchSwapStep"
                      }
                    },
                    "id": 16970,
                    "nodeType": "ArrayTypeName",
                    "src": "11521:15:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$17000_storage_$dyn_storage_ptr",
                      "typeString": "struct IVault.BatchSwapStep[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16975,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "11575:6:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11559:22:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IERC20_$670_$dyn_memory_ptr",
                    "typeString": "contract IERC20[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16973,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 16972,
                        "name": "IERC20",
                        "nameLocations": [
                          "11559:6:60"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 670,
                        "src": "11559:6:60"
                      },
                      "referencedDeclaration": 670,
                      "src": "11559:6:60",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$670",
                        "typeString": "contract IERC20"
                      }
                    },
                    "id": 16974,
                    "nodeType": "ArrayTypeName",
                    "src": "11559:8:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IERC20_$670_$dyn_storage_ptr",
                      "typeString": "contract IERC20[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16978,
                  "mutability": "mutable",
                  "name": "funds",
                  "nameLocation": "11613:5:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11591:27:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FundManagement_$17009_memory_ptr",
                    "typeString": "struct IVault.FundManagement"
                  },
                  "typeName": {
                    "id": 16977,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 16976,
                      "name": "FundManagement",
                      "nameLocations": [
                        "11591:14:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 17009,
                      "src": "11591:14:60"
                    },
                    "referencedDeclaration": 17009,
                    "src": "11591:14:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FundManagement_$17009_storage_ptr",
                      "typeString": "struct IVault.FundManagement"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16981,
                  "mutability": "mutable",
                  "name": "limits",
                  "nameLocation": "11644:6:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11628:22:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16979,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11628:6:60",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 16980,
                    "nodeType": "ArrayTypeName",
                    "src": "11628:8:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16983,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "11668:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11660:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 16982,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11660:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11488:194:60"
            },
            "returnParameters": {
              "id": 16988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 16987,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 16989,
                  "src": "11709:15:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 16985,
                      "name": "int256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11709:6:60",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 16986,
                    "nodeType": "ArrayTypeName",
                    "src": "11709:8:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11708:17:60"
            },
            "scope": 17010,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 17000,
            "nodeType": "StructDefinition",
            "src": "12288:161:60",
            "nodes": [],
            "canonicalName": "IVault.BatchSwapStep",
            "members": [
              {
                "constant": false,
                "id": 16991,
                "mutability": "mutable",
                "name": "poolId",
                "nameLocation": "12327:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 17000,
                "src": "12319:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 16990,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "12319:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16993,
                "mutability": "mutable",
                "name": "assetInIndex",
                "nameLocation": "12351:12:60",
                "nodeType": "VariableDeclaration",
                "scope": 17000,
                "src": "12343:20:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16992,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "12343:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16995,
                "mutability": "mutable",
                "name": "assetOutIndex",
                "nameLocation": "12381:13:60",
                "nodeType": "VariableDeclaration",
                "scope": 17000,
                "src": "12373:21:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16994,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "12373:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16997,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "12412:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 17000,
                "src": "12404:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16996,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "12404:7:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 16999,
                "mutability": "mutable",
                "name": "userData",
                "nameLocation": "12434:8:60",
                "nodeType": "VariableDeclaration",
                "scope": 17000,
                "src": "12428:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 16998,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "12428:5:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "BatchSwapStep",
            "nameLocation": "12295:13:60",
            "scope": 17010,
            "visibility": "public"
          },
          {
            "id": 17009,
            "nodeType": "StructDefinition",
            "src": "13380:154:60",
            "nodes": [],
            "canonicalName": "IVault.FundManagement",
            "members": [
              {
                "constant": false,
                "id": 17002,
                "mutability": "mutable",
                "name": "sender",
                "nameLocation": "13420:6:60",
                "nodeType": "VariableDeclaration",
                "scope": 17009,
                "src": "13412:14:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 17001,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "13412:7:60",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17004,
                "mutability": "mutable",
                "name": "fromInternalBalance",
                "nameLocation": "13441:19:60",
                "nodeType": "VariableDeclaration",
                "scope": 17009,
                "src": "13436:24:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 17003,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "13436:4:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17006,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "13486:9:60",
                "nodeType": "VariableDeclaration",
                "scope": 17009,
                "src": "13470:25:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                },
                "typeName": {
                  "id": 17005,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "13470:15:60",
                  "stateMutability": "payable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17008,
                "mutability": "mutable",
                "name": "toInternalBalance",
                "nameLocation": "13510:17:60",
                "nodeType": "VariableDeclaration",
                "scope": 17009,
                "src": "13505:22:60",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 17007,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "13505:4:60",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "FundManagement",
            "nameLocation": "13387:14:60",
            "scope": 17010,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 16902,
          "nodeType": "StructuredDocumentation",
          "src": "778:238:60",
          "text": " @dev Minimal interface for the Vault core contract only containing methods\n used by Gnosis Protocol V2. Original source:\n <https://github.com/balancer-labs/balancer-core-v2/blob/v1.0.0/contracts/vault/interfaces/IVault.sol>"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          17010
        ],
        "name": "IVault",
        "nameLocation": "1027:6:60",
        "scope": 17011,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 60
}