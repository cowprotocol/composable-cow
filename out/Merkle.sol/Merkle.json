{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "node",
          "type": "uint256"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeafPairs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "log2ceil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "log2ceilBitMagic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "valueToProve",
          "type": "bytes32"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b506109da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063cf06c7b711610050578063cf06c7b7146100e0578063dd1d2599146100f3578063e27d51531461010657600080fd5b80632e08d6021461007757806358161a421461009d578063b8616195146100c0575b600080fd5b61008a6100853660046107ea565b610119565b6040519081526020015b60405180910390f35b6100b06100ab366004610827565b6101ed565b6040519015158152602001610094565b6100d36100ce366004610877565b610237565b60405161009491906108bc565b61008a6100ee366004610900565b6103f1565b61008a610101366004610919565b61053b565b61008a610114366004610900565b610569565b600060018251116101b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f776f6e27742067656e657261746520726f6f7420666f722073696e676c65206c60448201527f656166000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001825111156101cb576101c482610594565b91506101b1565b816000815181106101de576101de61093b565b60200260200101519050919050565b81516000908290825b8181101561022b57610221838783815181106102145761021461093b565b602002602001015161053b565b92506001016101f6565b50509093149392505050565b606060018351116102c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f776f6e27742067656e65726174652070726f6f6620666f722073696e676c652060448201527f6c6561660000000000000000000000000000000000000000000000000000000060648201526084016101a8565b60006102d584516103f1565b67ffffffffffffffff8111156102ed576102ed610702565b604051908082528060200260200182016040528015610316578160200160208202803683370190505b50905060005b6001855111156103e75783600116600103610371578460018503815181106103465761034661093b565b60200260200101518282815181106103605761036061093b565b6020026020010181815250506103ce565b84518460010103610392576000801b8282815181106103605761036061093b565b8484600101815181106103a7576103a761093b565b60200260200101518282815181106103c1576103c161093b565b6020026020010181815250505b6001016002840493506103e085610594565b945061031c565b5090505b92915050565b60006001821161040357506000919050565b600082700100000000000000000000000000000000811061043157608093841c9361042e908361096a565b91505b68010000000000000000841061045457604093841c93610451908361096a565b91505b640100000000841061047357602093841c93610470908361096a565b91505b62010000841061049057601093841c9361048d908361096a565b91505b61010084106104ac57600893841c936104a9908361096a565b91505b601084106104c757600493841c936104c4908361096a565b91505b600484106104e257600293841c936104df908361096a565b91505b600284106104f8576104f560018361096a565b91505b6000816105078119600161096a565b16905081811480156105195750600083115b156105275750909392505050565b61053283600161096a565b95945050505050565b6000818310801561055357836000528260205261055c565b82600052836020525b5050604060002092915050565b6000808219600101831683145b831561058c57600193841c939190910190610576565b900392915050565b60608060008351905080600116600103610643576002810460010167ffffffffffffffff8111156105c7576105c7610702565b6040519080825280602002602001820160405280156105f0578160200160208202803683370190505b50915061061c84600183038151811061060b5761060b61093b565b60200260200101516000801b61053b565b826001845103815181106106325761063261093b565b60200260200101818152505061068c565b6002810467ffffffffffffffff81111561065f5761065f610702565b604051908082528060200260200182016040528015610688578160200160208202803683370190505b5091505b6000805b600183038110156106f8576106cd8682815181106106b0576106b061093b565b60200260200101518783600101815181106102145761021461093b565b8483815181106106df576106df61093b565b6020908102919091010152600190910190600201610690565b5091949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261074257600080fd5b8135602067ffffffffffffffff8083111561075f5761075f610702565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156107a2576107a2610702565b6040529384528581018301938381019250878511156107c057600080fd5b83870191505b848210156107df578135835291830191908301906107c6565b979650505050505050565b6000602082840312156107fc57600080fd5b813567ffffffffffffffff81111561081357600080fd5b61081f84828501610731565b949350505050565b60008060006060848603121561083c57600080fd5b83359250602084013567ffffffffffffffff81111561085a57600080fd5b61086686828701610731565b925050604084013590509250925092565b6000806040838503121561088a57600080fd5b823567ffffffffffffffff8111156108a157600080fd5b6108ad85828601610731565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b818110156108f4578351835292840192918401916001016108d8565b50909695505050505050565b60006020828403121561091257600080fd5b5035919050565b6000806040838503121561092c57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808201808211156103eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208b457d0c98086ecebbf3f6f45f2ddbd77d5a216e6d3e233b70c0ef62c7b40a8264736f6c63430008130033",
    "sourceMap": "242:576:92:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063cf06c7b711610050578063cf06c7b7146100e0578063dd1d2599146100f3578063e27d51531461010657600080fd5b80632e08d6021461007757806358161a421461009d578063b8616195146100c0575b600080fd5b61008a6100853660046107ea565b610119565b6040519081526020015b60405180910390f35b6100b06100ab366004610827565b6101ed565b6040519015158152602001610094565b6100d36100ce366004610877565b610237565b60405161009491906108bc565b61008a6100ee366004610900565b6103f1565b61008a610101366004610919565b61053b565b61008a610114366004610900565b610569565b600060018251116101b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f776f6e27742067656e657261746520726f6f7420666f722073696e676c65206c60448201527f656166000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001825111156101cb576101c482610594565b91506101b1565b816000815181106101de576101de61093b565b60200260200101519050919050565b81516000908290825b8181101561022b57610221838783815181106102145761021461093b565b602002602001015161053b565b92506001016101f6565b50509093149392505050565b606060018351116102c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f776f6e27742067656e65726174652070726f6f6620666f722073696e676c652060448201527f6c6561660000000000000000000000000000000000000000000000000000000060648201526084016101a8565b60006102d584516103f1565b67ffffffffffffffff8111156102ed576102ed610702565b604051908082528060200260200182016040528015610316578160200160208202803683370190505b50905060005b6001855111156103e75783600116600103610371578460018503815181106103465761034661093b565b60200260200101518282815181106103605761036061093b565b6020026020010181815250506103ce565b84518460010103610392576000801b8282815181106103605761036061093b565b8484600101815181106103a7576103a761093b565b60200260200101518282815181106103c1576103c161093b565b6020026020010181815250505b6001016002840493506103e085610594565b945061031c565b5090505b92915050565b60006001821161040357506000919050565b600082700100000000000000000000000000000000811061043157608093841c9361042e908361096a565b91505b68010000000000000000841061045457604093841c93610451908361096a565b91505b640100000000841061047357602093841c93610470908361096a565b91505b62010000841061049057601093841c9361048d908361096a565b91505b61010084106104ac57600893841c936104a9908361096a565b91505b601084106104c757600493841c936104c4908361096a565b91505b600484106104e257600293841c936104df908361096a565b91505b600284106104f8576104f560018361096a565b91505b6000816105078119600161096a565b16905081811480156105195750600083115b156105275750909392505050565b61053283600161096a565b95945050505050565b6000818310801561055357836000528260205261055c565b82600052836020525b5050604060002092915050565b6000808219600101831683145b831561058c57600193841c939190910190610576565b900392915050565b60608060008351905080600116600103610643576002810460010167ffffffffffffffff8111156105c7576105c7610702565b6040519080825280602002602001820160405280156105f0578160200160208202803683370190505b50915061061c84600183038151811061060b5761060b61093b565b60200260200101516000801b61053b565b826001845103815181106106325761063261093b565b60200260200101818152505061068c565b6002810467ffffffffffffffff81111561065f5761065f610702565b604051908082528060200260200182016040528015610688578160200160208202803683370190505b5091505b6000805b600183038110156106f8576106cd8682815181106106b0576106b061093b565b60200260200101518783600101815181106102145761021461093b565b8483815181106106df576106df61093b565b6020908102919091010152600190910190600201610690565b5091949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261074257600080fd5b8135602067ffffffffffffffff8083111561075f5761075f610702565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156107a2576107a2610702565b6040529384528581018301938381019250878511156107c057600080fd5b83870191505b848210156107df578135835291830191908301906107c6565b979650505050505050565b6000602082840312156107fc57600080fd5b813567ffffffffffffffff81111561081357600080fd5b61081f84828501610731565b949350505050565b60008060006060848603121561083c57600080fd5b83359250602084013567ffffffffffffffff81111561085a57600080fd5b61086686828701610731565b925050604084013590509250925092565b6000806040838503121561088a57600080fd5b823567ffffffffffffffff8111156108a157600080fd5b6108ad85828601610731565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b818110156108f4578351835292840192918401916001016108d8565b50909695505050505050565b60006020828403121561091257600080fd5b5035919050565b6000806040838503121561092c57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808201808211156103eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208b457d0c98086ecebbf3f6f45f2ddbd77d5a216e6d3e233b70c0ef62c7b40a8264736f6c63430008130033",
    "sourceMap": "242:576:92:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:253:93;;;;;;:::i;:::-;;:::i;:::-;;;1668:25:165;;;1656:2;1641:18;987:253:93;;;;;;;;452:451;;;;;;:::i;:::-;;:::i;:::-;;;2358:14:165;;2351:22;2333:41;;2321:2;2306:18;452:451:93;2193:187:165;1246:1168:93;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5179:952::-;;;;;;:::i;:::-;;:::i;407:409:92:-;;;;;;:::i;:::-;;:::i;3606:1421:93:-;;;;;;:::i;:::-;;:::i;987:253::-;1048:7;1089:1;1075:4;:11;:15;1067:63;;;;;;;4265:2:165;1067:63:93;;;4247:21:165;4304:2;4284:18;;;4277:30;4343:34;4323:18;;;4316:62;4414:5;4394:18;;;4387:33;4437:19;;1067:63:93;;;;;;;;;1160:1;1146:4;:11;:15;1140:70;;;1184:15;1194:4;1184:9;:15::i;:::-;1177:22;;1140:70;;;1226:4;1231:1;1226:7;;;;;;;;:::i;:::-;;;;;;;1219:14;;987:253;;;:::o;452:451::-;690:12;;556:4;;651:12;;556:4;736:115;756:6;752:1;:10;736:115;;;800:36;814:11;827:5;833:1;827:8;;;;;;;;:::i;:::-;;;;;;;800:13;:36::i;:::-;786:50;-1:-1:-1;764:3:93;;736:115;;;-1:-1:-1;;877:19:93;;;;452:451;-1:-1:-1;;;452:451:93:o;1246:1168::-;1322:16;1372:1;1358:4;:11;:15;1350:64;;;;;;;4858:2:165;1350:64:93;;;4840:21:165;4897:2;4877:18;;;4870:30;4936:34;4916:18;;;4909:62;5007:6;4987:18;;;4980:34;5031:19;;1350:64:93;4656:400:165;1350:64:93;1501:23;1541:29;1558:4;:11;1541:16;:29::i;:::-;1527:44;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:44:93;;1501:70;;1581:11;1910:475;1930:1;1916:4;:11;:15;1910:475;;;1978:4;1985:3;1978:10;1992:1;1978:15;1975:300;;2031:4;2043:1;2036:4;:8;2031:14;;;;;;;;:::i;:::-;;;;;;;2017:6;2024:3;2017:11;;;;;;;;:::i;:::-;;;;;;:28;;;;;1975:300;;;2103:4;:11;2091:4;2098:1;2091:8;:23;2087:188;;2160:1;2152:10;;2138:6;2145:3;2138:11;;;;;;;;:::i;2087:188::-;2242:4;2247;2254:1;2247:8;2242:14;;;;;;;;:::i;:::-;;;;;;;2228:6;2235:3;2228:11;;;;;;;;:::i;:::-;;;;;;:28;;;;;2087:188;2292:5;;2323:1;2315:9;;;;2359:15;2369:4;2359:9;:15::i;:::-;2352:22;;1910:475;;;-1:-1:-1;2401:6:93;-1:-1:-1;1246:1168:93;;;;;:::o;5179:952::-;5237:7;5264:1;5259;:6;5255:45;;-1:-1:-1;5288:1:93;;5179:952;-1:-1:-1;5179:952:93:o;5255:45::-;5309:11;5347:1;5367:6;5362:11;;5358:75;;5395:3;5389:9;;;;5412:10;;;;:::i;:::-;;;5358:75;5451:5;5446:1;:10;5442:72;;5478:2;5472:8;;;;5494:9;;;;:::i;:::-;;;5442:72;5532:5;5527:1;:10;5523:72;;5559:2;5553:8;;;;5575:9;;;;:::i;:::-;;;5523:72;5613:5;5608:1;:10;5604:72;;5640:2;5634:8;;;;5656:9;;;;:::i;:::-;;;5604:72;5694:4;5689:1;:9;5685:69;;5720:1;5714:7;;;;5735:8;;;;:::i;:::-;;;5685:69;5772:4;5767:1;:9;5763:69;;5798:1;5792:7;;;;5813:8;;;;:::i;:::-;;;5763:69;5850:4;5845:1;:9;5841:69;;5876:1;5870:7;;;;5891:8;;;;:::i;:::-;;;5841:69;5928:4;5923:1;:9;5919:48;;5948:8;5955:1;5948:8;;:::i;:::-;;;5919:48;5977:11;6003:2;5992:7;:3;;5998:1;5992:7;:::i;:::-;5991:14;5977:28;;6027:2;6020:3;:9;6019:24;;;;;6041:1;6035:3;:7;6019:24;6015:110;;;-1:-1:-1;6066:3:93;;5179:952;-1:-1:-1;;;5179:952:93:o;6015:110::-;6107:7;:3;6113:1;6107:7;:::i;:::-;6100:14;5179:952;-1:-1:-1;;;;;5179:952:93:o;407:409:92:-;489:13;542:15;;;569:89;;;;707:4;702:3;695:17;741:5;735:4;728:19;535:225;;569:89;605:5;600:3;593:18;640:4;634;627:18;535:225;-1:-1:-1;;796:4:92;791:3;781:20;;407:409;-1:-1:-1;;407:409:92:o;3606:1421:93:-;3656:7;;4677:6;;4685:1;4673:14;4669:22;;4666:29;;4873:78;4880:5;;4873:78;;4911:1;4905:7;;;;4930:6;;;;;4873:78;;;4964:12;;;3606:1421;-1:-1:-1;;3606:1421:93:o;2493:990::-;2557:16;2585:23;2878:14;2895:4;:11;2878:28;;2924:6;2933:3;2924:12;2940:1;2924:17;2920:251;;2992:1;2983:6;:10;2996:1;2983:14;2969:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2969:29:93;;2960:38;;3044:43;3058:4;3072:1;3063:6;:10;3058:16;;;;;;;;:::i;:::-;;;;;;;3084:1;3076:10;;3044:13;:43::i;:::-;3016:6;3039:1;3023:6;:13;:17;3016:25;;;;;;;;:::i;:::-;;;;;;:71;;;;;2920:251;;;3158:1;3149:6;:10;3135:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3135:25:93;;3126:34;;2920:251;3273:11;3307:9;3302:142;3333:1;3326:6;:8;3322:1;:12;3302:142;;;3373:33;3387:4;3392:1;3387:7;;;;;;;;:::i;:::-;;;;;;;3396:4;3401:1;3403;3401:3;3396:9;;;;;;;;:::i;3373:33::-;3359:6;3366:3;3359:11;;;;;;;;:::i;:::-;;;;;;;;;;:47;3424:5;;;;;3339:1;3336:4;3302:142;;;-1:-1:-1;3470:6:93;;2493:990;-1:-1:-1;;;;2493:990:93:o;14:184:165:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:961;257:5;310:3;303:4;295:6;291:17;287:27;277:55;;328:1;325;318:12;277:55;364:6;351:20;390:4;413:18;450:2;446;443:10;440:36;;;456:18;;:::i;:::-;502:2;499:1;495:10;534:2;528:9;593:66;588:2;584;580:11;576:84;568:6;564:97;711:6;699:10;696:22;691:2;679:10;676:18;673:46;670:72;;;722:18;;:::i;:::-;758:2;751:22;808:18;;;884:15;;;880:24;;;842:15;;;;-1:-1:-1;916:15:165;;;913:35;;;944:1;941;934:12;913:35;980:2;972:6;968:15;957:26;;992:142;1008:6;1003:3;1000:15;992:142;;;1074:17;;1062:30;;1112:12;;;;1025;;;;992:142;;;1152:6;203:961;-1:-1:-1;;;;;;;203:961:165:o;1169:348::-;1253:6;1306:2;1294:9;1285:7;1281:23;1277:32;1274:52;;;1322:1;1319;1312:12;1274:52;1362:9;1349:23;1395:18;1387:6;1384:30;1381:50;;;1427:1;1424;1417:12;1381:50;1450:61;1503:7;1494:6;1483:9;1479:22;1450:61;:::i;:::-;1440:71;1169:348;-1:-1:-1;;;;1169:348:165:o;1704:484::-;1806:6;1814;1822;1875:2;1863:9;1854:7;1850:23;1846:32;1843:52;;;1891:1;1888;1881:12;1843:52;1927:9;1914:23;1904:33;;1988:2;1977:9;1973:18;1960:32;2015:18;2007:6;2004:30;2001:50;;;2047:1;2044;2037:12;2001:50;2070:61;2123:7;2114:6;2103:9;2099:22;2070:61;:::i;:::-;2060:71;;;2178:2;2167:9;2163:18;2150:32;2140:42;;1704:484;;;;;:::o;2385:416::-;2478:6;2486;2539:2;2527:9;2518:7;2514:23;2510:32;2507:52;;;2555:1;2552;2545:12;2507:52;2595:9;2582:23;2628:18;2620:6;2617:30;2614:50;;;2660:1;2657;2650:12;2614:50;2683:61;2736:7;2727:6;2716:9;2712:22;2683:61;:::i;:::-;2673:71;2791:2;2776:18;;;;2763:32;;-1:-1:-1;;;;2385:416:165:o;2806:632::-;2977:2;3029:21;;;3099:13;;3002:18;;;3121:22;;;2948:4;;2977:2;3200:15;;;;3174:2;3159:18;;;2948:4;3243:169;3257:6;3254:1;3251:13;3243:169;;;3318:13;;3306:26;;3387:15;;;;3352:12;;;;3279:1;3272:9;3243:169;;;-1:-1:-1;3429:3:165;;2806:632;-1:-1:-1;;;;;;2806:632:165:o;3443:180::-;3502:6;3555:2;3543:9;3534:7;3530:23;3526:32;3523:52;;;3571:1;3568;3561:12;3523:52;-1:-1:-1;3594:23:165;;3443:180;-1:-1:-1;3443:180:165:o;3810:248::-;3878:6;3886;3939:2;3927:9;3918:7;3914:23;3910:32;3907:52;;;3955:1;3952;3945:12;3907:52;-1:-1:-1;;3978:23:165;;;4048:2;4033:18;;;4020:32;;-1:-1:-1;3810:248:165:o;4467:184::-;4519:77;4516:1;4509:88;4616:4;4613:1;4606:15;4640:4;4637:1;4630:15;5250:279;5315:9;;;5336:10;;;5333:190;;;5379:77;5376:1;5369:88;5480:4;5477:1;5470:15;5508:4;5505:1;5498:15",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getProof(bytes32[],uint256)": "b8616195",
    "getRoot(bytes32[])": "2e08d602",
    "hashLeafPairs(bytes32,bytes32)": "dd1d2599",
    "log2ceil(uint256)": "e27d5153",
    "log2ceilBitMagic(uint256)": "cf06c7b7",
    "verifyProof(bytes32,bytes32[],bytes32)": "58161a42"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"node\",\"type\":\"uint256\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeafPairs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceilBitMagic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"valueToProve\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dmfxyz\",\"details\":\"Note Generic Merkle Tree\",\"kind\":\"dev\",\"methods\":{\"log2ceil(uint256)\":{\"details\":\"Note that x is assumed > 0\"},\"log2ceilBitMagic(uint256)\":{\"details\":\"Note that x assumed > 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hashLeafPairs(bytes32,bytes32)\":{\"notice\":\"ascending sort and concat prior to hashing\"},\"log2ceilBitMagic(uint256)\":{\"notice\":\"Original bitmagic adapted from https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol\"}},\"notice\":\"Nascent, simple, kinda efficient (and improving!) Merkle proof generator and verifier\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/murky/src/Merkle.sol\":\"Merkle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/=lib/@openzeppelin/contracts/\",\":@openzeppelin/contracts/=lib/@openzeppelin/contracts/\",\":balancer/=lib/balancer/src/\",\":canonical-weth/=lib/canonical-weth/src/\",\":cowprotocol/=lib/cowprotocol/src/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":helpers/=lib/balancer/src/lib/helpers/\",\":math/=lib/balancer/src/lib/math/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/@openzeppelin/contracts/\",\":safe/=lib/safe/contracts/\"]},\"sources\":{\"lib/murky/src/Merkle.sol\":{\"keccak256\":\"0x70e50a6d61ea806b5ba0c8ff76fadfa3e90e6dfecb6900b1c0492eac0309660f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6cc1b02a6d11e029fe24d5d638ad891a3a2552aaef9d3a0918274b1496fcd74\",\"dweb:/ipfs/QmWsU7yXsyKATkfYb8g1jbPTbgGsCg9rk7bJ3ypCYxQixB\"]},\"lib/murky/src/common/MurkyBase.sol\":{\"keccak256\":\"0x5287741b2b215c9a11cc8482b419abde0625dfc3949d539c72ee498108842894\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://259e803b0811e404bba09237bce4ef42f2ff27dacaca770d1eb7c1afddbf762b\",\"dweb:/ipfs/QmWfbsHa1siBxDEqFmbnzUuZqyitFZHmDXo2vc4cVn4uJe\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "node",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getProof",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "left",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "right",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "hashLeafPairs",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "log2ceil",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "log2ceilBitMagic",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "valueToProve",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "verifyProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "log2ceil(uint256)": {
            "details": "Note that x is assumed > 0"
          },
          "log2ceilBitMagic(uint256)": {
            "details": "Note that x assumed > 1"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "hashLeafPairs(bytes32,bytes32)": {
            "notice": "ascending sort and concat prior to hashing"
          },
          "log2ceilBitMagic(uint256)": {
            "notice": "Original bitmagic adapted from https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/@openzeppelin/contracts/",
        ":@openzeppelin/contracts/=lib/@openzeppelin/contracts/",
        ":balancer/=lib/balancer/src/",
        ":canonical-weth/=lib/canonical-weth/src/",
        ":cowprotocol/=lib/cowprotocol/src/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":helpers/=lib/balancer/src/lib/helpers/",
        ":math/=lib/balancer/src/lib/math/",
        ":murky/=lib/murky/src/",
        ":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/@openzeppelin/contracts/",
        ":safe/=lib/safe/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/murky/src/Merkle.sol": "Merkle"
      },
      "libraries": {}
    },
    "sources": {
      "lib/murky/src/Merkle.sol": {
        "keccak256": "0x70e50a6d61ea806b5ba0c8ff76fadfa3e90e6dfecb6900b1c0492eac0309660f",
        "urls": [
          "bzz-raw://b6cc1b02a6d11e029fe24d5d638ad891a3a2552aaef9d3a0918274b1496fcd74",
          "dweb:/ipfs/QmWsU7yXsyKATkfYb8g1jbPTbgGsCg9rk7bJ3ypCYxQixB"
        ],
        "license": "MIT"
      },
      "lib/murky/src/common/MurkyBase.sol": {
        "keccak256": "0x5287741b2b215c9a11cc8482b419abde0625dfc3949d539c72ee498108842894",
        "urls": [
          "bzz-raw://259e803b0811e404bba09237bce4ef42f2ff27dacaca770d1eb7c1afddbf762b",
          "dweb:/ipfs/QmWfbsHa1siBxDEqFmbnzUuZqyitFZHmDXo2vc4cVn4uJe"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/murky/src/Merkle.sol",
    "id": 47710,
    "exportedSymbols": {
      "Merkle": [
        47709
      ],
      "MurkyBase": [
        48226
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:786:92",
    "nodes": [
      {
        "id": 47691,
        "nodeType": "PragmaDirective",
        "src": "32:23:92",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 47692,
        "nodeType": "ImportDirective",
        "src": "57:32:92",
        "nodes": [],
        "absolutePath": "lib/murky/src/common/MurkyBase.sol",
        "file": "./common/MurkyBase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 47710,
        "sourceUnit": 48227,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 47709,
        "nodeType": "ContractDefinition",
        "src": "242:576:92",
        "nodes": [
          {
            "id": 47708,
            "nodeType": "FunctionDefinition",
            "src": "407:409:92",
            "nodes": [],
            "body": {
              "id": 47707,
              "nodeType": "Block",
              "src": "504:312:92",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "522:288:92",
                    "statements": [
                      {
                        "cases": [
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "576:82:92",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "600:3:92",
                                        "type": "",
                                        "value": "0x0"
                                      },
                                      {
                                        "name": "right",
                                        "nodeType": "YulIdentifier",
                                        "src": "605:5:92"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "593:6:92"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "593:18:92"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "593:18:92"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "634:4:92",
                                        "type": "",
                                        "value": "0x20"
                                      },
                                      {
                                        "name": "left",
                                        "nodeType": "YulIdentifier",
                                        "src": "640:4:92"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "627:6:92"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "627:18:92"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "627:18:92"
                                }
                              ]
                            },
                            "nodeType": "YulCase",
                            "src": "569:89:92",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "574:1:92",
                              "type": "",
                              "value": "0"
                            }
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "678:82:92",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "702:3:92",
                                        "type": "",
                                        "value": "0x0"
                                      },
                                      {
                                        "name": "left",
                                        "nodeType": "YulIdentifier",
                                        "src": "707:4:92"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "695:6:92"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "695:17:92"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "695:17:92"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "735:4:92",
                                        "type": "",
                                        "value": "0x20"
                                      },
                                      {
                                        "name": "right",
                                        "nodeType": "YulIdentifier",
                                        "src": "741:5:92"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "728:6:92"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "728:19:92"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "728:19:92"
                                }
                              ]
                            },
                            "nodeType": "YulCase",
                            "src": "670:90:92",
                            "value": "default"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "name": "left",
                              "nodeType": "YulIdentifier",
                              "src": "545:4:92"
                            },
                            {
                              "name": "right",
                              "nodeType": "YulIdentifier",
                              "src": "551:5:92"
                            }
                          ],
                          "functionName": {
                            "name": "lt",
                            "nodeType": "YulIdentifier",
                            "src": "542:2:92"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "542:15:92"
                        },
                        "nodeType": "YulSwitch",
                        "src": "535:225:92"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "772:29:92",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "791:3:92",
                              "type": "",
                              "value": "0x0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "796:4:92",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nodeType": "YulIdentifier",
                            "src": "781:9:92"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "781:20:92"
                        },
                        "variableNames": [
                          {
                            "name": "_hash",
                            "nodeType": "YulIdentifier",
                            "src": "772:5:92"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "paris",
                  "externalReferences": [
                    {
                      "declaration": 47704,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "772:5:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47698,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "545:4:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47698,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "640:4:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47698,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "707:4:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47700,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "551:5:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47700,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "605:5:92",
                      "valueSize": 1
                    },
                    {
                      "declaration": 47700,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "741:5:92",
                      "valueSize": 1
                    }
                  ],
                  "id": 47706,
                  "nodeType": "InlineAssembly",
                  "src": "513:297:92"
                }
              ]
            },
            "baseFunctions": [
              47724
            ],
            "documentation": {
              "id": 47696,
              "nodeType": "StructuredDocumentation",
              "src": "356:46:92",
              "text": "ascending sort and concat prior to hashing"
            },
            "functionSelector": "dd1d2599",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "hashLeafPairs",
            "nameLocation": "416:13:92",
            "overrides": {
              "id": 47702,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "471:8:92"
            },
            "parameters": {
              "id": 47701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 47698,
                  "mutability": "mutable",
                  "name": "left",
                  "nameLocation": "438:4:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 47708,
                  "src": "430:12:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 47697,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "430:7:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 47700,
                  "mutability": "mutable",
                  "name": "right",
                  "nameLocation": "452:5:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 47708,
                  "src": "444:13:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 47699,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "444:7:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "429:29:92"
            },
            "returnParameters": {
              "id": 47705,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 47704,
                  "mutability": "mutable",
                  "name": "_hash",
                  "nameLocation": "497:5:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 47708,
                  "src": "489:13:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 47703,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "489:7:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "488:15:92"
            },
            "scope": 47709,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 47694,
              "name": "MurkyBase",
              "nameLocations": [
                "261:9:92"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48226,
              "src": "261:9:92"
            },
            "id": 47695,
            "nodeType": "InheritanceSpecifier",
            "src": "261:9:92"
          }
        ],
        "canonicalName": "Merkle",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 47693,
          "nodeType": "StructuredDocumentation",
          "src": "91:151:92",
          "text": "@notice Nascent, simple, kinda efficient (and improving!) Merkle proof generator and verifier\n @author dmfxyz\n @dev Note Generic Merkle Tree"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          47709,
          48226
        ],
        "name": "Merkle",
        "nameLocation": "251:6:92",
        "scope": 47710,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 92
}