{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ComposableCoW",
          "name": "_composableCow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "OrderNotValid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IConditionalOrder",
              "name": "handler",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IConditionalOrder.ConditionalOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ConditionalOrderCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "composableCow",
      "outputs": [
        {
          "internalType": "contract ComposableCoW",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getTradeableOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "offchainInput",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a060405234801561001057600080fd5b5060405161124638038061124683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516111b5610091600039600081816093015261037701526111b56000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806314a2a7841461007957806393504c521461008e578063b8296fc4146100da575b600080fd5b61006461005f366004610c70565b6100fa565b60405190151581526020015b60405180910390f35b61008c610087366004610d34565b610193565b005b6100b57f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610070565b6100ed6100e8366004610e22565b6102b0565b6040516100709190610ec1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc400000000000000000000000000000000000000000000000000000000148061018d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101a48b8b89898989896102b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b905260228101919091526042902090915089146102a357604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60405180910390fd5b5050505050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290529061031d8686018761106c565b90508060a001516000036103e8576040517f1c7662c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018990527f00000000000000000000000000000000000000000000000000000000000000001690631c7662c890604401602060405180830381865afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190611108565b60a08201525b6103f181610476565b91508160a0015163ffffffff1642111561046a57604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b50979650505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526104e082610622565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff16815260200183606001518152602001836080015181526020016105856105808560a001518660c001518760e00151886101000151610a43565b610bd6565b63ffffffff1681526020018361012001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc98152509050919050565b806020015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036106c257604080518082018252600a81527f73616d6520746f6b656e00000000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b805173ffffffffffffffffffffffffffffffffffffffff16158015906107015750602081015173ffffffffffffffffffffffffffffffffffffffff1615155b61076a57604080518082018252600d81527f696e76616c696420746f6b656e00000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008160600151116107db57604080518082018252601881527f696e76616c696420706172742073656c6c20616d6f756e740000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b600081608001511161084c57604080518082018252601681527f696e76616c6964206d696e2070617274206c696d697400000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60a081015163ffffffff116108c057604080518082018252601281527f696e76616c69642073746172742074696d650000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60018160c001511180156108dc575060c081015163ffffffff10155b61094557604080518082018252601181527f696e76616c6964206e756d207061727473000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008160e0015111801561096157506301e133808160e0015111155b6109ca57604080518082018252601181527f696e76616c6964206672657175656e6379000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b8060e001518161010001511115610a4057604080518082018252600c81527f696e76616c6964207370616e0000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b50565b6000600184118015610a59575063ffffffff8411155b610a6557610a65611121565b600083118015610a7957506301e133808311155b610a8557610a85611121565b82821115610a9557610a95611121565b42851115610b0257604080518082018252601181527f6265666f72652074776170207374617274000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b82840285014210610b7257604080518082018252601181527f616674657220747761702066696e697368000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008386420381610b8557610b85611150565b04905082600003610ba3576001848260010102870103915050610bce565b8302850182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190505b949350505050565b600063ffffffff821115610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161029a565b5090565b600060208284031215610c8257600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb257600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a4057600080fd5b8035610ce681610cb9565b919050565b60008083601f840112610cfd57600080fd5b50813567ffffffffffffffff811115610d1557600080fd5b602083019150836020828501011115610d2d57600080fd5b9250929050565b6000806000806000806000806000806102608b8d031215610d5457600080fd5b610d5e8b35610cb9565b8a35995060208b0135610d7081610cb9565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610da257600080fd5b610dae8e838f01610ceb565b909750955060c08d0135915080821115610dc757600080fd5b50610dd48d828e01610ceb565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215610e0d57600080fd5b60e08b0190509295989b9194979a5092959850565b600080600080600080600060a0888a031215610e3d57600080fd5b8735610e4881610cb9565b96506020880135610e5881610cb9565b955060408801359450606088013567ffffffffffffffff80821115610e7c57600080fd5b610e888b838c01610ceb565b909650945060808a0135915080821115610ea157600080fd5b50610eae8a828b01610ceb565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff16815261018081016020830151610f07602084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151610f2f604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a0830151610f5b60a084018263ffffffff169052565b5060c083015160c083015260e083015160e083015261010080840151818401525061012080840151610f908285018215159052565b5050610140838101519083015261016092830151929091019190915290565b600060208083528351808285015260005b81811015610fdc57858101830151858201604001528201610fc0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b604051610140810167ffffffffffffffff81118282101715611066577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610140828403121561107f57600080fd5b61108761101b565b61109083610cdb565b815261109e60208401610cdb565b60208201526110af60408401610cdb565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b60006020828403121561111a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220733968f1120306412e0bbb577306c40acd8fc83ab6a227fc90457b832d7d29f964736f6c63430008130033",
    "sourceMap": "753:1449:147:-:0;;;848:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;900:30:147;;;753:1449;;14:313:168;107:6;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;202:16;;-1:-1:-1;;;;;247:31:168;;237:42;;227:70;;293:1;290;283:12;227:70;316:5;14:313;-1:-1:-1;;;14:313:168:o;:::-;753:1449:147;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a71461005157806314a2a7841461007957806393504c521461008e578063b8296fc4146100da575b600080fd5b61006461005f366004610c70565b6100fa565b60405190151581526020015b60405180910390f35b61008c610087366004610d34565b610193565b005b6100b57f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610070565b6100ed6100e8366004610e22565b6102b0565b6040516100709190610ec1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc400000000000000000000000000000000000000000000000000000000148061018d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101a48b8b89898989896102b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b905260228101919091526042902090915089146102a357604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60405180910390fd5b5050505050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290529061031d8686018761106c565b90508060a001516000036103e8576040517f1c7662c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018990527f00000000000000000000000000000000000000000000000000000000000000001690631c7662c890604401602060405180830381865afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190611108565b60a08201525b6103f181610476565b91508160a0015163ffffffff1642111561046a57604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b50979650505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526104e082610622565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff16815260200183606001518152602001836080015181526020016105856105808560a001518660c001518760e00151886101000151610a43565b610bd6565b63ffffffff1681526020018361012001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc98152509050919050565b806020015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036106c257604080518082018252600a81527f73616d6520746f6b656e00000000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b805173ffffffffffffffffffffffffffffffffffffffff16158015906107015750602081015173ffffffffffffffffffffffffffffffffffffffff1615155b61076a57604080518082018252600d81527f696e76616c696420746f6b656e00000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008160600151116107db57604080518082018252601881527f696e76616c696420706172742073656c6c20616d6f756e740000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b600081608001511161084c57604080518082018252601681527f696e76616c6964206d696e2070617274206c696d697400000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60a081015163ffffffff116108c057604080518082018252601281527f696e76616c69642073746172742074696d650000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60018160c001511180156108dc575060c081015163ffffffff10155b61094557604080518082018252601181527f696e76616c6964206e756d207061727473000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008160e0015111801561096157506301e133808160e0015111155b6109ca57604080518082018252601181527f696e76616c6964206672657175656e6379000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b8060e001518161010001511115610a4057604080518082018252600c81527f696e76616c6964207370616e0000000000000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b50565b6000600184118015610a59575063ffffffff8411155b610a6557610a65611121565b600083118015610a7957506301e133808311155b610a8557610a85611121565b82821115610a9557610a95611121565b42851115610b0257604080518082018252601181527f6265666f72652074776170207374617274000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b82840285014210610b7257604080518082018252601181527f616674657220747761702066696e697368000000000000000000000000000000602082015290517fc8fc272500000000000000000000000000000000000000000000000000000000815261029a9190600401610faf565b60008386420381610b8557610b85611150565b04905082600003610ba3576001848260010102870103915050610bce565b8302850182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190505b949350505050565b600063ffffffff821115610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161029a565b5090565b600060208284031215610c8257600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb257600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a4057600080fd5b8035610ce681610cb9565b919050565b60008083601f840112610cfd57600080fd5b50813567ffffffffffffffff811115610d1557600080fd5b602083019150836020828501011115610d2d57600080fd5b9250929050565b6000806000806000806000806000806102608b8d031215610d5457600080fd5b610d5e8b35610cb9565b8a35995060208b0135610d7081610cb9565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610da257600080fd5b610dae8e838f01610ceb565b909750955060c08d0135915080821115610dc757600080fd5b50610dd48d828e01610ceb565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215610e0d57600080fd5b60e08b0190509295989b9194979a5092959850565b600080600080600080600060a0888a031215610e3d57600080fd5b8735610e4881610cb9565b96506020880135610e5881610cb9565b955060408801359450606088013567ffffffffffffffff80821115610e7c57600080fd5b610e888b838c01610ceb565b909650945060808a0135915080821115610ea157600080fd5b50610eae8a828b01610ceb565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff16815261018081016020830151610f07602084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151610f2f604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a0830151610f5b60a084018263ffffffff169052565b5060c083015160c083015260e083015160e083015261010080840151818401525061012080840151610f908285018215159052565b5050610140838101519083015261016092830151929091019190915290565b600060208083528351808285015260005b81811015610fdc57858101830151858201604001528201610fc0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b604051610140810167ffffffffffffffff81118282101715611066577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610140828403121561107f57600080fd5b61108761101b565b61109083610cdb565b815261109e60208401610cdb565b60208201526110af60408401610cdb565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b60006020828403121561111a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220733968f1120306412e0bbb577306c40acd8fc83ab6a227fc90457b832d7d29f964736f6c63430008130033",
    "sourceMap": "753:1449:147:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1944:220:133;;;;;;:::i;:::-;;:::i;:::-;;;612:14:168;;605:22;587:41;;575:2;560:18;1944:220:133;;;;;;;;867:634;;;;;;:::i;:::-;;:::i;:::-;;797:44:147;;;;;;;;3041:42:168;3029:55;;;3011:74;;2999:2;2984:18;797:44:147;2842:249:168;1068:1132:147;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1944:220:133:-;2031:4;2054:59;;;2069:44;2054:59;;:103;;-1:-1:-1;2117:40:133;;;2132:25;2117:40;2054:103;2047:110;1944:220;-1:-1:-1;;1944:220:133:o;867:634::-;1153:36;1192:65;1210:5;1217:6;1225:3;1230:11;;1243:13;;1192:17;:65::i;:::-;5434:14:63;;;5473:16;;5520:9;5502:28;;5578:3;5557:25;;5595:23;;6176:4;6170:11;6220:10;6194:37;;6274:1;6251:25;;6244:50;;;6337:2;6314:26;;6307:46;;;;6410:2;6381:32;;1153:104:133;;-1:-1:-1;1359:5:133;:56;1353:142;;1471:12;;;;;;;;;;;;;;;;1439:45;;;;;;;1471:12;1439:45;;;:::i;:::-;;;;;;;;1353:142;1143:358;867:634;;;;;;;;;;:::o;1068:1132:147:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1693:41:147;;;;;;:::i;:::-;1664:70;;1857:4;:7;;;1868:1;1857:12;1853:95;;1903:33;;;;;:21;7695:55:168;;;1903:33:147;;;7677:74:168;7767:18;;;7760:34;;;1903:13:147;:21;;;;7650:18:168;;1903:33:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1885:7;;;:52;1853:95;1966:24;1985:4;1966:18;:24::i;:::-;1958:32;;2098:5;:13;;;2079:32;;:15;:32;;2073:121;;2167:15;;;;;;;;;;;;;;;;2135:48;;;;;;;2167:15;2135:48;;;:::i;2073:121::-;1271:929;1068:1132;;;;;;;;;:::o;2828:1141:148:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2988:14:148;2997:4;2988:8;:14::i;:::-;3386:576;;;;;;;;3426:4;:14;;;3386:576;;;;;;3464:4;:13;;;3386:576;;;;;;3501:4;:13;;;3386:576;;;;;;3540:4;:19;;;3386:576;;;;3584:4;:17;;;3386:576;;;;3624:80;:69;3658:4;:7;;;3667:4;:6;;;3675:4;:6;;;3683:4;:9;;;3624:33;:69::i;:::-;:78;:80::i;:::-;3386:576;;;;;;3727:4;:12;;;3386:576;;;;3764:1;3386:576;;;;3785:19;3386:576;;;;3837:5;3386:576;;;;;;3874:23;3386:576;;;;3928:23;3386:576;;;3378:584;;2828:1141;;;:::o;1646:963::-;1730:4;:13;;;1712:31;;:4;:14;;;:31;;;1706:98;;1785:18;;;;;;;;;;;;;;;;1753:51;;;;;;;1785:18;1753:51;;;:::i;1706:98::-;1828:14;;1820:37;;;;;;:77;;-1:-1:-1;1869:13:148;;;;1861:36;;;;1820:77;1814:164;;1953:13;;;;;;;;;;;;;;;;1921:46;;;;;;;1953:13;1921:46;;;:::i;1814:164::-;2015:1;1993:4;:19;;;:23;1987:96;;2058:24;;;;;;;;;;;;;;;;2026:57;;;;;;;2058:24;2026:57;;;:::i;1987:96::-;2119:1;2099:4;:17;;;:21;2093:92;;2162:22;;;;;;;;;;;;;;;;2130:55;;;;;;;2162:22;2130:55;;;:::i;2093:92::-;2201:7;;;;2211:16;-1:-1:-1;2195:93:148;;2269:18;;;;;;;;;;;;;;;;2237:51;;;;;;;2269:18;2237:51;;;:::i;2195:93::-;2313:1;2304:4;:6;;;:10;:40;;;;-1:-1:-1;2318:6:148;;;;2328:16;-1:-1:-1;2318:26:148;2304:40;2298:106;;2386:17;;;;;;;;;;;;;;;;2354:50;;;;;;;2386:17;2354:50;;;:::i;2298:106::-;2429:1;2420:4;:6;;;:10;:32;;;;;2444:8;2434:4;:6;;;:18;;2420:32;2414:98;;2494:17;;;;;;;;;;;;;;;;2462:50;;;;;;;2494:17;2462:50;;;:::i;2414:98::-;2541:4;:6;;;2528:4;:9;;;:19;;2522:80;;2589:12;;;;;;;;;;;;;;;;2557:45;;;;;;;2589:12;2557:45;;;:::i;2522:80::-;1646:963;:::o;993:4716:149:-;1136:15;1471:1;1460:8;:12;:44;;;;-1:-1:-1;1488:16:149;1476:28;;;1460:44;1453:52;;;;:::i;:::-;1534:1;1522:9;:13;:38;;;;;1552:8;1539:9;:21;;1522:38;1515:46;;;;:::i;:::-;1586:9;1578:4;:17;;1571:25;;;;:::i;:::-;1734:15;1721:9;:28;;1715:94;;1791:17;;;;;;;;;;;;;;;;1759:50;;;;;;;1791:17;1759:50;;;:::i;1715:94::-;2481:9;2470:8;:20;2457:9;:34;2439:15;:52;2433:151;;2551:17;;;;;;;;;;;;;;;;2519:50;;;;;;;2551:17;2519:50;;;:::i;2433:151::-;3026:12;3073:9;3060;3042:15;:27;3041:41;;;;;:::i;:::-;;3026:56;;3180:4;3188:1;3180:9;3176:1246;;4406:1;4393:9;4381:4;4388:1;4381:8;4380:22;4367:9;:36;:40;4360:47;;;;;3176:1246;5451:16;;5438:30;;:37;;:41;;;-1:-1:-1;993:4716:149;;;;;;;:::o;15264:187:7:-;15320:6;15355:16;15346:25;;;15338:76;;;;;;;8574:2:168;15338:76:7;;;8556:21:168;8613:2;8593:18;;;8586:30;8652:34;8632:18;;;8625:62;8723:8;8703:18;;;8696:36;8749:19;;15338:76:7;8372:402:168;15338:76:7;-1:-1:-1;15438:5:7;15264:187::o;14:332:168:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:168:o;639:154::-;725:42;718:5;714:54;707:5;704:65;694:93;;783:1;780;773:12;798:134;866:20;;895:31;866:20;895:31;:::i;:::-;798:134;;;:::o;937:347::-;988:8;998:6;1052:3;1045:4;1037:6;1033:17;1029:27;1019:55;;1070:1;1067;1060:12;1019:55;-1:-1:-1;1093:20:168;;1136:18;1125:30;;1122:50;;;1168:1;1165;1158:12;1122:50;1205:4;1197:6;1193:17;1181:29;;1257:3;1250:4;1241:6;1233;1229:19;1225:30;1222:39;1219:59;;;1274:1;1271;1264:12;1219:59;937:347;;;;;:::o;1289:1401::-;1458:6;1466;1474;1482;1490;1498;1506;1514;1522;1530;1583:3;1571:9;1562:7;1558:23;1554:33;1551:53;;;1600:1;1597;1590:12;1551:53;1613:49;1651:9;1638:23;1613:49;:::i;:::-;1694:9;1681:23;1671:33;;1754:2;1743:9;1739:18;1726:32;1767:31;1792:5;1767:31;:::i;:::-;1817:5;-1:-1:-1;1869:2:168;1854:18;;1841:32;;-1:-1:-1;1920:2:168;1905:18;;1892:32;;-1:-1:-1;1971:3:168;1956:19;;1943:33;;-1:-1:-1;2027:3:168;2012:19;;1999:33;2051:18;2081:14;;;2078:34;;;2108:1;2105;2098:12;2078:34;2147:58;2197:7;2188:6;2177:9;2173:22;2147:58;:::i;:::-;2224:8;;-1:-1:-1;2121:84:168;-1:-1:-1;2312:3:168;2297:19;;2284:33;;-1:-1:-1;2329:16:168;;;2326:36;;;2358:1;2355;2348:12;2326:36;;2397:60;2449:7;2438:8;2427:9;2423:24;2397:60;:::i;:::-;2476:8;;-1:-1:-1;2371:86:168;-1:-1:-1;;2625:3:168;2531:23;;;2556:66;2527:96;2523:106;2520:126;;;2642:1;2639;2632:12;2520:126;2680:3;2669:9;2665:19;2655:29;;1289:1401;;;;;;;;;;;;;:::o;3096:1063::-;3213:6;3221;3229;3237;3245;3253;3261;3314:3;3302:9;3293:7;3289:23;3285:33;3282:53;;;3331:1;3328;3321:12;3282:53;3370:9;3357:23;3389:31;3414:5;3389:31;:::i;:::-;3439:5;-1:-1:-1;3496:2:168;3481:18;;3468:32;3509:33;3468:32;3509:33;:::i;:::-;3561:7;-1:-1:-1;3615:2:168;3600:18;;3587:32;;-1:-1:-1;3670:2:168;3655:18;;3642:32;3693:18;3723:14;;;3720:34;;;3750:1;3747;3740:12;3720:34;3789:58;3839:7;3830:6;3819:9;3815:22;3789:58;:::i;:::-;3866:8;;-1:-1:-1;3763:84:168;-1:-1:-1;3954:3:168;3939:19;;3926:33;;-1:-1:-1;3971:16:168;;;3968:36;;;4000:1;3997;3990:12;3968:36;;4039:60;4091:7;4080:8;4069:9;4065:24;4039:60;:::i;:::-;3096:1063;;;;-1:-1:-1;3096:1063:168;;-1:-1:-1;3096:1063:168;;;;4013:86;;-1:-1:-1;;;3096:1063:168:o;4263:1285::-;4490:13;;2787:42;2776:54;2764:67;;4443:3;4428:19;;4562:4;4554:6;4550:17;4544:24;4577:69;4640:4;4629:9;4625:20;4611:12;2787:42;2776:54;2764:67;;2695:142;4577:69;;4695:4;4687:6;4683:17;4677:24;4710:71;4775:4;4764:9;4760:20;4744:14;2787:42;2776:54;2764:67;;2695:142;4710:71;;4837:4;4829:6;4825:17;4819:24;4812:4;4801:9;4797:20;4790:54;4900:4;4892:6;4888:17;4882:24;4875:4;4864:9;4860:20;4853:54;4956:4;4948:6;4944:17;4938:24;4971:55;5020:4;5009:9;5005:20;4989:14;4240:10;4229:22;4217:35;;4164:94;4971:55;;5082:4;5074:6;5070:17;5064:24;5057:4;5046:9;5042:20;5035:54;5145:4;5137:6;5133:17;5127:24;5120:4;5109:9;5105:20;5098:54;5171:6;5231:2;5223:6;5219:15;5213:22;5208:2;5197:9;5193:18;5186:50;;5255:6;5310:2;5302:6;5298:15;5292:22;5323:51;5370:2;5359:9;5355:18;5339:14;421:13;414:21;402:34;;351:91;5323:51;-1:-1:-1;;5393:6:168;5441:15;;;5435:22;5415:18;;;5408:50;5477:6;5525:15;;;5519:22;5499:18;;;;5492:50;;;;4263:1285;:::o;5553:607::-;5665:4;5694:2;5723;5712:9;5705:21;5755:6;5749:13;5798:6;5793:2;5782:9;5778:18;5771:34;5823:1;5833:140;5847:6;5844:1;5841:13;5833:140;;;5942:14;;;5938:23;;5932:30;5908:17;;;5927:2;5904:26;5897:66;5862:10;;5833:140;;;5837:3;6022:1;6017:2;6008:6;5997:9;5993:22;5989:31;5982:42;6151:2;6081:66;6076:2;6068:6;6064:15;6060:88;6049:9;6045:104;6041:113;6033:121;;;;5553:607;;;;:::o;6165:401::-;6232:2;6226:9;6274:3;6262:16;;6308:18;6293:34;;6329:22;;;6290:62;6287:242;;;6385:77;6382:1;6375:88;6486:4;6483:1;6476:15;6514:4;6511:1;6504:15;6287:242;6545:2;6538:22;6165:401;:::o;6571:927::-;6653:6;6706:3;6694:9;6685:7;6681:23;6677:33;6674:53;;;6723:1;6720;6713:12;6674:53;6749:17;;:::i;:::-;6789:29;6808:9;6789:29;:::i;:::-;6782:5;6775:44;6851:38;6885:2;6874:9;6870:18;6851:38;:::i;:::-;6846:2;6839:5;6835:14;6828:62;6922:38;6956:2;6945:9;6941:18;6922:38;:::i;:::-;6917:2;6910:5;6906:14;6899:62;7021:2;7010:9;7006:18;6993:32;6988:2;6981:5;6977:14;6970:56;7087:3;7076:9;7072:19;7059:33;7053:3;7046:5;7042:15;7035:58;7154:3;7143:9;7139:19;7126:33;7120:3;7113:5;7109:15;7102:58;7221:3;7210:9;7206:19;7193:33;7187:3;7180:5;7176:15;7169:58;7288:3;7277:9;7273:19;7260:33;7254:3;7247:5;7243:15;7236:58;7313:3;7376:2;7365:9;7361:18;7348:32;7343:2;7336:5;7332:14;7325:56;;7400:3;7463:2;7452:9;7448:18;7435:32;7430:2;7423:5;7419:14;7412:56;;7487:5;7477:15;;;6571:927;;;;:::o;7805:184::-;7875:6;7928:2;7916:9;7907:7;7903:23;7899:32;7896:52;;;7944:1;7941;7934:12;7896:52;-1:-1:-1;7967:16:168;;7805:184;-1:-1:-1;7805:184:168:o;7994:::-;8046:77;8043:1;8036:88;8143:4;8140:1;8133:15;8167:4;8164:1;8157:15;8183:184;8235:77;8232:1;8225:88;8332:4;8329:1;8322:15;8356:4;8353:1;8346:15",
    "linkReferences": {},
    "immutableReferences": {
      "55454": [
        {
          "start": 147,
          "length": 32
        },
        {
          "start": 887,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "composableCow()": "93504c52",
    "getTradeableOrder(address,address,bytes32,bytes,bytes)": "b8296fc4",
    "supportsInterface(bytes4)": "01ffc9a7",
    "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": "14a2a784"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ComposableCoW\",\"name\":\"_composableCow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"OrderNotValid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IConditionalOrder\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IConditionalOrder.ConditionalOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ConditionalOrderCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"composableCow\",\"outputs\":[{\"internalType\":\"contract ComposableCoW\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getTradeableOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainInput\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"mfw78 <mfw78@rndlabs.xyz>\",\"details\":\"Designed to be used with the CoW Protocol Conditional Order Framework.\",\"errors\":{\"OrderNotValid(string)\":[{\"details\":\"This error is returned by the `getTradeableOrder` function if the order condition is not met.      A parameter of `string` type is included to allow the caller to specify the reason for the failure.\"}]},\"events\":{\"ConditionalOrderCreated(address,(address,bytes32,bytes))\":{\"details\":\"This event is emitted when a new conditional order is created.\",\"params\":{\"owner\":\"the address that has created the conditional order\",\"params\":\"the address / salt / data of the conditional order\"}}},\"kind\":\"dev\",\"methods\":{\"getTradeableOrder(address,address,bytes32,bytes,bytes)\":{\"details\":\"`owner`, `sender` and `offchainInput` is not used.\",\"params\":{\"ctx\":\"the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the parent `isValidSignature` call\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"},\"returns\":{\"order\":\"the tradeable order for submission to the CoW Protocol API\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"details\":\"As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.\",\"params\":{\"_hash\":\"the hash of the order\",\"ctx\":\"the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet\",\"domainSeparator\":\"the domain separator used to sign the order\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"order\":\"`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the transaction\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"}}},\"title\":\"TWAP Conditional Order\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"notice\":\"Verify if a given discrete order is valid.\"}},\"notice\":\"TWAP conditional orders allow for splitting an order into a series of orders that are executed at a fixed interval. This is useful for ensuring that a trade is executed at a specific price, even if the price of the token changes during the trade.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/types/twap/TWAP.sol\":\"TWAP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/=lib/@openzeppelin/contracts/\",\":@openzeppelin/contracts/=lib/@openzeppelin/contracts/\",\":balancer/=lib/balancer/src/\",\":canonical-weth/=lib/canonical-weth/src/\",\":cowprotocol/=lib/cowprotocol/src/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":helpers/=lib/balancer/src/lib/helpers/\",\":math/=lib/balancer/src/lib/math/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/@openzeppelin/contracts/\",\":safe/=lib/safe/contracts/\"]},\"sources\":{\"lib/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45\",\"dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq\"]},\"lib/@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0\",\"dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx\"]},\"lib/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04\",\"dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG\"]},\"lib/@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]},\"lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol\":{\"keccak256\":\"0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f\",\"dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF\"]},\"lib/cowprotocol/src/contracts/libraries/GPv2Order.sol\":{\"keccak256\":\"0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d\",\"dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg\"]},\"lib/safe/contracts/Safe.sol\":{\"keccak256\":\"0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://f95884e85691d49ba3efb9b2a160466fed17377bfa92fc8bf5923f3c61e99119\",\"dweb:/ipfs/QmQjhP9RnB3Cj3DNpWLzWqqvRdKBya6Efx6xzmRrwLqjm9\"]},\"lib/safe/contracts/base/Executor.sol\":{\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://710022b40c9f78a5b55b97f6ce600e4834df2ddd36bf714974d953883c82d58c\",\"dweb:/ipfs/QmbdJNKH5opevm7HxQKQAe6W7dQTgSHKa4nKvbUNGRcQQp\"]},\"lib/safe/contracts/base/FallbackManager.sol\":{\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://7975be46d228510c70659b18076aecb3b0e7331b4d3a162444304145143bdc6e\",\"dweb:/ipfs/QmRRbZrWUnoky6pVo8zMUzCTsshR4sZ2FjR13s8vyAb8dV\"]},\"lib/safe/contracts/base/GuardManager.sol\":{\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3ff8a4194d1160d2e23142937bc9d7eac7b6b553b1ee226390a0df07ebac1b64\",\"dweb:/ipfs/QmSw8Y7z4TQrUTEosdWqcug7TUv9Tg1kxqMKHd7RuTnyzx\"]},\"lib/safe/contracts/base/ModuleManager.sol\":{\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://30812896d9f57cae84a432c67fbb3007d566071ec203b2992f1c0f762722df0d\",\"dweb:/ipfs/QmRyJ3JbsUwDQxQDTrqDDX4qNtVu7XiW8cD8WP5kgNJGGz\"]},\"lib/safe/contracts/base/OwnerManager.sol\":{\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://5729c58b14e7b656c71dd3377e9519c0d34ef8c04851a9a21c3d62393e4fae7a\",\"dweb:/ipfs/QmRRtfFpNqvdANny9TYBr8rA3HbT1egUCpb2uXALMHkVxK\"]},\"lib/safe/contracts/common/Enum.sol\":{\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://385929800d1c0f92eb165fcf37a9e28b395b17d8b74f74755654d3a096a0fc34\",\"dweb:/ipfs/QmagieLuN2jrp2oJHFyZuyz65Sh1CcupnXSEKypGFS5Gvo\"]},\"lib/safe/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9\",\"dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g\"]},\"lib/safe/contracts/common/SecuredTokenTransfer.sol\":{\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://c26495b1fe9229ea17f90b70f295030880d629b9ea3016ea20b634983865f7b3\",\"dweb:/ipfs/QmTc1UmKcynkKn8DeviLMuy6scxNvAVSdLoX4ndUtdEL9N\"]},\"lib/safe/contracts/common/SelfAuthorized.sol\":{\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8e9a317f0c3c02ab1d6c38039bff2b3e0c97f4dc9d229d3d9149c1af1c5023b3\",\"dweb:/ipfs/QmNcZjNChsuXF34T6f3Zu7i3tnqvKN4NyWBWZ4tXLH9kMu\"]},\"lib/safe/contracts/common/SignatureDecoder.sol\":{\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://00cdded3068b9051ee0a966f40926fbc57dbe7ef8bf4285db3740f9d50468c80\",\"dweb:/ipfs/QmcP5hKmaRqBe7TpgoXtncZqsNKKdCCKxZgXoxEL4Nj5F4\"]},\"lib/safe/contracts/common/Singleton.sol\":{\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde\",\"dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo\"]},\"lib/safe/contracts/common/StorageAccessible.sol\":{\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e\",\"dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ\"]},\"lib/safe/contracts/external/SafeMath.sol\":{\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c\",\"dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x\"]},\"lib/safe/contracts/handler/ExtensibleFallbackHandler.sol\":{\"keccak256\":\"0x7e511290dae21c9b1710c9250320d9b98ffd71c9501af354814485b58e1b64e9\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3e55ba23bde90d2cdd07baa7172ea41bdc1d638bc7b6eb5dce03189d86412515\",\"dweb:/ipfs/QmbxH73sqooeQL8ehsP2FDoXhLBoPs3wr3nod6ZgJwVcFV\"]},\"lib/safe/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x3e105ebac003af9c8d34e3eed517ff0355d5f487e17478c85df0f225b04846f5\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://657bec347d746453883c461a3d9a2275bf2b99625dcaef0960e1c0276c3d56c4\",\"dweb:/ipfs/QmUGj8Tzs1CsmUf63LbTMK81EEGtYYnWKLGdHHtoYCd9CF\"]},\"lib/safe/contracts/handler/extensible/Base.sol\":{\"keccak256\":\"0xe5b71121b0020728158ee60756982e74809f9d77cb294a6d65930bff09d84d15\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://fd7fd2702b31fc8569a9986a476dd9fe9aa76624d0da6d832547f624426925f9\",\"dweb:/ipfs/QmWjYGtW38Fnwvm8qFvoJYhz2nTuySGkHouwRF3eksd6Nh\"]},\"lib/safe/contracts/handler/extensible/ERC165Handler.sol\":{\"keccak256\":\"0x6e19ba1deb09a34cca28891bfefd853697b808dfb8a9cddd4051d3058d3eb718\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://0b1059e752bd142160a4fbe8ee08377a50902d31b8b909df002480d191af0cf4\",\"dweb:/ipfs/QmbuUmvgoodsZGgqR793duEWF5t7h6USAXfpr2N1VvBmeP\"]},\"lib/safe/contracts/handler/extensible/FallbackHandler.sol\":{\"keccak256\":\"0xbe7db6cbdb034c9aee1eae12200ab2e94fa4743ae08dbba2f1a001c4b62f3e0b\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://4fbba0ea04349873b38f7c7104d0a88ffd6e7ec399a3fdd0e1297ce12eebb19e\",\"dweb:/ipfs/QmYiDukcX2y7ratxsMX6hLMKzGQTD67CKLpuiSpgm1HGue\"]},\"lib/safe/contracts/handler/extensible/MarshalLib.sol\":{\"keccak256\":\"0x531476118b7948b06a0c7094badd6f1ae33ae2ddca815110030e87ee62c4a895\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://f21ad2619b5bcbc977c5943d2f668e8bfb9ef6968db1193415e046171a5a150a\",\"dweb:/ipfs/QmYZeu3vr6eRWjeYp8GvWSVRLm9baFbTyEGgAy2hMAqbLX\"]},\"lib/safe/contracts/handler/extensible/SignatureVerifierMuxer.sol\":{\"keccak256\":\"0xc60a1d55ff0cf532a44bd864683719e3d6e1fa6d20d4c77812e21c33afecf304\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://298c7efe668a4ca8d3b712770973931d604c84304aececd621f0350d7d293b68\",\"dweb:/ipfs/QmVcNdQ7ZsnmDgSX8TFRLHk4HZUXH86u2akAM5q3g1PFfZ\"]},\"lib/safe/contracts/handler/extensible/TokenCallbacks.sol\":{\"keccak256\":\"0xfb0f8f01a7191ab358f196a7e055441ede00f36805f12c579a742a5cd3c4f8d7\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://0d485ea9fc430a89953ffe2d2c7032b5a330f086bbb784e81eb6b00a692f6438\",\"dweb:/ipfs/QmNofKrkU9VTtGMN9Rc6js2jyUscSFxce8kjBz5rZL4RSJ\"]},\"lib/safe/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://59ca1157dcfe19c72b9d1244a6ae5ec70fee9793d4d8af523b70f22ae567d55c\",\"dweb:/ipfs/QmfE3kv73QuQWAWQND927LWVHVLCp19m1mLUvxVYJDEFZM\"]},\"lib/safe/contracts/interfaces/ERC721TokenReceiver.sol\":{\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://99a54737bc23722f79ec9cf9de63ba35b556a61df453eb332f3cac783503f26c\",\"dweb:/ipfs/QmbLW5C2RhoLbwDWEPtTKpyYE5apT9B3q4U11PZG3wSM1n\"]},\"lib/safe/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89\",\"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38\"]},\"lib/safe/contracts/interfaces/ISignatureValidator.sol\":{\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3c4a1371948b11f78171bc4ae4fd169a1eec11e5c4b273eb2c54bc030a1aae25\",\"dweb:/ipfs/QmPuztatXZYVS65n8YbCyccJFZYPP6zQfBQ8tTY27pB978\"]},\"src/BaseConditionalOrder.sol\":{\"keccak256\":\"0x510558386b92b1d5961d8158ae6e3288a1d520c03123d109042a5ec3290b9588\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e071465250cbc11d946f422f4ff774d757291cac00f4c69fbac1d1e34cdae402\",\"dweb:/ipfs/QmUF2qNwJhvs3GeWmsWnL6y21eL6mb3QEW7EPYY7NZc25v\"]},\"src/ComposableCoW.sol\":{\"keccak256\":\"0x565c6fabc8a1e185acfb4539baeb7e3cabb004b54da2c777cbdbb3c98dbd6a52\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://2b876b6b4a69f69b7f9445e67a0e60dd7a65f028d54ba9c4c8c983a00ee23642\",\"dweb:/ipfs/Qmf95tsR515WFv2yBKp4NzhFc9xvfZRtS194Lq7SY2r7zC\"]},\"src/interfaces/IConditionalOrder.sol\":{\"keccak256\":\"0x52c9a2b5d5cc7345fe4b4c039af88c5621bc7c6059534cc7c76b77833aafae7b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1660e1510b82216e38b669f16b69f4a37b012b00655d0fc6794e4d77d2182699\",\"dweb:/ipfs/QmNiZ7rMT74sKT9d6SUEnKXiWjaYLL8nAzSdLBXBAzYNmZ\"]},\"src/interfaces/ISwapGuard.sol\":{\"keccak256\":\"0x60abdef709d22cb95e4b1d4680cb70d5286cfb5aa71ec65868cc44164ef8790f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7593245e22ffc533a073891affdbb003fa56eaa5ef7f0202a673b52968ad7ed5\",\"dweb:/ipfs/QmRhAvNzbHp8qfrw7eHZP6EDWw42tXMXSV3KuyhyxFy3Nx\"]},\"src/interfaces/IValueFactory.sol\":{\"keccak256\":\"0x3304ef8a0a1727258ac8278bf5426daeac37ece4653eaaff87b15143814a8122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9934d278069dd9474065777833a81e65af227b85d350b6c1f012b812101be9de\",\"dweb:/ipfs/QmcMBdvY7wLs92FCyutDGQGtHnYryjnaykREvDNBNM8Yih\"]},\"src/types/twap/TWAP.sol\":{\"keccak256\":\"0x009eb71fc8e7f782e6d0d65f87188c530106ba4f1f8d5f6bf3a165e34710e611\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://1634e714b4f7c7217f407b253b7eb3be06585213b3d2c69ddc495183cbe97a0f\",\"dweb:/ipfs/QmUjV8ivqgVfmVRDbJpKUGzxkFEGHZKCtAopYrYeyvyWKR\"]},\"src/types/twap/libraries/TWAPOrder.sol\":{\"keccak256\":\"0x5f17b26cd0f9d5cdc6451515852dd9d1d7f7b24aeab8c6d375fa68c20243f2e3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fafbf95d8a428145e490fd378cda74e9d4ebc2aa566faa19a7a04c6080dec166\",\"dweb:/ipfs/QmU9exeSmHJcmCriXD9oQ9c8cAtWHtnM9AYQNbeJyr8HSb\"]},\"src/types/twap/libraries/TWAPOrderMathLib.sol\":{\"keccak256\":\"0x9cb5263a1b8689b6ff59b9bcd14de0d031d8ed7efef56080f32b80c6f15e8d68\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d0411cab6f65fc3ab6415f9009d6a1ba0eda0348c66c09a9937fb261cc4c18a9\",\"dweb:/ipfs/QmSdo9dtkteSATZbd8SJcE4M3bLiFZjebHhSsPmV8NZhfG\"]},\"src/vendored/CoWSettlement.sol\":{\"keccak256\":\"0x4e4e317b24017cd87eb11d16368b8c06ec19306d31946c330a86f9f136df38d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34b9b2fc2c89e60497457cd812da9c53718c15ddfbf70f6e11832d22092c1840\",\"dweb:/ipfs/QmYFzaynWZfdpmFRf2dZrQ32Ep53AtQDd5fTE3a89xVkaR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ComposableCoW",
              "name": "_composableCow",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "OrderNotValid"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct IConditionalOrder.ConditionalOrderParams",
              "name": "params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IConditionalOrder",
                  "name": "handler",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "staticInput",
                  "type": "bytes"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ConditionalOrderCreated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "composableCow",
          "outputs": [
            {
              "internalType": "contract ComposableCoW",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ctx",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTradeableOrder",
          "outputs": [
            {
              "internalType": "struct GPv2Order.Data",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ctx",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "offchainInput",
              "type": "bytes"
            },
            {
              "internalType": "struct GPv2Order.Data",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verify"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getTradeableOrder(address,address,bytes32,bytes,bytes)": {
            "details": "`owner`, `sender` and `offchainInput` is not used.",
            "params": {
              "ctx": "the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the parent `isValidSignature` call",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            },
            "returns": {
              "order": "the tradeable order for submission to the CoW Protocol API"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "details": "As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.",
            "params": {
              "_hash": "the hash of the order",
              "ctx": "the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet",
              "domainSeparator": "the domain separator used to sign the order",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "order": "`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the transaction",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "notice": "Verify if a given discrete order is valid."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/@openzeppelin/contracts/",
        ":@openzeppelin/contracts/=lib/@openzeppelin/contracts/",
        ":balancer/=lib/balancer/src/",
        ":canonical-weth/=lib/canonical-weth/src/",
        ":cowprotocol/=lib/cowprotocol/src/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":helpers/=lib/balancer/src/lib/helpers/",
        ":math/=lib/balancer/src/lib/math/",
        ":murky/=lib/murky/src/",
        ":openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/@openzeppelin/contracts/",
        ":safe/=lib/safe/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/types/twap/TWAP.sol": "TWAP"
      },
      "libraries": {}
    },
    "sources": {
      "lib/@openzeppelin/contracts/interfaces/IERC20.sol": {
        "keccak256": "0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45",
        "urls": [
          "bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45",
          "dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
        "keccak256": "0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516",
        "urls": [
          "bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0",
          "dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
        "keccak256": "0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac",
        "urls": [
          "bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04",
          "dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG"
        ],
        "license": "MIT"
      },
      "lib/@openzeppelin/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad",
        "urls": [
          "bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278",
          "dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH"
        ],
        "license": "MIT"
      },
      "lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol": {
        "keccak256": "0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528",
        "urls": [
          "bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f",
          "dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/cowprotocol/src/contracts/libraries/GPv2Order.sol": {
        "keccak256": "0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f",
        "urls": [
          "bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d",
          "dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/safe/contracts/Safe.sol": {
        "keccak256": "0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638",
        "urls": [
          "bzz-raw://f95884e85691d49ba3efb9b2a160466fed17377bfa92fc8bf5923f3c61e99119",
          "dweb:/ipfs/QmQjhP9RnB3Cj3DNpWLzWqqvRdKBya6Efx6xzmRrwLqjm9"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/Executor.sol": {
        "keccak256": "0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a",
        "urls": [
          "bzz-raw://710022b40c9f78a5b55b97f6ce600e4834df2ddd36bf714974d953883c82d58c",
          "dweb:/ipfs/QmbdJNKH5opevm7HxQKQAe6W7dQTgSHKa4nKvbUNGRcQQp"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/FallbackManager.sol": {
        "keccak256": "0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165",
        "urls": [
          "bzz-raw://7975be46d228510c70659b18076aecb3b0e7331b4d3a162444304145143bdc6e",
          "dweb:/ipfs/QmRRbZrWUnoky6pVo8zMUzCTsshR4sZ2FjR13s8vyAb8dV"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/GuardManager.sol": {
        "keccak256": "0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d",
        "urls": [
          "bzz-raw://3ff8a4194d1160d2e23142937bc9d7eac7b6b553b1ee226390a0df07ebac1b64",
          "dweb:/ipfs/QmSw8Y7z4TQrUTEosdWqcug7TUv9Tg1kxqMKHd7RuTnyzx"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/ModuleManager.sol": {
        "keccak256": "0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a",
        "urls": [
          "bzz-raw://30812896d9f57cae84a432c67fbb3007d566071ec203b2992f1c0f762722df0d",
          "dweb:/ipfs/QmRyJ3JbsUwDQxQDTrqDDX4qNtVu7XiW8cD8WP5kgNJGGz"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/OwnerManager.sol": {
        "keccak256": "0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c",
        "urls": [
          "bzz-raw://5729c58b14e7b656c71dd3377e9519c0d34ef8c04851a9a21c3d62393e4fae7a",
          "dweb:/ipfs/QmRRtfFpNqvdANny9TYBr8rA3HbT1egUCpb2uXALMHkVxK"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/Enum.sol": {
        "keccak256": "0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453",
        "urls": [
          "bzz-raw://385929800d1c0f92eb165fcf37a9e28b395b17d8b74f74755654d3a096a0fc34",
          "dweb:/ipfs/QmagieLuN2jrp2oJHFyZuyz65Sh1CcupnXSEKypGFS5Gvo"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/NativeCurrencyPaymentFallback.sol": {
        "keccak256": "0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba",
        "urls": [
          "bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9",
          "dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SecuredTokenTransfer.sol": {
        "keccak256": "0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05",
        "urls": [
          "bzz-raw://c26495b1fe9229ea17f90b70f295030880d629b9ea3016ea20b634983865f7b3",
          "dweb:/ipfs/QmTc1UmKcynkKn8DeviLMuy6scxNvAVSdLoX4ndUtdEL9N"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SelfAuthorized.sol": {
        "keccak256": "0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13",
        "urls": [
          "bzz-raw://8e9a317f0c3c02ab1d6c38039bff2b3e0c97f4dc9d229d3d9149c1af1c5023b3",
          "dweb:/ipfs/QmNcZjNChsuXF34T6f3Zu7i3tnqvKN4NyWBWZ4tXLH9kMu"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SignatureDecoder.sol": {
        "keccak256": "0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c",
        "urls": [
          "bzz-raw://00cdded3068b9051ee0a966f40926fbc57dbe7ef8bf4285db3740f9d50468c80",
          "dweb:/ipfs/QmcP5hKmaRqBe7TpgoXtncZqsNKKdCCKxZgXoxEL4Nj5F4"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/Singleton.sol": {
        "keccak256": "0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50",
        "urls": [
          "bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde",
          "dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/StorageAccessible.sol": {
        "keccak256": "0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e",
        "urls": [
          "bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e",
          "dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/external/SafeMath.sol": {
        "keccak256": "0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89",
        "urls": [
          "bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c",
          "dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/ExtensibleFallbackHandler.sol": {
        "keccak256": "0x7e511290dae21c9b1710c9250320d9b98ffd71c9501af354814485b58e1b64e9",
        "urls": [
          "bzz-raw://3e55ba23bde90d2cdd07baa7172ea41bdc1d638bc7b6eb5dce03189d86412515",
          "dweb:/ipfs/QmbxH73sqooeQL8ehsP2FDoXhLBoPs3wr3nod6ZgJwVcFV"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/HandlerContext.sol": {
        "keccak256": "0x3e105ebac003af9c8d34e3eed517ff0355d5f487e17478c85df0f225b04846f5",
        "urls": [
          "bzz-raw://657bec347d746453883c461a3d9a2275bf2b99625dcaef0960e1c0276c3d56c4",
          "dweb:/ipfs/QmUGj8Tzs1CsmUf63LbTMK81EEGtYYnWKLGdHHtoYCd9CF"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/Base.sol": {
        "keccak256": "0xe5b71121b0020728158ee60756982e74809f9d77cb294a6d65930bff09d84d15",
        "urls": [
          "bzz-raw://fd7fd2702b31fc8569a9986a476dd9fe9aa76624d0da6d832547f624426925f9",
          "dweb:/ipfs/QmWjYGtW38Fnwvm8qFvoJYhz2nTuySGkHouwRF3eksd6Nh"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/ERC165Handler.sol": {
        "keccak256": "0x6e19ba1deb09a34cca28891bfefd853697b808dfb8a9cddd4051d3058d3eb718",
        "urls": [
          "bzz-raw://0b1059e752bd142160a4fbe8ee08377a50902d31b8b909df002480d191af0cf4",
          "dweb:/ipfs/QmbuUmvgoodsZGgqR793duEWF5t7h6USAXfpr2N1VvBmeP"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/FallbackHandler.sol": {
        "keccak256": "0xbe7db6cbdb034c9aee1eae12200ab2e94fa4743ae08dbba2f1a001c4b62f3e0b",
        "urls": [
          "bzz-raw://4fbba0ea04349873b38f7c7104d0a88ffd6e7ec399a3fdd0e1297ce12eebb19e",
          "dweb:/ipfs/QmYiDukcX2y7ratxsMX6hLMKzGQTD67CKLpuiSpgm1HGue"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/MarshalLib.sol": {
        "keccak256": "0x531476118b7948b06a0c7094badd6f1ae33ae2ddca815110030e87ee62c4a895",
        "urls": [
          "bzz-raw://f21ad2619b5bcbc977c5943d2f668e8bfb9ef6968db1193415e046171a5a150a",
          "dweb:/ipfs/QmYZeu3vr6eRWjeYp8GvWSVRLm9baFbTyEGgAy2hMAqbLX"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/SignatureVerifierMuxer.sol": {
        "keccak256": "0xc60a1d55ff0cf532a44bd864683719e3d6e1fa6d20d4c77812e21c33afecf304",
        "urls": [
          "bzz-raw://298c7efe668a4ca8d3b712770973931d604c84304aececd621f0350d7d293b68",
          "dweb:/ipfs/QmVcNdQ7ZsnmDgSX8TFRLHk4HZUXH86u2akAM5q3g1PFfZ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/TokenCallbacks.sol": {
        "keccak256": "0xfb0f8f01a7191ab358f196a7e055441ede00f36805f12c579a742a5cd3c4f8d7",
        "urls": [
          "bzz-raw://0d485ea9fc430a89953ffe2d2c7032b5a330f086bbb784e81eb6b00a692f6438",
          "dweb:/ipfs/QmNofKrkU9VTtGMN9Rc6js2jyUscSFxce8kjBz5rZL4RSJ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ERC1155TokenReceiver.sol": {
        "keccak256": "0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493",
        "urls": [
          "bzz-raw://59ca1157dcfe19c72b9d1244a6ae5ec70fee9793d4d8af523b70f22ae567d55c",
          "dweb:/ipfs/QmfE3kv73QuQWAWQND927LWVHVLCp19m1mLUvxVYJDEFZM"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ERC721TokenReceiver.sol": {
        "keccak256": "0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479",
        "urls": [
          "bzz-raw://99a54737bc23722f79ec9cf9de63ba35b556a61df453eb332f3cac783503f26c",
          "dweb:/ipfs/QmbLW5C2RhoLbwDWEPtTKpyYE5apT9B3q4U11PZG3wSM1n"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/IERC165.sol": {
        "keccak256": "0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb",
        "urls": [
          "bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89",
          "dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ISignatureValidator.sol": {
        "keccak256": "0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457",
        "urls": [
          "bzz-raw://3c4a1371948b11f78171bc4ae4fd169a1eec11e5c4b273eb2c54bc030a1aae25",
          "dweb:/ipfs/QmPuztatXZYVS65n8YbCyccJFZYPP6zQfBQ8tTY27pB978"
        ],
        "license": "LGPL-3.0-only"
      },
      "src/BaseConditionalOrder.sol": {
        "keccak256": "0x510558386b92b1d5961d8158ae6e3288a1d520c03123d109042a5ec3290b9588",
        "urls": [
          "bzz-raw://e071465250cbc11d946f422f4ff774d757291cac00f4c69fbac1d1e34cdae402",
          "dweb:/ipfs/QmUF2qNwJhvs3GeWmsWnL6y21eL6mb3QEW7EPYY7NZc25v"
        ],
        "license": "MIT"
      },
      "src/ComposableCoW.sol": {
        "keccak256": "0x565c6fabc8a1e185acfb4539baeb7e3cabb004b54da2c777cbdbb3c98dbd6a52",
        "urls": [
          "bzz-raw://2b876b6b4a69f69b7f9445e67a0e60dd7a65f028d54ba9c4c8c983a00ee23642",
          "dweb:/ipfs/Qmf95tsR515WFv2yBKp4NzhFc9xvfZRtS194Lq7SY2r7zC"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/IConditionalOrder.sol": {
        "keccak256": "0x52c9a2b5d5cc7345fe4b4c039af88c5621bc7c6059534cc7c76b77833aafae7b",
        "urls": [
          "bzz-raw://1660e1510b82216e38b669f16b69f4a37b012b00655d0fc6794e4d77d2182699",
          "dweb:/ipfs/QmNiZ7rMT74sKT9d6SUEnKXiWjaYLL8nAzSdLBXBAzYNmZ"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/ISwapGuard.sol": {
        "keccak256": "0x60abdef709d22cb95e4b1d4680cb70d5286cfb5aa71ec65868cc44164ef8790f",
        "urls": [
          "bzz-raw://7593245e22ffc533a073891affdbb003fa56eaa5ef7f0202a673b52968ad7ed5",
          "dweb:/ipfs/QmRhAvNzbHp8qfrw7eHZP6EDWw42tXMXSV3KuyhyxFy3Nx"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/IValueFactory.sol": {
        "keccak256": "0x3304ef8a0a1727258ac8278bf5426daeac37ece4653eaaff87b15143814a8122",
        "urls": [
          "bzz-raw://9934d278069dd9474065777833a81e65af227b85d350b6c1f012b812101be9de",
          "dweb:/ipfs/QmcMBdvY7wLs92FCyutDGQGtHnYryjnaykREvDNBNM8Yih"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/TWAP.sol": {
        "keccak256": "0x009eb71fc8e7f782e6d0d65f87188c530106ba4f1f8d5f6bf3a165e34710e611",
        "urls": [
          "bzz-raw://1634e714b4f7c7217f407b253b7eb3be06585213b3d2c69ddc495183cbe97a0f",
          "dweb:/ipfs/QmUjV8ivqgVfmVRDbJpKUGzxkFEGHZKCtAopYrYeyvyWKR"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/libraries/TWAPOrder.sol": {
        "keccak256": "0x5f17b26cd0f9d5cdc6451515852dd9d1d7f7b24aeab8c6d375fa68c20243f2e3",
        "urls": [
          "bzz-raw://fafbf95d8a428145e490fd378cda74e9d4ebc2aa566faa19a7a04c6080dec166",
          "dweb:/ipfs/QmU9exeSmHJcmCriXD9oQ9c8cAtWHtnM9AYQNbeJyr8HSb"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/libraries/TWAPOrderMathLib.sol": {
        "keccak256": "0x9cb5263a1b8689b6ff59b9bcd14de0d031d8ed7efef56080f32b80c6f15e8d68",
        "urls": [
          "bzz-raw://d0411cab6f65fc3ab6415f9009d6a1ba0eda0348c66c09a9937fb261cc4c18a9",
          "dweb:/ipfs/QmSdo9dtkteSATZbd8SJcE4M3bLiFZjebHhSsPmV8NZhfG"
        ],
        "license": "GPL-3.0"
      },
      "src/vendored/CoWSettlement.sol": {
        "keccak256": "0x4e4e317b24017cd87eb11d16368b8c06ec19306d31946c330a86f9f136df38d7",
        "urls": [
          "bzz-raw://34b9b2fc2c89e60497457cd812da9c53718c15ddfbf70f6e11832d22092c1840",
          "dweb:/ipfs/QmYFzaynWZfdpmFRf2dZrQ32Ep53AtQDd5fTE3a89xVkaR"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/types/twap/TWAP.sol",
    "id": 55540,
    "exportedSymbols": {
      "BaseConditionalOrder": [
        53501
      ],
      "CoWSettlement": [
        55972
      ],
      "ComposableCoW": [
        54177
      ],
      "EIP712": [
        52037
      ],
      "ERC1155TokenReceiver": [
        52147
      ],
      "ERC1271": [
        51612
      ],
      "ERC165Handler": [
        51370
      ],
      "ERC721TokenReceiver": [
        52165
      ],
      "ExtensibleBase": [
        51012
      ],
      "ExtensibleFallbackHandler": [
        50607
      ],
      "FallbackHandler": [
        51492
      ],
      "GPv2Interaction": [
        17090
      ],
      "GPv2Order": [
        17246
      ],
      "HandlerContext": [
        50638
      ],
      "IConditionalOrder": [
        54437
      ],
      "IConditionalOrderGenerator": [
        54468
      ],
      "IERC165": [
        52197
      ],
      "IERC165Handler": [
        51051
      ],
      "IFallbackHandler": [
        51381
      ],
      "IFallbackMethod": [
        50786
      ],
      "INVALID_HASH": [
        53402
      ],
      "ISafeSignatureVerifier": [
        51635
      ],
      "ISignatureValidator": [
        52216
      ],
      "ISignatureValidatorConstants": [
        52203
      ],
      "ISignatureVerifierMuxer": [
        51655
      ],
      "IStaticFallbackMethod": [
        50801
      ],
      "ISwapGuard": [
        54496
      ],
      "IValueFactory": [
        54508
      ],
      "MarshalLib": [
        51598
      ],
      "MerkleProof": [
        1245
      ],
      "NOT_WITHIN_SPAN": [
        55448
      ],
      "Safe": [
        48851
      ],
      "SignatureVerifierMuxer": [
        52004
      ],
      "TWAP": [
        55539
      ],
      "TWAPOrder": [
        55808
      ],
      "TokenCallbacks": [
        52110
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:2167:147",
    "nodes": [
      {
        "id": 55440,
        "nodeType": "PragmaDirective",
        "src": "36:31:147",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 55441,
        "nodeType": "ImportDirective",
        "src": "69:33:147",
        "nodes": [],
        "absolutePath": "src/ComposableCoW.sol",
        "file": "../../ComposableCoW.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55540,
        "sourceUnit": 54178,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 55442,
        "nodeType": "ImportDirective",
        "src": "104:40:147",
        "nodes": [],
        "absolutePath": "src/BaseConditionalOrder.sol",
        "file": "../../BaseConditionalOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55540,
        "sourceUnit": 53502,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 55444,
        "nodeType": "ImportDirective",
        "src": "145:52:147",
        "nodes": [],
        "absolutePath": "src/types/twap/libraries/TWAPOrder.sol",
        "file": "./libraries/TWAPOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55540,
        "sourceUnit": 55809,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55443,
              "name": "TWAPOrder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 55808,
              "src": "153:9:147",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55448,
        "nodeType": "VariableDeclaration",
        "src": "278:51:147",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "NOT_WITHIN_SPAN",
        "nameLocation": "294:15:147",
        "scope": 55540,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_memory_ptr",
          "typeString": "string"
        },
        "typeName": {
          "id": 55446,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "278:6:147",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "6e6f742077697468696e207370616e",
          "id": 55447,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "312:17:147",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_9c7896a1230b65b3fedeb00c154cd44bb80077b089d6cb0c0fb91343a53c8fe6",
            "typeString": "literal_string \"not within span\""
          },
          "value": "not within span"
        },
        "visibility": "internal"
      },
      {
        "id": 55539,
        "nodeType": "ContractDefinition",
        "src": "753:1449:147",
        "nodes": [
          {
            "id": 55454,
            "nodeType": "VariableDeclaration",
            "src": "797:44:147",
            "nodes": [],
            "constant": false,
            "functionSelector": "93504c52",
            "mutability": "immutable",
            "name": "composableCow",
            "nameLocation": "828:13:147",
            "scope": 55539,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ComposableCoW_$54177",
              "typeString": "contract ComposableCoW"
            },
            "typeName": {
              "id": 55453,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 55452,
                "name": "ComposableCoW",
                "nameLocations": [
                  "797:13:147"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 54177,
                "src": "797:13:147"
              },
              "referencedDeclaration": 54177,
              "src": "797:13:147",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                "typeString": "contract ComposableCoW"
              }
            },
            "visibility": "public"
          },
          {
            "id": 55465,
            "nodeType": "FunctionDefinition",
            "src": "848:89:147",
            "nodes": [],
            "body": {
              "id": 55464,
              "nodeType": "Block",
              "src": "890:47:147",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 55462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55460,
                      "name": "composableCow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55454,
                      "src": "900:13:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                        "typeString": "contract ComposableCoW"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 55461,
                      "name": "_composableCow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55457,
                      "src": "916:14:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                        "typeString": "contract ComposableCoW"
                      }
                    },
                    "src": "900:30:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                      "typeString": "contract ComposableCoW"
                    }
                  },
                  "id": 55463,
                  "nodeType": "ExpressionStatement",
                  "src": "900:30:147"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 55458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55457,
                  "mutability": "mutable",
                  "name": "_composableCow",
                  "nameLocation": "874:14:147",
                  "nodeType": "VariableDeclaration",
                  "scope": 55465,
                  "src": "860:28:147",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                    "typeString": "contract ComposableCoW"
                  },
                  "typeName": {
                    "id": 55456,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55455,
                      "name": "ComposableCoW",
                      "nameLocations": [
                        "860:13:147"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54177,
                      "src": "860:13:147"
                    },
                    "referencedDeclaration": 54177,
                    "src": "860:13:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                      "typeString": "contract ComposableCoW"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "859:30:147"
            },
            "returnParameters": {
              "id": 55459,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "890:0:147"
            },
            "scope": 55539,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55538,
            "nodeType": "FunctionDefinition",
            "src": "1068:1132:147",
            "nodes": [],
            "body": {
              "id": 55537,
              "nodeType": "Block",
              "src": "1271:929:147",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55487
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55487,
                      "mutability": "mutable",
                      "name": "twap",
                      "nameLocation": "1686:4:147",
                      "nodeType": "VariableDeclaration",
                      "scope": 55537,
                      "src": "1664:26:147",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                        "typeString": "struct TWAPOrder.Data"
                      },
                      "typeName": {
                        "id": 55486,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 55485,
                          "name": "TWAPOrder.Data",
                          "nameLocations": [
                            "1664:9:147",
                            "1674:4:147"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 55603,
                          "src": "1664:14:147"
                        },
                        "referencedDeclaration": 55603,
                        "src": "1664:14:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55603_storage_ptr",
                          "typeString": "struct TWAPOrder.Data"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": " @dev Decode the payload into a TWAP bundle and get the order. `orderFor` will revert if\n there is no current valid order.\n NOTE: This will return an order even if the part of the TWAP bundle that is currently\n valid is filled. This is safe as CoW Protocol ensures that each `orderUid` is only\n settled once.",
                  "id": 55495,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 55490,
                        "name": "staticInput",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55474,
                        "src": "1704:11:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "expression": {
                              "id": 55491,
                              "name": "TWAPOrder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55808,
                              "src": "1718:9:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55808_$",
                                "typeString": "type(library TWAPOrder)"
                              }
                            },
                            "id": 55492,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1728:4:147",
                            "memberName": "Data",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55603,
                            "src": "1718:14:147",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_Data_$55603_storage_ptr_$",
                              "typeString": "type(struct TWAPOrder.Data storage pointer)"
                            }
                          }
                        ],
                        "id": 55493,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1717:16:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55603_storage_ptr_$",
                          "typeString": "type(struct TWAPOrder.Data storage pointer)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55603_storage_ptr_$",
                          "typeString": "type(struct TWAPOrder.Data storage pointer)"
                        }
                      ],
                      "expression": {
                        "id": 55488,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "1693:3:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 55489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1697:6:147",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "1693:10:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 55494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1693:41:147",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                      "typeString": "struct TWAPOrder.Data memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1664:70:147"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 55499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 55496,
                        "name": "twap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55487,
                        "src": "1857:4:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                          "typeString": "struct TWAPOrder.Data memory"
                        }
                      },
                      "id": 55497,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1862:2:147",
                      "memberName": "t0",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 55594,
                      "src": "1857:7:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 55498,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1868:1:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1857:12:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": " @dev If `twap.t0` is set to 0, then get the start time from the context.",
                  "id": 55514,
                  "nodeType": "IfStatement",
                  "src": "1853:95:147",
                  "trueBody": {
                    "id": 55513,
                    "nodeType": "Block",
                    "src": "1871:77:147",
                    "statements": [
                      {
                        "expression": {
                          "id": 55511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 55500,
                              "name": "twap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55487,
                              "src": "1885:4:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                                "typeString": "struct TWAPOrder.Data memory"
                              }
                            },
                            "id": 55502,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "1890:2:147",
                            "memberName": "t0",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55594,
                            "src": "1885:7:147",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 55507,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55468,
                                    "src": "1925:5:147",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 55508,
                                    "name": "ctx",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55472,
                                    "src": "1932:3:147",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "expression": {
                                    "id": 55505,
                                    "name": "composableCow",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55454,
                                    "src": "1903:13:147",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ComposableCoW_$54177",
                                      "typeString": "contract ComposableCoW"
                                    }
                                  },
                                  "id": 55506,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1917:7:147",
                                  "memberName": "cabinet",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 53587,
                                  "src": "1903:21:147",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$_t_bytes32_$returns$_t_bytes32_$",
                                    "typeString": "function (address,bytes32) view external returns (bytes32)"
                                  }
                                },
                                "id": 55509,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1903:33:147",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 55504,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1895:7:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 55503,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1895:7:147",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 55510,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1895:42:147",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1885:52:147",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 55512,
                        "nodeType": "ExpressionStatement",
                        "src": "1885:52:147"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 55520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55515,
                      "name": "order",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55481,
                      "src": "1958:5:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$17121_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 55518,
                          "name": "twap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55487,
                          "src": "1985:4:147",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                            "typeString": "struct TWAPOrder.Data memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Data_$55603_memory_ptr",
                            "typeString": "struct TWAPOrder.Data memory"
                          }
                        ],
                        "expression": {
                          "id": 55516,
                          "name": "TWAPOrder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55808,
                          "src": "1966:9:147",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55808_$",
                            "typeString": "type(library TWAPOrder)"
                          }
                        },
                        "id": 55517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1976:8:147",
                        "memberName": "orderFor",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 55807,
                        "src": "1966:18:147",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_Data_$55603_memory_ptr_$returns$_t_struct$_Data_$17121_memory_ptr_$",
                          "typeString": "function (struct TWAPOrder.Data memory) view returns (struct GPv2Order.Data memory)"
                        }
                      },
                      "id": 55519,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1966:24:147",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$17121_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "src": "1958:32:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$17121_memory_ptr",
                      "typeString": "struct GPv2Order.Data memory"
                    }
                  },
                  "id": 55521,
                  "nodeType": "ExpressionStatement",
                  "src": "1958:32:147"
                },
                {
                  "condition": {
                    "id": 55528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2077:35:147",
                    "subExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55526,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 55522,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "2079:5:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 55523,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2085:9:147",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "2079:15:147",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "expression": {
                              "id": 55524,
                              "name": "order",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55481,
                              "src": "2098:5:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$17121_memory_ptr",
                                "typeString": "struct GPv2Order.Data memory"
                              }
                            },
                            "id": 55525,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2104:7:147",
                            "memberName": "validTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17108,
                            "src": "2098:13:147",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "2079:32:147",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 55527,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "2078:34:147",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev Revert if the order is outside the TWAP bundle's span.",
                  "id": 55536,
                  "nodeType": "IfStatement",
                  "src": "2073:121:147",
                  "trueBody": {
                    "id": 55535,
                    "nodeType": "Block",
                    "src": "2114:80:147",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 55532,
                              "name": "NOT_WITHIN_SPAN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55448,
                              "src": "2167:15:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 55529,
                              "name": "IConditionalOrder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 54437,
                              "src": "2135:17:147",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IConditionalOrder_$54437_$",
                                "typeString": "type(contract IConditionalOrder)"
                              }
                            },
                            "id": 55531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2153:13:147",
                            "memberName": "OrderNotValid",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 54407,
                            "src": "2135:31:147",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 55533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2135:48:147",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55534,
                        "nodeType": "RevertStatement",
                        "src": "2128:55:147"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              53476
            ],
            "documentation": {
              "id": 55466,
              "nodeType": "StructuredDocumentation",
              "src": "943:120:147",
              "text": " @inheritdoc IConditionalOrderGenerator\n @dev `owner`, `sender` and `offchainInput` is not used."
            },
            "functionSelector": "b8296fc4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTradeableOrder",
            "nameLocation": "1077:17:147",
            "overrides": {
              "id": 55478,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1212:8:147"
            },
            "parameters": {
              "id": 55477,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55468,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1103:5:147",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1095:13:147",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1095:7:147",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55470,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1110:7:147",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55469,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1110:7:147",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55472,
                  "mutability": "mutable",
                  "name": "ctx",
                  "nameLocation": "1127:3:147",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1119:11:147",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 55471,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1119:7:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55474,
                  "mutability": "mutable",
                  "name": "staticInput",
                  "nameLocation": "1147:11:147",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1132:26:147",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55473,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:5:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55476,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1160:14:147",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55475,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1160:5:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1094:81:147"
            },
            "returnParameters": {
              "id": 55482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55481,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "1260:5:147",
                  "nodeType": "VariableDeclaration",
                  "scope": 55538,
                  "src": "1238:27:147",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$17121_memory_ptr",
                    "typeString": "struct GPv2Order.Data"
                  },
                  "typeName": {
                    "id": 55480,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55479,
                      "name": "GPv2Order.Data",
                      "nameLocations": [
                        "1238:9:147",
                        "1248:4:147"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 17121,
                      "src": "1238:14:147"
                    },
                    "referencedDeclaration": 17121,
                    "src": "1238:14:147",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$17121_storage_ptr",
                      "typeString": "struct GPv2Order.Data"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1237:29:147"
            },
            "scope": 55539,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 55450,
              "name": "BaseConditionalOrder",
              "nameLocations": [
                "770:20:147"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 53501,
              "src": "770:20:147"
            },
            "id": 55451,
            "nodeType": "InheritanceSpecifier",
            "src": "770:20:147"
          }
        ],
        "canonicalName": "TWAP",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 55449,
          "nodeType": "StructuredDocumentation",
          "src": "332:420:147",
          "text": " @title TWAP Conditional Order\n @author mfw78 <mfw78@rndlabs.xyz>\n @notice TWAP conditional orders allow for splitting an order into a series of orders that are\n executed at a fixed interval. This is useful for ensuring that a trade is executed at a\n specific price, even if the price of the token changes during the trade.\n @dev Designed to be used with the CoW Protocol Conditional Order Framework."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          55539,
          53501,
          54468,
          52197,
          54437
        ],
        "name": "TWAP",
        "nameLocation": "762:4:147",
        "scope": 55540,
        "usedErrors": [
          54407
        ]
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 147
}