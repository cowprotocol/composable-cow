{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ComposableCoW",
          "name": "_composableCow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "OrderNotValid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollNever",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryAtBlock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryAtEpoch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PollTryNextBlock",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IConditionalOrder",
              "name": "handler",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IConditionalOrder.ConditionalOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ConditionalOrderCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "composableCow",
      "outputs": [
        {
          "internalType": "contract ComposableCoW",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getTradeableOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "validateData",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "staticInput",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "offchainInput",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "kind",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "partiallyFillable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "sellTokenBalance",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "buyTokenBalance",
              "type": "bytes32"
            }
          ],
          "internalType": "struct GPv2Order.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a060405234801561001057600080fd5b5060405161159738038061159783398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516115066100916000396000818160ae01526103c401526115066000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806393504c521161005057806393504c52146100a9578063a6ffa36c146100f5578063b8296fc41461010857600080fd5b806301ffc9a71461006c57806314a2a78414610094575b600080fd5b61007f61007a366004610d78565b610128565b60405190151581526020015b60405180910390f35b6100a76100a2366004610e3c565b6101c1565b005b6100d07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100a7610103366004610f83565b6102de565b61011b610116366004611052565b6102fd565b60405161008b91906110f1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc40000000000000000000000000000000000000000000000000000000014806101bb57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101d28b8b89898989896102fd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b905260228101919091526042902090915089146102d157604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60405180910390fd5b5050505050505050505050565b6102fa818060200190518101906102f59190611261565b610580565b50565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290529061036a868601876112fd565b90508060a00151600003610435576040517f1c7662c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018990527f00000000000000000000000000000000000000000000000000000000000000001690631c7662c890604401602060405180830381865afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190611399565b60a08201525b61043e8161099e565b91508160a0015163ffffffff164211156105745760008160e001518260a001514261046991906113e1565b6104739190611423565b61047e90600161145e565b90508160c0015181036104f057604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517f981b64cd0000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60e08201516104ff9082611471565b8260a0015161050e919061145e565b604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517f7e3346370000000000000000000000000000000000000000000000000000000081526102c8929190600401611488565b50979650505050505050565b806020015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff160361062057604080518082018252600a81527f73616d6520746f6b656e00000000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b805173ffffffffffffffffffffffffffffffffffffffff161580159061065f5750602081015173ffffffffffffffffffffffffffffffffffffffff1615155b6106c857604080518082018252600d81527f696e76616c696420746f6b656e00000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b600081606001511161073957604080518082018252601881527f696e76616c696420706172742073656c6c20616d6f756e740000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008160800151116107aa57604080518082018252601681527f696e76616c6964206d696e2070617274206c696d697400000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60a081015163ffffffff1161081e57604080518082018252601281527f696e76616c69642073746172742074696d650000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60018160c0015111801561083a575060c081015163ffffffff10155b6108a357604080518082018252601181527f696e76616c6964206e756d207061727473000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008160e001511180156108bf57506301e133808160e0015111155b61092857604080518082018252601181527f696e76616c6964206672657175656e6379000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b8060e0015181610100015111156102fa57604080518082018252600c81527f696e76616c6964207370616e0000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152610a0882610580565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff1681526020018360600151815260200183608001518152602001610aad610aa88560a001518660c001518760e00151886101000151610b4a565b610cde565b63ffffffff1681526020018361012001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc98152509050919050565b6000600184118015610b60575063ffffffff8411155b610b6c57610b6c6114a1565b600083118015610b8057506301e133808311155b610b8c57610b8c6114a1565b82821115610b9c57610b9c6114a1565b42851115610c0a57604080518082018252601181527f6265666f72652074776170207374617274000000000000000000000000000000602082015290517f7e3346370000000000000000000000000000000000000000000000000000000081526102c8918791600401611488565b82840285014210610c7a57604080518082018252601181527f616674657220747761702066696e697368000000000000000000000000000000602082015290517f981b64cd0000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008386420381610c8d57610c8d6113f4565b04905082600003610cab576001848260010102870103915050610cd6565b8302850182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190505b949350505050565b600063ffffffff821115610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016102c8565b5090565b600060208284031215610d8a57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610dba57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102fa57600080fd5b8035610dee81610dc1565b919050565b60008083601f840112610e0557600080fd5b50813567ffffffffffffffff811115610e1d57600080fd5b602083019150836020828501011115610e3557600080fd5b9250929050565b6000806000806000806000806000806102608b8d031215610e5c57600080fd5b610e668b35610dc1565b8a35995060208b0135610e7881610dc1565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610eaa57600080fd5b610eb68e838f01610df3565b909750955060c08d0135915080821115610ecf57600080fd5b50610edc8d828e01610df3565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215610f1557600080fd5b60e08b0190509295989b9194979a5092959850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610f7d57610f7d610f2a565b60405290565b600060208284031215610f9557600080fd5b813567ffffffffffffffff80821115610fad57600080fd5b818401915084601f830112610fc157600080fd5b813581811115610fd357610fd3610f2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561101957611019610f2a565b8160405282815287602084870101111561103257600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060a0888a03121561106d57600080fd5b873561107881610dc1565b9650602088013561108881610dc1565b955060408801359450606088013567ffffffffffffffff808211156110ac57600080fd5b6110b88b838c01610df3565b909650945060808a01359150808211156110d157600080fd5b506110de8a828b01610df3565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff16815261018081016020830151611137602084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015161115f604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a083015161118b60a084018263ffffffff169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516111c08285018215159052565b5050610140838101519083015261016092830151929091019190915290565b6000815180845260005b81811015611205576020818501810151868301820152016111e9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610dba60208301846111df565b8051610dee81610dc1565b6000610140828403121561127457600080fd5b61127c610f59565b61128583611256565b815261129360208401611256565b60208201526112a460408401611256565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b6000610140828403121561131057600080fd5b611318610f59565b61132183610de3565b815261132f60208401610de3565b602082015261134060408401610de3565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b6000602082840312156113ab57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156101bb576101bb6113b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611459577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808201808211156101bb576101bb6113b2565b80820281158282048414176101bb576101bb6113b2565b828152604060208201526000610cd660408301846111df565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122083a2524be4e019bcb1dcbb9078ab7cf4dc1a9445dce27ae6673fdd67a1ce7e8b64736f6c63430008130033",
    "sourceMap": "753:2449:149:-:0;;;848:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;900:30:149;;;753:2449;;14:313:170;107:6;160:2;148:9;139:7;135:23;131:32;128:52;;;176:1;173;166:12;128:52;202:16;;-1:-1:-1;;;;;247:31:170;;237:42;;227:70;;293:1;290;283:12;227:70;316:5;14:313;-1:-1:-1;;;14:313:170:o;:::-;753:2449:149;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806393504c521161005057806393504c52146100a9578063a6ffa36c146100f5578063b8296fc41461010857600080fd5b806301ffc9a71461006c57806314a2a78414610094575b600080fd5b61007f61007a366004610d78565b610128565b60405190151581526020015b60405180910390f35b6100a76100a2366004610e3c565b6101c1565b005b6100d07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100a7610103366004610f83565b6102de565b61011b610116366004611052565b6102fd565b60405161008b91906110f1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb8296fc40000000000000000000000000000000000000000000000000000000014806101bb57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b60006101d28b8b89898989896102fd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281018b905260228101919091526042902090915089146102d157604080518082018252600c81527f696e76616c696420686173680000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60405180910390fd5b5050505050505050505050565b6102fa818060200190518101906102f59190611261565b610580565b50565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290529061036a868601876112fd565b90508060a00151600003610435576040517f1c7662c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018990527f00000000000000000000000000000000000000000000000000000000000000001690631c7662c890604401602060405180830381865afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190611399565b60a08201525b61043e8161099e565b91508160a0015163ffffffff164211156105745760008160e001518260a001514261046991906113e1565b6104739190611423565b61047e90600161145e565b90508160c0015181036104f057604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517f981b64cd0000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60e08201516104ff9082611471565b8260a0015161050e919061145e565b604080518082018252600f81527f6e6f742077697468696e207370616e0000000000000000000000000000000000602082015290517f7e3346370000000000000000000000000000000000000000000000000000000081526102c8929190600401611488565b50979650505050505050565b806020015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff160361062057604080518082018252600a81527f73616d6520746f6b656e00000000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b805173ffffffffffffffffffffffffffffffffffffffff161580159061065f5750602081015173ffffffffffffffffffffffffffffffffffffffff1615155b6106c857604080518082018252600d81527f696e76616c696420746f6b656e00000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b600081606001511161073957604080518082018252601881527f696e76616c696420706172742073656c6c20616d6f756e740000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008160800151116107aa57604080518082018252601681527f696e76616c6964206d696e2070617274206c696d697400000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60a081015163ffffffff1161081e57604080518082018252601281527f696e76616c69642073746172742074696d650000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60018160c0015111801561083a575060c081015163ffffffff10155b6108a357604080518082018252601181527f696e76616c6964206e756d207061727473000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008160e001511180156108bf57506301e133808160e0015111155b61092857604080518082018252601181527f696e76616c6964206672657175656e6379000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b8060e0015181610100015111156102fa57604080518082018252600c81527f696e76616c6964207370616e0000000000000000000000000000000000000000602082015290517fc8fc27250000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152610a0882610580565b604051806101800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff1681526020018360600151815260200183608001518152602001610aad610aa88560a001518660c001518760e00151886101000151610b4a565b610cde565b63ffffffff1681526020018361012001518152602001600081526020017ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677581526020016000151581526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981526020017f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc98152509050919050565b6000600184118015610b60575063ffffffff8411155b610b6c57610b6c6114a1565b600083118015610b8057506301e133808311155b610b8c57610b8c6114a1565b82821115610b9c57610b9c6114a1565b42851115610c0a57604080518082018252601181527f6265666f72652074776170207374617274000000000000000000000000000000602082015290517f7e3346370000000000000000000000000000000000000000000000000000000081526102c8918791600401611488565b82840285014210610c7a57604080518082018252601181527f616674657220747761702066696e697368000000000000000000000000000000602082015290517f981b64cd0000000000000000000000000000000000000000000000000000000081526102c89190600401611243565b60008386420381610c8d57610c8d6113f4565b04905082600003610cab576001848260010102870103915050610cd6565b8302850182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190505b949350505050565b600063ffffffff821115610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016102c8565b5090565b600060208284031215610d8a57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610dba57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146102fa57600080fd5b8035610dee81610dc1565b919050565b60008083601f840112610e0557600080fd5b50813567ffffffffffffffff811115610e1d57600080fd5b602083019150836020828501011115610e3557600080fd5b9250929050565b6000806000806000806000806000806102608b8d031215610e5c57600080fd5b610e668b35610dc1565b8a35995060208b0135610e7881610dc1565b985060408b0135975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610eaa57600080fd5b610eb68e838f01610df3565b909750955060c08d0135915080821115610ecf57600080fd5b50610edc8d828e01610df3565b9094509250506101808b8d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215610f1557600080fd5b60e08b0190509295989b9194979a5092959850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610f7d57610f7d610f2a565b60405290565b600060208284031215610f9557600080fd5b813567ffffffffffffffff80821115610fad57600080fd5b818401915084601f830112610fc157600080fd5b813581811115610fd357610fd3610f2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561101957611019610f2a565b8160405282815287602084870101111561103257600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600080600060a0888a03121561106d57600080fd5b873561107881610dc1565b9650602088013561108881610dc1565b955060408801359450606088013567ffffffffffffffff808211156110ac57600080fd5b6110b88b838c01610df3565b909650945060808a01359150808211156110d157600080fd5b506110de8a828b01610df3565b989b979a50959850939692959293505050565b815173ffffffffffffffffffffffffffffffffffffffff16815261018081016020830151611137602084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015161115f604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015160608301526080830151608083015260a083015161118b60a084018263ffffffff169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516111c08285018215159052565b5050610140838101519083015261016092830151929091019190915290565b6000815180845260005b81811015611205576020818501810151868301820152016111e9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610dba60208301846111df565b8051610dee81610dc1565b6000610140828403121561127457600080fd5b61127c610f59565b61128583611256565b815261129360208401611256565b60208201526112a460408401611256565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b6000610140828403121561131057600080fd5b611318610f59565b61132183610de3565b815261132f60208401610de3565b602082015261134060408401610de3565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b6000602082840312156113ab57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156101bb576101bb6113b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611459577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808201808211156101bb576101bb6113b2565b80820281158282048414176101bb576101bb6113b2565b828152604060208201526000610cd660408301846111df565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122083a2524be4e019bcb1dcbb9078ab7cf4dc1a9445dce27ae6673fdd67a1ce7e8b64736f6c63430008130033",
    "sourceMap": "753:2449:149:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1944:220:135;;;;;;:::i;:::-;;:::i;:::-;;;612:14:170;;605:22;587:41;;575:2;560:18;1944:220:135;;;;;;;;867:634;;;;;;:::i;:::-;;:::i;:::-;;797:44:149;;;;;;;;3041:42:170;3029:55;;;3011:74;;2999:2;2984:18;797:44:149;2842:249:170;3065:135:149;;;;;;:::i;:::-;;:::i;1068:1938::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1944:220:135:-;2031:4;2054:59;;;2069:44;2054:59;;:103;;-1:-1:-1;2117:40:135;;;2132:25;2117:40;2054:103;2047:110;1944:220;-1:-1:-1;;1944:220:135:o;867:634::-;1153:36;1192:65;1210:5;1217:6;1225:3;1230:11;;1243:13;;1192:17;:65::i;:::-;5434:14:55;;;5473:16;;5520:9;5502:28;;5578:3;5557:25;;5595:23;;6176:4;6170:11;6220:10;6194:37;;6274:1;6251:25;;6244:50;;;6337:2;6314:26;;6307:46;;;;6410:2;6381:32;;1153:104:135;;-1:-1:-1;1359:5:135;:56;1353:142;;1471:12;;;;;;;;;;;;;;;;1439:45;;;;;;;1471:12;1439:45;;;:::i;:::-;;;;;;;;1353:142;1143:358;867:634;;;;;;;;;;:::o;3065:135:149:-;3139:54;3169:4;3158:34;;;;;;;;;;;;:::i;:::-;3139:18;:54::i;:::-;3065:135;:::o;1068:1938::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1693:41:149;;;;;;:::i;:::-;1664:70;;1857:4;:7;;;1868:1;1857:12;1853:95;;1903:33;;;;;:21;9917:55:170;;;1903:33:149;;;9899:74:170;9989:18;;;9982:34;;;1903:13:149;:21;;;;9872:18:170;;1903:33:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1885:7;;;:52;1853:95;1966:24;1985:4;1966:18;:24::i;:::-;1958:32;;2313:5;:13;;;2294:32;;:15;:32;;2288:712;;2402:19;2455:4;:6;;;2444:4;:7;;;2426:15;:25;;;;:::i;:::-;2425:36;;;;:::i;:::-;2424:42;;2465:1;2424:42;:::i;:::-;2402:64;;2500:4;:6;;;2485:11;:21;2481:509;;2698:15;;;;;;;;;;;;;;;;2670:44;;;;;;;2698:15;2670:44;;;:::i;2481:509::-;2950:6;;;;2936:20;;:11;:20;:::i;:::-;2925:4;:7;;;:32;;;;:::i;:::-;2959:15;;;;;;;;;;;;;;;;2892:83;;;;;;;;2959:15;2892:83;;;:::i;2288:712::-;1271:1735;1068:1938;;;;;;;;;:::o;1666:963:150:-;1750:4;:13;;;1732:31;;:4;:14;;;:31;;;1726:98;;1805:18;;;;;;;;;;;;;;;;1773:51;;;;;;;1805:18;1773:51;;;:::i;1726:98::-;1848:14;;1840:37;;;;;;:77;;-1:-1:-1;1889:13:150;;;;1881:36;;;;1840:77;1834:164;;1973:13;;;;;;;;;;;;;;;;1941:46;;;;;;;1973:13;1941:46;;;:::i;1834:164::-;2035:1;2013:4;:19;;;:23;2007:96;;2078:24;;;;;;;;;;;;;;;;2046:57;;;;;;;2078:24;2046:57;;;:::i;2007:96::-;2139:1;2119:4;:17;;;:21;2113:92;;2182:22;;;;;;;;;;;;;;;;2150:55;;;;;;;2182:22;2150:55;;;:::i;2113:92::-;2221:7;;;;2231:16;-1:-1:-1;2215:93:150;;2289:18;;;;;;;;;;;;;;;;2257:51;;;;;;;2289:18;2257:51;;;:::i;2215:93::-;2333:1;2324:4;:6;;;:10;:40;;;;-1:-1:-1;2338:6:150;;;;2348:16;-1:-1:-1;2338:26:150;2324:40;2318:106;;2406:17;;;;;;;;;;;;;;;;2374:50;;;;;;;2406:17;2374:50;;;:::i;2318:106::-;2449:1;2440:4;:6;;;:10;:32;;;;;2464:8;2454:4;:6;;;:18;;2440:32;2434:98;;2514:17;;;;;;;;;;;;;;;;2482:50;;;;;;;2514:17;2482:50;;;:::i;2434:98::-;2561:4;:6;;;2548:4;:9;;;:19;;2542:80;;2609:12;;;;;;;;;;;;;;;;2577:45;;;;;;;2609:12;2577:45;;;:::i;2848:1141::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3008:14:150;3017:4;3008:8;:14::i;:::-;3406:576;;;;;;;;3446:4;:14;;;3406:576;;;;;;3484:4;:13;;;3406:576;;;;;;3521:4;:13;;;3406:576;;;;;;3560:4;:19;;;3406:576;;;;3604:4;:17;;;3406:576;;;;3644:80;:69;3678:4;:7;;;3687:4;:6;;;3695:4;:6;;;3703:4;:9;;;3644:33;:69::i;:::-;:78;:80::i;:::-;3406:576;;;;;;3747:4;:12;;;3406:576;;;;3784:1;3406:576;;;;3805:19;3406:576;;;;3857:5;3406:576;;;;;;3894:23;3406:576;;;;3948:23;3406:576;;;3398:584;;2848:1141;;;:::o;993:4724:151:-;1136:15;1471:1;1460:8;:12;:44;;;;-1:-1:-1;1488:16:151;1476:28;;;1460:44;1453:52;;;;:::i;:::-;1534:1;1522:9;:13;:38;;;;;1552:8;1539:9;:21;;1522:38;1515:46;;;;:::i;:::-;1586:9;1578:4;:17;;1571:25;;;;:::i;:::-;1734:15;1721:9;:28;;1715:106;;1803:17;;;;;;;;;;;;;;;;1759:62;;;;;;;1792:9;;1759:62;;;:::i;1715:106::-;2493:9;2482:8;:20;2469:9;:34;2451:15;:52;2445:147;;2559:17;;;;;;;;;;;;;;;;2531:46;;;;;;;2559:17;2531:46;;;:::i;2445:147::-;3034:12;3081:9;3068;3050:15;:27;3049:41;;;;;:::i;:::-;;3034:56;;3188:4;3196:1;3188:9;3184:1246;;4414:1;4401:9;4389:4;4396:1;4389:8;4388:22;4375:9;:36;:40;4368:47;;;;;3184:1246;5459:16;;5446:30;;:37;;:41;;;-1:-1:-1;993:4724:151;;;;;;;:::o;15264:187:92:-;15320:6;15355:16;15346:25;;;15338:76;;;;;;;11996:2:170;15338:76:92;;;11978:21:170;12035:2;12015:18;;;12008:30;12074:34;12054:18;;;12047:62;12145:8;12125:18;;;12118:36;12171:19;;15338:76:92;11794:402:170;15338:76:92;-1:-1:-1;15438:5:92;15264:187::o;14:332:170:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:170:o;639:154::-;725:42;718:5;714:54;707:5;704:65;694:93;;783:1;780;773:12;798:134;866:20;;895:31;866:20;895:31;:::i;:::-;798:134;;;:::o;937:347::-;988:8;998:6;1052:3;1045:4;1037:6;1033:17;1029:27;1019:55;;1070:1;1067;1060:12;1019:55;-1:-1:-1;1093:20:170;;1136:18;1125:30;;1122:50;;;1168:1;1165;1158:12;1122:50;1205:4;1197:6;1193:17;1181:29;;1257:3;1250:4;1241:6;1233;1229:19;1225:30;1222:39;1219:59;;;1274:1;1271;1264:12;1219:59;937:347;;;;;:::o;1289:1401::-;1458:6;1466;1474;1482;1490;1498;1506;1514;1522;1530;1583:3;1571:9;1562:7;1558:23;1554:33;1551:53;;;1600:1;1597;1590:12;1551:53;1613:49;1651:9;1638:23;1613:49;:::i;:::-;1694:9;1681:23;1671:33;;1754:2;1743:9;1739:18;1726:32;1767:31;1792:5;1767:31;:::i;:::-;1817:5;-1:-1:-1;1869:2:170;1854:18;;1841:32;;-1:-1:-1;1920:2:170;1905:18;;1892:32;;-1:-1:-1;1971:3:170;1956:19;;1943:33;;-1:-1:-1;2027:3:170;2012:19;;1999:33;2051:18;2081:14;;;2078:34;;;2108:1;2105;2098:12;2078:34;2147:58;2197:7;2188:6;2177:9;2173:22;2147:58;:::i;:::-;2224:8;;-1:-1:-1;2121:84:170;-1:-1:-1;2312:3:170;2297:19;;2284:33;;-1:-1:-1;2329:16:170;;;2326:36;;;2358:1;2355;2348:12;2326:36;;2397:60;2449:7;2438:8;2427:9;2423:24;2397:60;:::i;:::-;2476:8;;-1:-1:-1;2371:86:170;-1:-1:-1;;2625:3:170;2531:23;;;2556:66;2527:96;2523:106;2520:126;;;2642:1;2639;2632:12;2520:126;2680:3;2669:9;2665:19;2655:29;;1289:1401;;;;;;;;;;;;;:::o;3096:184::-;3148:77;3145:1;3138:88;3245:4;3242:1;3235:15;3269:4;3266:1;3259:15;3285:247;3352:2;3346:9;3394:3;3382:16;;3428:18;3413:34;;3449:22;;;3410:62;3407:88;;;3475:18;;:::i;:::-;3511:2;3504:22;3285:247;:::o;3537:980::-;3605:6;3658:2;3646:9;3637:7;3633:23;3629:32;3626:52;;;3674:1;3671;3664:12;3626:52;3714:9;3701:23;3743:18;3784:2;3776:6;3773:14;3770:34;;;3800:1;3797;3790:12;3770:34;3838:6;3827:9;3823:22;3813:32;;3883:7;3876:4;3872:2;3868:13;3864:27;3854:55;;3905:1;3902;3895:12;3854:55;3941:2;3928:16;3963:2;3959;3956:10;3953:36;;;3969:18;;:::i;:::-;4103:2;4097:9;4165:4;4157:13;;4008:66;4153:22;;;4177:2;4149:31;4145:40;4133:53;;;4201:18;;;4221:22;;;4198:46;4195:72;;;4247:18;;:::i;:::-;4287:10;4283:2;4276:22;4322:2;4314:6;4307:18;4362:7;4357:2;4352;4348;4344:11;4340:20;4337:33;4334:53;;;4383:1;4380;4373:12;4334:53;4439:2;4434;4430;4426:11;4421:2;4413:6;4409:15;4396:46;4484:1;4462:15;;;4479:2;4458:24;4451:35;;;;-1:-1:-1;4466:6:170;3537:980;-1:-1:-1;;;;;3537:980:170:o;4522:1063::-;4639:6;4647;4655;4663;4671;4679;4687;4740:3;4728:9;4719:7;4715:23;4711:33;4708:53;;;4757:1;4754;4747:12;4708:53;4796:9;4783:23;4815:31;4840:5;4815:31;:::i;:::-;4865:5;-1:-1:-1;4922:2:170;4907:18;;4894:32;4935:33;4894:32;4935:33;:::i;:::-;4987:7;-1:-1:-1;5041:2:170;5026:18;;5013:32;;-1:-1:-1;5096:2:170;5081:18;;5068:32;5119:18;5149:14;;;5146:34;;;5176:1;5173;5166:12;5146:34;5215:58;5265:7;5256:6;5245:9;5241:22;5215:58;:::i;:::-;5292:8;;-1:-1:-1;5189:84:170;-1:-1:-1;5380:3:170;5365:19;;5352:33;;-1:-1:-1;5397:16:170;;;5394:36;;;5426:1;5423;5416:12;5394:36;;5465:60;5517:7;5506:8;5495:9;5491:24;5465:60;:::i;:::-;4522:1063;;;;-1:-1:-1;4522:1063:170;;-1:-1:-1;4522:1063:170;;;;5439:86;;-1:-1:-1;;;4522:1063:170:o;5689:1285::-;5916:13;;2787:42;2776:54;2764:67;;5869:3;5854:19;;5988:4;5980:6;5976:17;5970:24;6003:69;6066:4;6055:9;6051:20;6037:12;2787:42;2776:54;2764:67;;2695:142;6003:69;;6121:4;6113:6;6109:17;6103:24;6136:71;6201:4;6190:9;6186:20;6170:14;2787:42;2776:54;2764:67;;2695:142;6136:71;;6263:4;6255:6;6251:17;6245:24;6238:4;6227:9;6223:20;6216:54;6326:4;6318:6;6314:17;6308:24;6301:4;6290:9;6286:20;6279:54;6382:4;6374:6;6370:17;6364:24;6397:55;6446:4;6435:9;6431:20;6415:14;5666:10;5655:22;5643:35;;5590:94;6397:55;;6508:4;6500:6;6496:17;6490:24;6483:4;6472:9;6468:20;6461:54;6571:4;6563:6;6559:17;6553:24;6546:4;6535:9;6531:20;6524:54;6597:6;6657:2;6649:6;6645:15;6639:22;6634:2;6623:9;6619:18;6612:50;;6681:6;6736:2;6728:6;6724:15;6718:22;6749:51;6796:2;6785:9;6781:18;6765:14;421:13;414:21;402:34;;351:91;6749:51;-1:-1:-1;;6819:6:170;6867:15;;;6861:22;6841:18;;;6834:50;6903:6;6951:15;;;6945:22;6925:18;;;;6918:50;;;;5689:1285;:::o;6979:482::-;7021:3;7059:5;7053:12;7086:6;7081:3;7074:19;7111:1;7121:162;7135:6;7132:1;7129:13;7121:162;;;7197:4;7253:13;;;7249:22;;7243:29;7225:11;;;7221:20;;7214:59;7150:12;7121:162;;;7125:3;7328:1;7321:4;7312:6;7307:3;7303:16;7299:27;7292:38;7450:4;7380:66;7375:2;7367:6;7363:15;7359:88;7354:3;7350:98;7346:109;7339:116;;;6979:482;;;;:::o;7466:220::-;7615:2;7604:9;7597:21;7578:4;7635:45;7676:2;7665:9;7661:18;7653:6;7635:45;:::i;7691:146::-;7778:13;;7800:31;7778:13;7800:31;:::i;7842:946::-;7935:6;7988:3;7976:9;7967:7;7963:23;7959:33;7956:53;;;8005:1;8002;7995:12;7956:53;8031:17;;:::i;:::-;8071:48;8109:9;8071:48;:::i;:::-;8064:5;8057:63;8152:57;8205:2;8194:9;8190:18;8152:57;:::i;:::-;8147:2;8140:5;8136:14;8129:81;8242:57;8295:2;8284:9;8280:18;8242:57;:::i;:::-;8237:2;8230:5;8226:14;8219:81;8353:2;8342:9;8338:18;8332:25;8327:2;8320:5;8316:14;8309:49;8412:3;8401:9;8397:19;8391:26;8385:3;8378:5;8374:15;8367:51;8472:3;8461:9;8457:19;8451:26;8445:3;8438:5;8434:15;8427:51;8532:3;8521:9;8517:19;8511:26;8505:3;8498:5;8494:15;8487:51;8592:3;8581:9;8577:19;8571:26;8565:3;8558:5;8554:15;8547:51;8617:3;8673:2;8662:9;8658:18;8652:25;8647:2;8640:5;8636:14;8629:49;;8697:3;8753:2;8742:9;8738:18;8732:25;8727:2;8720:5;8716:14;8709:49;;8777:5;8767:15;;;7842:946;;;;:::o;8793:927::-;8875:6;8928:3;8916:9;8907:7;8903:23;8899:33;8896:53;;;8945:1;8942;8935:12;8896:53;8971:17;;:::i;:::-;9011:29;9030:9;9011:29;:::i;:::-;9004:5;8997:44;9073:38;9107:2;9096:9;9092:18;9073:38;:::i;:::-;9068:2;9061:5;9057:14;9050:62;9144:38;9178:2;9167:9;9163:18;9144:38;:::i;:::-;9139:2;9132:5;9128:14;9121:62;9243:2;9232:9;9228:18;9215:32;9210:2;9203:5;9199:14;9192:56;9309:3;9298:9;9294:19;9281:33;9275:3;9268:5;9264:15;9257:58;9376:3;9365:9;9361:19;9348:33;9342:3;9335:5;9331:15;9324:58;9443:3;9432:9;9428:19;9415:33;9409:3;9402:5;9398:15;9391:58;9510:3;9499:9;9495:19;9482:33;9476:3;9469:5;9465:15;9458:58;9535:3;9598:2;9587:9;9583:18;9570:32;9565:2;9558:5;9554:14;9547:56;;9622:3;9685:2;9674:9;9670:18;9657:32;9652:2;9645:5;9641:14;9634:56;;9709:5;9699:15;;;8793:927;;;;:::o;10027:184::-;10097:6;10150:2;10138:9;10129:7;10125:23;10121:32;10118:52;;;10166:1;10163;10156:12;10118:52;-1:-1:-1;10189:16:170;;10027:184;-1:-1:-1;10027:184:170:o;10216:::-;10268:77;10265:1;10258:88;10365:4;10362:1;10355:15;10389:4;10386:1;10379:15;10405:128;10472:9;;;10493:11;;;10490:37;;;10507:18;;:::i;10538:184::-;10590:77;10587:1;10580:88;10687:4;10684:1;10677:15;10711:4;10708:1;10701:15;10727:274;10767:1;10793;10783:189;;10828:77;10825:1;10818:88;10929:4;10926:1;10919:15;10957:4;10954:1;10947:15;10783:189;-1:-1:-1;10986:9:170;;10727:274::o;11006:125::-;11071:9;;;11092:10;;;11089:36;;;11105:18;;:::i;11136:168::-;11209:9;;;11240;;11257:15;;;11251:22;;11237:37;11227:71;;11278:18;;:::i;11309:291::-;11486:6;11475:9;11468:25;11529:2;11524;11513:9;11509:18;11502:30;11449:4;11549:45;11590:2;11579:9;11575:18;11567:6;11549:45;:::i;11605:184::-;11657:77;11654:1;11647:88;11754:4;11751:1;11744:15;11778:4;11775:1;11768:15",
    "linkReferences": {},
    "immutableReferences": {
      "55557": [
        {
          "start": 174,
          "length": 32
        },
        {
          "start": 964,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "composableCow()": "93504c52",
    "getTradeableOrder(address,address,bytes32,bytes,bytes)": "b8296fc4",
    "supportsInterface(bytes4)": "01ffc9a7",
    "validateData(bytes)": "a6ffa36c",
    "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": "14a2a784"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ComposableCoW\",\"name\":\"_composableCow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"OrderNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollNever\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryAtBlock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryAtEpoch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PollTryNextBlock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IConditionalOrder\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IConditionalOrder.ConditionalOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ConditionalOrderCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"composableCow\",\"outputs\":[{\"internalType\":\"contract ComposableCoW\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getTradeableOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validateData\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"staticInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainInput\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kind\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"partiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sellTokenBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"buyTokenBalance\",\"type\":\"bytes32\"}],\"internalType\":\"struct GPv2Order.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"mfw78 <mfw78@rndlabs.xyz>\",\"details\":\"Designed to be used with the CoW Protocol Conditional Order Framework.\",\"errors\":{\"OrderNotValid(string)\":[{\"details\":\"This error is returned by the `getTradeableOrder` function if the order condition is not met.      A parameter of `string` type is included to allow the caller to specify the reason for the failure.\"}]},\"events\":{\"ConditionalOrderCreated(address,(address,bytes32,bytes))\":{\"details\":\"This event is emitted when a new conditional order is created.\",\"params\":{\"owner\":\"the address that has created the conditional order\",\"params\":\"the address / salt / data of the conditional order\"}}},\"kind\":\"dev\",\"methods\":{\"getTradeableOrder(address,address,bytes32,bytes,bytes)\":{\"details\":\"`owner`, `sender` and `offchainInput` is not used.\",\"params\":{\"ctx\":\"the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the parent `isValidSignature` call\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"},\"returns\":{\"order\":\"the tradeable order for submission to the CoW Protocol API\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"validateData(bytes)\":{\"details\":\"Throws if the data is invalid.\",\"params\":{\"data\":\"The ABI-encoded concrete order type's `Data` struct to be validated.\"}},\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"details\":\"As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.\",\"params\":{\"_hash\":\"the hash of the order\",\"ctx\":\"the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet\",\"domainSeparator\":\"the domain separator used to sign the order\",\"offchainInput\":\"dynamic off-chain input for a discrete order cut from this conditional order\",\"order\":\"`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).\",\"owner\":\"the contract who is the owner of the order\",\"sender\":\"the `msg.sender` of the transaction\",\"staticInput\":\"the static input for all discrete orders cut from this conditional order\"}}},\"title\":\"TWAP Conditional Order\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateData(bytes)\":{\"notice\":\"A helper function for SDK users to verify if a given conditional order's data is valid.\"},\"verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))\":{\"notice\":\"Verify if a given discrete order is valid.\"}},\"notice\":\"TWAP conditional orders allow for splitting an order into a series of orders that are executed at a fixed interval. This is useful for ensuring that a trade is executed at a specific price, even if the price of the token changes during the trade.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/types/twap/TWAP.sol\":\"TWAP\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":balancer/=lib/balancer/src/\",\":canonical-weth/=lib/canonical-weth/src/\",\":cowprotocol/=lib/cowprotocol/src/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":helpers/=lib/balancer/src/lib/helpers/\",\":math/=lib/balancer/src/lib/math/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":safe/=lib/safe/contracts/\"]},\"sources\":{\"lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol\":{\"keccak256\":\"0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f\",\"dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF\"]},\"lib/cowprotocol/src/contracts/libraries/GPv2Order.sol\":{\"keccak256\":\"0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d\",\"dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45\",\"dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0\",\"dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04\",\"dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]},\"lib/safe/contracts/Safe.sol\":{\"keccak256\":\"0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://f95884e85691d49ba3efb9b2a160466fed17377bfa92fc8bf5923f3c61e99119\",\"dweb:/ipfs/QmQjhP9RnB3Cj3DNpWLzWqqvRdKBya6Efx6xzmRrwLqjm9\"]},\"lib/safe/contracts/base/Executor.sol\":{\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://710022b40c9f78a5b55b97f6ce600e4834df2ddd36bf714974d953883c82d58c\",\"dweb:/ipfs/QmbdJNKH5opevm7HxQKQAe6W7dQTgSHKa4nKvbUNGRcQQp\"]},\"lib/safe/contracts/base/FallbackManager.sol\":{\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://7975be46d228510c70659b18076aecb3b0e7331b4d3a162444304145143bdc6e\",\"dweb:/ipfs/QmRRbZrWUnoky6pVo8zMUzCTsshR4sZ2FjR13s8vyAb8dV\"]},\"lib/safe/contracts/base/GuardManager.sol\":{\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3ff8a4194d1160d2e23142937bc9d7eac7b6b553b1ee226390a0df07ebac1b64\",\"dweb:/ipfs/QmSw8Y7z4TQrUTEosdWqcug7TUv9Tg1kxqMKHd7RuTnyzx\"]},\"lib/safe/contracts/base/ModuleManager.sol\":{\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://30812896d9f57cae84a432c67fbb3007d566071ec203b2992f1c0f762722df0d\",\"dweb:/ipfs/QmRyJ3JbsUwDQxQDTrqDDX4qNtVu7XiW8cD8WP5kgNJGGz\"]},\"lib/safe/contracts/base/OwnerManager.sol\":{\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://5729c58b14e7b656c71dd3377e9519c0d34ef8c04851a9a21c3d62393e4fae7a\",\"dweb:/ipfs/QmRRtfFpNqvdANny9TYBr8rA3HbT1egUCpb2uXALMHkVxK\"]},\"lib/safe/contracts/common/Enum.sol\":{\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://385929800d1c0f92eb165fcf37a9e28b395b17d8b74f74755654d3a096a0fc34\",\"dweb:/ipfs/QmagieLuN2jrp2oJHFyZuyz65Sh1CcupnXSEKypGFS5Gvo\"]},\"lib/safe/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9\",\"dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g\"]},\"lib/safe/contracts/common/SecuredTokenTransfer.sol\":{\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://c26495b1fe9229ea17f90b70f295030880d629b9ea3016ea20b634983865f7b3\",\"dweb:/ipfs/QmTc1UmKcynkKn8DeviLMuy6scxNvAVSdLoX4ndUtdEL9N\"]},\"lib/safe/contracts/common/SelfAuthorized.sol\":{\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8e9a317f0c3c02ab1d6c38039bff2b3e0c97f4dc9d229d3d9149c1af1c5023b3\",\"dweb:/ipfs/QmNcZjNChsuXF34T6f3Zu7i3tnqvKN4NyWBWZ4tXLH9kMu\"]},\"lib/safe/contracts/common/SignatureDecoder.sol\":{\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://00cdded3068b9051ee0a966f40926fbc57dbe7ef8bf4285db3740f9d50468c80\",\"dweb:/ipfs/QmcP5hKmaRqBe7TpgoXtncZqsNKKdCCKxZgXoxEL4Nj5F4\"]},\"lib/safe/contracts/common/Singleton.sol\":{\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde\",\"dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo\"]},\"lib/safe/contracts/common/StorageAccessible.sol\":{\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e\",\"dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ\"]},\"lib/safe/contracts/external/SafeMath.sol\":{\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c\",\"dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x\"]},\"lib/safe/contracts/handler/ExtensibleFallbackHandler.sol\":{\"keccak256\":\"0x7e511290dae21c9b1710c9250320d9b98ffd71c9501af354814485b58e1b64e9\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3e55ba23bde90d2cdd07baa7172ea41bdc1d638bc7b6eb5dce03189d86412515\",\"dweb:/ipfs/QmbxH73sqooeQL8ehsP2FDoXhLBoPs3wr3nod6ZgJwVcFV\"]},\"lib/safe/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x3e105ebac003af9c8d34e3eed517ff0355d5f487e17478c85df0f225b04846f5\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://657bec347d746453883c461a3d9a2275bf2b99625dcaef0960e1c0276c3d56c4\",\"dweb:/ipfs/QmUGj8Tzs1CsmUf63LbTMK81EEGtYYnWKLGdHHtoYCd9CF\"]},\"lib/safe/contracts/handler/extensible/Base.sol\":{\"keccak256\":\"0xe5b71121b0020728158ee60756982e74809f9d77cb294a6d65930bff09d84d15\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://fd7fd2702b31fc8569a9986a476dd9fe9aa76624d0da6d832547f624426925f9\",\"dweb:/ipfs/QmWjYGtW38Fnwvm8qFvoJYhz2nTuySGkHouwRF3eksd6Nh\"]},\"lib/safe/contracts/handler/extensible/ERC165Handler.sol\":{\"keccak256\":\"0x6e19ba1deb09a34cca28891bfefd853697b808dfb8a9cddd4051d3058d3eb718\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://0b1059e752bd142160a4fbe8ee08377a50902d31b8b909df002480d191af0cf4\",\"dweb:/ipfs/QmbuUmvgoodsZGgqR793duEWF5t7h6USAXfpr2N1VvBmeP\"]},\"lib/safe/contracts/handler/extensible/FallbackHandler.sol\":{\"keccak256\":\"0xbe7db6cbdb034c9aee1eae12200ab2e94fa4743ae08dbba2f1a001c4b62f3e0b\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://4fbba0ea04349873b38f7c7104d0a88ffd6e7ec399a3fdd0e1297ce12eebb19e\",\"dweb:/ipfs/QmYiDukcX2y7ratxsMX6hLMKzGQTD67CKLpuiSpgm1HGue\"]},\"lib/safe/contracts/handler/extensible/MarshalLib.sol\":{\"keccak256\":\"0x531476118b7948b06a0c7094badd6f1ae33ae2ddca815110030e87ee62c4a895\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://f21ad2619b5bcbc977c5943d2f668e8bfb9ef6968db1193415e046171a5a150a\",\"dweb:/ipfs/QmYZeu3vr6eRWjeYp8GvWSVRLm9baFbTyEGgAy2hMAqbLX\"]},\"lib/safe/contracts/handler/extensible/SignatureVerifierMuxer.sol\":{\"keccak256\":\"0xc60a1d55ff0cf532a44bd864683719e3d6e1fa6d20d4c77812e21c33afecf304\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://298c7efe668a4ca8d3b712770973931d604c84304aececd621f0350d7d293b68\",\"dweb:/ipfs/QmVcNdQ7ZsnmDgSX8TFRLHk4HZUXH86u2akAM5q3g1PFfZ\"]},\"lib/safe/contracts/handler/extensible/TokenCallbacks.sol\":{\"keccak256\":\"0xfb0f8f01a7191ab358f196a7e055441ede00f36805f12c579a742a5cd3c4f8d7\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://0d485ea9fc430a89953ffe2d2c7032b5a330f086bbb784e81eb6b00a692f6438\",\"dweb:/ipfs/QmNofKrkU9VTtGMN9Rc6js2jyUscSFxce8kjBz5rZL4RSJ\"]},\"lib/safe/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://59ca1157dcfe19c72b9d1244a6ae5ec70fee9793d4d8af523b70f22ae567d55c\",\"dweb:/ipfs/QmfE3kv73QuQWAWQND927LWVHVLCp19m1mLUvxVYJDEFZM\"]},\"lib/safe/contracts/interfaces/ERC721TokenReceiver.sol\":{\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://99a54737bc23722f79ec9cf9de63ba35b556a61df453eb332f3cac783503f26c\",\"dweb:/ipfs/QmbLW5C2RhoLbwDWEPtTKpyYE5apT9B3q4U11PZG3wSM1n\"]},\"lib/safe/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89\",\"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38\"]},\"lib/safe/contracts/interfaces/ISignatureValidator.sol\":{\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://3c4a1371948b11f78171bc4ae4fd169a1eec11e5c4b273eb2c54bc030a1aae25\",\"dweb:/ipfs/QmPuztatXZYVS65n8YbCyccJFZYPP6zQfBQ8tTY27pB978\"]},\"src/BaseConditionalOrder.sol\":{\"keccak256\":\"0x83d14b5411a5a1adc00da2d3e17703cd7be15de3f5637b2a3f77501df14c5e9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c007603000bb506c58265f61863bb90966a210429f2985a2632d4f00c7bbc1f\",\"dweb:/ipfs/QmUz7ikMYiS8MGNsMxvcHzpkX2yYiPidxvcfG97Vpqs73j\"]},\"src/ComposableCoW.sol\":{\"keccak256\":\"0x565c6fabc8a1e185acfb4539baeb7e3cabb004b54da2c777cbdbb3c98dbd6a52\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://2b876b6b4a69f69b7f9445e67a0e60dd7a65f028d54ba9c4c8c983a00ee23642\",\"dweb:/ipfs/Qmf95tsR515WFv2yBKp4NzhFc9xvfZRtS194Lq7SY2r7zC\"]},\"src/interfaces/IConditionalOrder.sol\":{\"keccak256\":\"0x9ce9ab9b32a1cea3dd9390407f9733458868f0c4e706acbf5373d2c083ec363e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e033e894f26b27544fc11d9cc1cd21351693defc8bd8716a47a74da57c634e28\",\"dweb:/ipfs/QmcC4PtfpCpf3srEqAuU3GNxz4qvgX8bU5B78hAQQjQhMW\"]},\"src/interfaces/ISwapGuard.sol\":{\"keccak256\":\"0x60abdef709d22cb95e4b1d4680cb70d5286cfb5aa71ec65868cc44164ef8790f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7593245e22ffc533a073891affdbb003fa56eaa5ef7f0202a673b52968ad7ed5\",\"dweb:/ipfs/QmRhAvNzbHp8qfrw7eHZP6EDWw42tXMXSV3KuyhyxFy3Nx\"]},\"src/interfaces/IValueFactory.sol\":{\"keccak256\":\"0x3304ef8a0a1727258ac8278bf5426daeac37ece4653eaaff87b15143814a8122\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9934d278069dd9474065777833a81e65af227b85d350b6c1f012b812101be9de\",\"dweb:/ipfs/QmcMBdvY7wLs92FCyutDGQGtHnYryjnaykREvDNBNM8Yih\"]},\"src/types/twap/TWAP.sol\":{\"keccak256\":\"0x7038b7e24f4633358e827eafa47dc9ebce9d5263a8aded1d03b0dd2c13aee90e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6f2c538ab1fefdced2579efa5e911929e9fdc3c0ffcfb3f9c76b3e7990dc4eda\",\"dweb:/ipfs/QmaLzibvYkfRu2RLEikhbhecbqsYuWgVxTyuYzWsuDsEDY\"]},\"src/types/twap/libraries/TWAPOrder.sol\":{\"keccak256\":\"0x917e44d1853c7dafcf8e42acc746ca3d387d7c002f213870df69562eb66a0272\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://26c1ba047f761e81cf8ffea282b1cb763fb5f70e9fc0b1264323030d0cac39c0\",\"dweb:/ipfs/QmQA2Y95jVktUkYf7nQC4ZeCNUbmPFAy5bcjKriBDnDyAa\"]},\"src/types/twap/libraries/TWAPOrderMathLib.sol\":{\"keccak256\":\"0x59c5e36543c2f5edd22f2fe94160903f72221b991c46d495b6f6e83394025ecc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://35fdcc6f376a4ae9663c9e346eb47bb474faeb8b2fff746bb73708365dec0a12\",\"dweb:/ipfs/QmQCppHz3x9vNLHy5rBpdbg3qY73KT9oSwSAru9g3iwxsY\"]},\"src/vendored/CoWSettlement.sol\":{\"keccak256\":\"0x4e4e317b24017cd87eb11d16368b8c06ec19306d31946c330a86f9f136df38d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34b9b2fc2c89e60497457cd812da9c53718c15ddfbf70f6e11832d22092c1840\",\"dweb:/ipfs/QmYFzaynWZfdpmFRf2dZrQ32Ep53AtQDd5fTE3a89xVkaR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ComposableCoW",
              "name": "_composableCow",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "OrderNotValid"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollNever"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryAtBlock"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryAtEpoch"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PollTryNextBlock"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct IConditionalOrder.ConditionalOrderParams",
              "name": "params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IConditionalOrder",
                  "name": "handler",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "staticInput",
                  "type": "bytes"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ConditionalOrderCreated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "composableCow",
          "outputs": [
            {
              "internalType": "contract ComposableCoW",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ctx",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTradeableOrder",
          "outputs": [
            {
              "internalType": "struct GPv2Order.Data",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validateData"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ctx",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "staticInput",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "offchainInput",
              "type": "bytes"
            },
            {
              "internalType": "struct GPv2Order.Data",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "sellToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "buyToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "validTo",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "appData",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "kind",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "partiallyFillable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellTokenBalance",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyTokenBalance",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verify"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getTradeableOrder(address,address,bytes32,bytes,bytes)": {
            "details": "`owner`, `sender` and `offchainInput` is not used.",
            "params": {
              "ctx": "the context of the order (bytes32(0) if merkle tree is used, otherwise the H(params))",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the parent `isValidSignature` call",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            },
            "returns": {
              "order": "the tradeable order for submission to the CoW Protocol API"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "validateData(bytes)": {
            "details": "Throws if the data is invalid.",
            "params": {
              "data": "The ABI-encoded concrete order type's `Data` struct to be validated."
            }
          },
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "details": "As an order generator, the `GPv2Order.Data` passed as a parameter is ignored / not validated.",
            "params": {
              "_hash": "the hash of the order",
              "ctx": "the context key of the order (bytes32(0) if a merkle tree is used, otherwise H(params)) with which to lookup the cabinet",
              "domainSeparator": "the domain separator used to sign the order",
              "offchainInput": "dynamic off-chain input for a discrete order cut from this conditional order",
              "order": "`GPv2Order.Data` of a discrete order to be verified (if *not* an `IConditionalOrderGenerator`).",
              "owner": "the contract who is the owner of the order",
              "sender": "the `msg.sender` of the transaction",
              "staticInput": "the static input for all discrete orders cut from this conditional order"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "validateData(bytes)": {
            "notice": "A helper function for SDK users to verify if a given conditional order's data is valid."
          },
          "verify(address,address,bytes32,bytes32,bytes32,bytes,bytes,(address,address,address,uint256,uint256,uint32,bytes32,uint256,bytes32,bool,bytes32,bytes32))": {
            "notice": "Verify if a given discrete order is valid."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "balancer/=lib/balancer/src/",
        "canonical-weth/=lib/canonical-weth/src/",
        "cowprotocol/=lib/cowprotocol/src/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "helpers/=lib/balancer/src/lib/helpers/",
        "math/=lib/balancer/src/lib/math/",
        "murky/=lib/murky/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "safe/=lib/safe/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/types/twap/TWAP.sol": "TWAP"
      },
      "libraries": {}
    },
    "sources": {
      "lib/cowprotocol/src/contracts/libraries/GPv2Interaction.sol": {
        "keccak256": "0xb950f05f76ac8044b82314ea5510941fdbc0f0e76e7f159023d435652b429528",
        "urls": [
          "bzz-raw://c081155e1b18c060aaab781b4887744413efffdfc55ce190db45c321444f165f",
          "dweb:/ipfs/QmbK3Qu7ZgwBfx2Es5EQcvG6q2srkHjzfNK2ziQ4ojxLSF"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/cowprotocol/src/contracts/libraries/GPv2Order.sol": {
        "keccak256": "0xffd0cc3de3209aa38045d57def570ccbde028a39a54b00c696dbe19f4f6d7f9f",
        "urls": [
          "bzz-raw://5714a47cae551d3364bfc6a753d92822b29d277298e55942a2814ed1e2afd87d",
          "dweb:/ipfs/QmS2G8ftdhk11qoSYHX8twZK5vFArhcnVVe6gy5UGTvXmg"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        "keccak256": "0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45",
        "urls": [
          "bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45",
          "dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol": {
        "keccak256": "0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516",
        "urls": [
          "bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0",
          "dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
        "keccak256": "0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac",
        "urls": [
          "bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04",
          "dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad",
        "urls": [
          "bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278",
          "dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH"
        ],
        "license": "MIT"
      },
      "lib/safe/contracts/Safe.sol": {
        "keccak256": "0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638",
        "urls": [
          "bzz-raw://f95884e85691d49ba3efb9b2a160466fed17377bfa92fc8bf5923f3c61e99119",
          "dweb:/ipfs/QmQjhP9RnB3Cj3DNpWLzWqqvRdKBya6Efx6xzmRrwLqjm9"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/Executor.sol": {
        "keccak256": "0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a",
        "urls": [
          "bzz-raw://710022b40c9f78a5b55b97f6ce600e4834df2ddd36bf714974d953883c82d58c",
          "dweb:/ipfs/QmbdJNKH5opevm7HxQKQAe6W7dQTgSHKa4nKvbUNGRcQQp"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/FallbackManager.sol": {
        "keccak256": "0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165",
        "urls": [
          "bzz-raw://7975be46d228510c70659b18076aecb3b0e7331b4d3a162444304145143bdc6e",
          "dweb:/ipfs/QmRRbZrWUnoky6pVo8zMUzCTsshR4sZ2FjR13s8vyAb8dV"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/GuardManager.sol": {
        "keccak256": "0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d",
        "urls": [
          "bzz-raw://3ff8a4194d1160d2e23142937bc9d7eac7b6b553b1ee226390a0df07ebac1b64",
          "dweb:/ipfs/QmSw8Y7z4TQrUTEosdWqcug7TUv9Tg1kxqMKHd7RuTnyzx"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/ModuleManager.sol": {
        "keccak256": "0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a",
        "urls": [
          "bzz-raw://30812896d9f57cae84a432c67fbb3007d566071ec203b2992f1c0f762722df0d",
          "dweb:/ipfs/QmRyJ3JbsUwDQxQDTrqDDX4qNtVu7XiW8cD8WP5kgNJGGz"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/base/OwnerManager.sol": {
        "keccak256": "0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c",
        "urls": [
          "bzz-raw://5729c58b14e7b656c71dd3377e9519c0d34ef8c04851a9a21c3d62393e4fae7a",
          "dweb:/ipfs/QmRRtfFpNqvdANny9TYBr8rA3HbT1egUCpb2uXALMHkVxK"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/Enum.sol": {
        "keccak256": "0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453",
        "urls": [
          "bzz-raw://385929800d1c0f92eb165fcf37a9e28b395b17d8b74f74755654d3a096a0fc34",
          "dweb:/ipfs/QmagieLuN2jrp2oJHFyZuyz65Sh1CcupnXSEKypGFS5Gvo"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/NativeCurrencyPaymentFallback.sol": {
        "keccak256": "0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba",
        "urls": [
          "bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9",
          "dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SecuredTokenTransfer.sol": {
        "keccak256": "0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05",
        "urls": [
          "bzz-raw://c26495b1fe9229ea17f90b70f295030880d629b9ea3016ea20b634983865f7b3",
          "dweb:/ipfs/QmTc1UmKcynkKn8DeviLMuy6scxNvAVSdLoX4ndUtdEL9N"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SelfAuthorized.sol": {
        "keccak256": "0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13",
        "urls": [
          "bzz-raw://8e9a317f0c3c02ab1d6c38039bff2b3e0c97f4dc9d229d3d9149c1af1c5023b3",
          "dweb:/ipfs/QmNcZjNChsuXF34T6f3Zu7i3tnqvKN4NyWBWZ4tXLH9kMu"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/SignatureDecoder.sol": {
        "keccak256": "0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c",
        "urls": [
          "bzz-raw://00cdded3068b9051ee0a966f40926fbc57dbe7ef8bf4285db3740f9d50468c80",
          "dweb:/ipfs/QmcP5hKmaRqBe7TpgoXtncZqsNKKdCCKxZgXoxEL4Nj5F4"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/Singleton.sol": {
        "keccak256": "0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50",
        "urls": [
          "bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde",
          "dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/common/StorageAccessible.sol": {
        "keccak256": "0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e",
        "urls": [
          "bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e",
          "dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/external/SafeMath.sol": {
        "keccak256": "0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89",
        "urls": [
          "bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c",
          "dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/ExtensibleFallbackHandler.sol": {
        "keccak256": "0x7e511290dae21c9b1710c9250320d9b98ffd71c9501af354814485b58e1b64e9",
        "urls": [
          "bzz-raw://3e55ba23bde90d2cdd07baa7172ea41bdc1d638bc7b6eb5dce03189d86412515",
          "dweb:/ipfs/QmbxH73sqooeQL8ehsP2FDoXhLBoPs3wr3nod6ZgJwVcFV"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/HandlerContext.sol": {
        "keccak256": "0x3e105ebac003af9c8d34e3eed517ff0355d5f487e17478c85df0f225b04846f5",
        "urls": [
          "bzz-raw://657bec347d746453883c461a3d9a2275bf2b99625dcaef0960e1c0276c3d56c4",
          "dweb:/ipfs/QmUGj8Tzs1CsmUf63LbTMK81EEGtYYnWKLGdHHtoYCd9CF"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/Base.sol": {
        "keccak256": "0xe5b71121b0020728158ee60756982e74809f9d77cb294a6d65930bff09d84d15",
        "urls": [
          "bzz-raw://fd7fd2702b31fc8569a9986a476dd9fe9aa76624d0da6d832547f624426925f9",
          "dweb:/ipfs/QmWjYGtW38Fnwvm8qFvoJYhz2nTuySGkHouwRF3eksd6Nh"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/ERC165Handler.sol": {
        "keccak256": "0x6e19ba1deb09a34cca28891bfefd853697b808dfb8a9cddd4051d3058d3eb718",
        "urls": [
          "bzz-raw://0b1059e752bd142160a4fbe8ee08377a50902d31b8b909df002480d191af0cf4",
          "dweb:/ipfs/QmbuUmvgoodsZGgqR793duEWF5t7h6USAXfpr2N1VvBmeP"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/FallbackHandler.sol": {
        "keccak256": "0xbe7db6cbdb034c9aee1eae12200ab2e94fa4743ae08dbba2f1a001c4b62f3e0b",
        "urls": [
          "bzz-raw://4fbba0ea04349873b38f7c7104d0a88ffd6e7ec399a3fdd0e1297ce12eebb19e",
          "dweb:/ipfs/QmYiDukcX2y7ratxsMX6hLMKzGQTD67CKLpuiSpgm1HGue"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/MarshalLib.sol": {
        "keccak256": "0x531476118b7948b06a0c7094badd6f1ae33ae2ddca815110030e87ee62c4a895",
        "urls": [
          "bzz-raw://f21ad2619b5bcbc977c5943d2f668e8bfb9ef6968db1193415e046171a5a150a",
          "dweb:/ipfs/QmYZeu3vr6eRWjeYp8GvWSVRLm9baFbTyEGgAy2hMAqbLX"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/SignatureVerifierMuxer.sol": {
        "keccak256": "0xc60a1d55ff0cf532a44bd864683719e3d6e1fa6d20d4c77812e21c33afecf304",
        "urls": [
          "bzz-raw://298c7efe668a4ca8d3b712770973931d604c84304aececd621f0350d7d293b68",
          "dweb:/ipfs/QmVcNdQ7ZsnmDgSX8TFRLHk4HZUXH86u2akAM5q3g1PFfZ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/handler/extensible/TokenCallbacks.sol": {
        "keccak256": "0xfb0f8f01a7191ab358f196a7e055441ede00f36805f12c579a742a5cd3c4f8d7",
        "urls": [
          "bzz-raw://0d485ea9fc430a89953ffe2d2c7032b5a330f086bbb784e81eb6b00a692f6438",
          "dweb:/ipfs/QmNofKrkU9VTtGMN9Rc6js2jyUscSFxce8kjBz5rZL4RSJ"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ERC1155TokenReceiver.sol": {
        "keccak256": "0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493",
        "urls": [
          "bzz-raw://59ca1157dcfe19c72b9d1244a6ae5ec70fee9793d4d8af523b70f22ae567d55c",
          "dweb:/ipfs/QmfE3kv73QuQWAWQND927LWVHVLCp19m1mLUvxVYJDEFZM"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ERC721TokenReceiver.sol": {
        "keccak256": "0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479",
        "urls": [
          "bzz-raw://99a54737bc23722f79ec9cf9de63ba35b556a61df453eb332f3cac783503f26c",
          "dweb:/ipfs/QmbLW5C2RhoLbwDWEPtTKpyYE5apT9B3q4U11PZG3wSM1n"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/IERC165.sol": {
        "keccak256": "0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb",
        "urls": [
          "bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89",
          "dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"
        ],
        "license": "LGPL-3.0-only"
      },
      "lib/safe/contracts/interfaces/ISignatureValidator.sol": {
        "keccak256": "0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457",
        "urls": [
          "bzz-raw://3c4a1371948b11f78171bc4ae4fd169a1eec11e5c4b273eb2c54bc030a1aae25",
          "dweb:/ipfs/QmPuztatXZYVS65n8YbCyccJFZYPP6zQfBQ8tTY27pB978"
        ],
        "license": "LGPL-3.0-only"
      },
      "src/BaseConditionalOrder.sol": {
        "keccak256": "0x83d14b5411a5a1adc00da2d3e17703cd7be15de3f5637b2a3f77501df14c5e9c",
        "urls": [
          "bzz-raw://4c007603000bb506c58265f61863bb90966a210429f2985a2632d4f00c7bbc1f",
          "dweb:/ipfs/QmUz7ikMYiS8MGNsMxvcHzpkX2yYiPidxvcfG97Vpqs73j"
        ],
        "license": "MIT"
      },
      "src/ComposableCoW.sol": {
        "keccak256": "0x565c6fabc8a1e185acfb4539baeb7e3cabb004b54da2c777cbdbb3c98dbd6a52",
        "urls": [
          "bzz-raw://2b876b6b4a69f69b7f9445e67a0e60dd7a65f028d54ba9c4c8c983a00ee23642",
          "dweb:/ipfs/Qmf95tsR515WFv2yBKp4NzhFc9xvfZRtS194Lq7SY2r7zC"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/IConditionalOrder.sol": {
        "keccak256": "0x9ce9ab9b32a1cea3dd9390407f9733458868f0c4e706acbf5373d2c083ec363e",
        "urls": [
          "bzz-raw://e033e894f26b27544fc11d9cc1cd21351693defc8bd8716a47a74da57c634e28",
          "dweb:/ipfs/QmcC4PtfpCpf3srEqAuU3GNxz4qvgX8bU5B78hAQQjQhMW"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/ISwapGuard.sol": {
        "keccak256": "0x60abdef709d22cb95e4b1d4680cb70d5286cfb5aa71ec65868cc44164ef8790f",
        "urls": [
          "bzz-raw://7593245e22ffc533a073891affdbb003fa56eaa5ef7f0202a673b52968ad7ed5",
          "dweb:/ipfs/QmRhAvNzbHp8qfrw7eHZP6EDWw42tXMXSV3KuyhyxFy3Nx"
        ],
        "license": "GPL-3.0"
      },
      "src/interfaces/IValueFactory.sol": {
        "keccak256": "0x3304ef8a0a1727258ac8278bf5426daeac37ece4653eaaff87b15143814a8122",
        "urls": [
          "bzz-raw://9934d278069dd9474065777833a81e65af227b85d350b6c1f012b812101be9de",
          "dweb:/ipfs/QmcMBdvY7wLs92FCyutDGQGtHnYryjnaykREvDNBNM8Yih"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/TWAP.sol": {
        "keccak256": "0x7038b7e24f4633358e827eafa47dc9ebce9d5263a8aded1d03b0dd2c13aee90e",
        "urls": [
          "bzz-raw://6f2c538ab1fefdced2579efa5e911929e9fdc3c0ffcfb3f9c76b3e7990dc4eda",
          "dweb:/ipfs/QmaLzibvYkfRu2RLEikhbhecbqsYuWgVxTyuYzWsuDsEDY"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/libraries/TWAPOrder.sol": {
        "keccak256": "0x917e44d1853c7dafcf8e42acc746ca3d387d7c002f213870df69562eb66a0272",
        "urls": [
          "bzz-raw://26c1ba047f761e81cf8ffea282b1cb763fb5f70e9fc0b1264323030d0cac39c0",
          "dweb:/ipfs/QmQA2Y95jVktUkYf7nQC4ZeCNUbmPFAy5bcjKriBDnDyAa"
        ],
        "license": "GPL-3.0"
      },
      "src/types/twap/libraries/TWAPOrderMathLib.sol": {
        "keccak256": "0x59c5e36543c2f5edd22f2fe94160903f72221b991c46d495b6f6e83394025ecc",
        "urls": [
          "bzz-raw://35fdcc6f376a4ae9663c9e346eb47bb474faeb8b2fff746bb73708365dec0a12",
          "dweb:/ipfs/QmQCppHz3x9vNLHy5rBpdbg3qY73KT9oSwSAru9g3iwxsY"
        ],
        "license": "GPL-3.0"
      },
      "src/vendored/CoWSettlement.sol": {
        "keccak256": "0x4e4e317b24017cd87eb11d16368b8c06ec19306d31946c330a86f9f136df38d7",
        "urls": [
          "bzz-raw://34b9b2fc2c89e60497457cd812da9c53718c15ddfbf70f6e11832d22092c1840",
          "dweb:/ipfs/QmYFzaynWZfdpmFRf2dZrQ32Ep53AtQDd5fTE3a89xVkaR"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/types/twap/TWAP.sol",
    "id": 55699,
    "exportedSymbols": {
      "BaseConditionalOrder": [
        53578
      ],
      "CoWSettlement": [
        56132
      ],
      "ComposableCoW": [
        54254
      ],
      "EIP712": [
        52037
      ],
      "ERC1155TokenReceiver": [
        52147
      ],
      "ERC1271": [
        51612
      ],
      "ERC165Handler": [
        51370
      ],
      "ERC721TokenReceiver": [
        52165
      ],
      "ExtensibleBase": [
        51012
      ],
      "ExtensibleFallbackHandler": [
        50607
      ],
      "FallbackHandler": [
        51492
      ],
      "GPv2Interaction": [
        14303
      ],
      "GPv2Order": [
        14459
      ],
      "HandlerContext": [
        50638
      ],
      "IConditionalOrder": [
        54540
      ],
      "IConditionalOrderGenerator": [
        54571
      ],
      "IERC165": [
        52197
      ],
      "IERC165Handler": [
        51051
      ],
      "IFallbackHandler": [
        51381
      ],
      "IFallbackMethod": [
        50786
      ],
      "INVALID_HASH": [
        53472
      ],
      "ISafeSignatureVerifier": [
        51635
      ],
      "ISignatureValidator": [
        52216
      ],
      "ISignatureValidatorConstants": [
        52203
      ],
      "ISignatureVerifierMuxer": [
        51655
      ],
      "IStaticFallbackMethod": [
        50801
      ],
      "ISwapGuard": [
        54599
      ],
      "IValueFactory": [
        54611
      ],
      "MarshalLib": [
        51598
      ],
      "MerkleProof": [
        46395
      ],
      "NOT_WITHIN_SPAN": [
        55551
      ],
      "Safe": [
        48851
      ],
      "SignatureVerifierMuxer": [
        52004
      ],
      "TWAP": [
        55698
      ],
      "TWAPOrder": [
        55967
      ],
      "TokenCallbacks": [
        52110
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:3167:149",
    "nodes": [
      {
        "id": 55543,
        "nodeType": "PragmaDirective",
        "src": "36:31:149",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 55544,
        "nodeType": "ImportDirective",
        "src": "69:33:149",
        "nodes": [],
        "absolutePath": "src/ComposableCoW.sol",
        "file": "../../ComposableCoW.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55699,
        "sourceUnit": 54255,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 55545,
        "nodeType": "ImportDirective",
        "src": "104:40:149",
        "nodes": [],
        "absolutePath": "src/BaseConditionalOrder.sol",
        "file": "../../BaseConditionalOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55699,
        "sourceUnit": 53579,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 55547,
        "nodeType": "ImportDirective",
        "src": "145:52:149",
        "nodes": [],
        "absolutePath": "src/types/twap/libraries/TWAPOrder.sol",
        "file": "./libraries/TWAPOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55699,
        "sourceUnit": 55968,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55546,
              "name": "TWAPOrder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 55967,
              "src": "153:9:149",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55551,
        "nodeType": "VariableDeclaration",
        "src": "278:51:149",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "NOT_WITHIN_SPAN",
        "nameLocation": "294:15:149",
        "scope": 55699,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_memory_ptr",
          "typeString": "string"
        },
        "typeName": {
          "id": 55549,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "278:6:149",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "6e6f742077697468696e207370616e",
          "id": 55550,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "312:17:149",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_9c7896a1230b65b3fedeb00c154cd44bb80077b089d6cb0c0fb91343a53c8fe6",
            "typeString": "literal_string \"not within span\""
          },
          "value": "not within span"
        },
        "visibility": "internal"
      },
      {
        "id": 55698,
        "nodeType": "ContractDefinition",
        "src": "753:2449:149",
        "nodes": [
          {
            "id": 55557,
            "nodeType": "VariableDeclaration",
            "src": "797:44:149",
            "nodes": [],
            "constant": false,
            "functionSelector": "93504c52",
            "mutability": "immutable",
            "name": "composableCow",
            "nameLocation": "828:13:149",
            "scope": 55698,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ComposableCoW_$54254",
              "typeString": "contract ComposableCoW"
            },
            "typeName": {
              "id": 55556,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 55555,
                "name": "ComposableCoW",
                "nameLocations": [
                  "797:13:149"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 54254,
                "src": "797:13:149"
              },
              "referencedDeclaration": 54254,
              "src": "797:13:149",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                "typeString": "contract ComposableCoW"
              }
            },
            "visibility": "public"
          },
          {
            "id": 55568,
            "nodeType": "FunctionDefinition",
            "src": "848:89:149",
            "nodes": [],
            "body": {
              "id": 55567,
              "nodeType": "Block",
              "src": "890:47:149",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 55565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55563,
                      "name": "composableCow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55557,
                      "src": "900:13:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                        "typeString": "contract ComposableCoW"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 55564,
                      "name": "_composableCow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55560,
                      "src": "916:14:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                        "typeString": "contract ComposableCoW"
                      }
                    },
                    "src": "900:30:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                      "typeString": "contract ComposableCoW"
                    }
                  },
                  "id": 55566,
                  "nodeType": "ExpressionStatement",
                  "src": "900:30:149"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 55561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55560,
                  "mutability": "mutable",
                  "name": "_composableCow",
                  "nameLocation": "874:14:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55568,
                  "src": "860:28:149",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                    "typeString": "contract ComposableCoW"
                  },
                  "typeName": {
                    "id": 55559,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55558,
                      "name": "ComposableCoW",
                      "nameLocations": [
                        "860:13:149"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54254,
                      "src": "860:13:149"
                    },
                    "referencedDeclaration": 54254,
                    "src": "860:13:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                      "typeString": "contract ComposableCoW"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "859:30:149"
            },
            "returnParameters": {
              "id": 55562,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "890:0:149"
            },
            "scope": 55698,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55677,
            "nodeType": "FunctionDefinition",
            "src": "1068:1938:149",
            "nodes": [],
            "body": {
              "id": 55676,
              "nodeType": "Block",
              "src": "1271:1735:149",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55590
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55590,
                      "mutability": "mutable",
                      "name": "twap",
                      "nameLocation": "1686:4:149",
                      "nodeType": "VariableDeclaration",
                      "scope": 55676,
                      "src": "1664:26:149",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                        "typeString": "struct TWAPOrder.Data"
                      },
                      "typeName": {
                        "id": 55589,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 55588,
                          "name": "TWAPOrder.Data",
                          "nameLocations": [
                            "1664:9:149",
                            "1674:4:149"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 55762,
                          "src": "1664:14:149"
                        },
                        "referencedDeclaration": 55762,
                        "src": "1664:14:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55762_storage_ptr",
                          "typeString": "struct TWAPOrder.Data"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": " @dev Decode the payload into a TWAP bundle and get the order. `orderFor` will revert if\n there is no current valid order.\n NOTE: This will return an order even if the part of the TWAP bundle that is currently\n valid is filled. This is safe as CoW Protocol ensures that each `orderUid` is only\n settled once.",
                  "id": 55598,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 55593,
                        "name": "staticInput",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55577,
                        "src": "1704:11:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "expression": {
                              "id": 55594,
                              "name": "TWAPOrder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55967,
                              "src": "1718:9:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55967_$",
                                "typeString": "type(library TWAPOrder)"
                              }
                            },
                            "id": 55595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1728:4:149",
                            "memberName": "Data",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55762,
                            "src": "1718:14:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                              "typeString": "type(struct TWAPOrder.Data storage pointer)"
                            }
                          }
                        ],
                        "id": 55596,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1717:16:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                          "typeString": "type(struct TWAPOrder.Data storage pointer)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                          "typeString": "type(struct TWAPOrder.Data storage pointer)"
                        }
                      ],
                      "expression": {
                        "id": 55591,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "1693:3:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 55592,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1697:6:149",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "1693:10:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 55597,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1693:41:149",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                      "typeString": "struct TWAPOrder.Data memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1664:70:149"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 55602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 55599,
                        "name": "twap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55590,
                        "src": "1857:4:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                          "typeString": "struct TWAPOrder.Data memory"
                        }
                      },
                      "id": 55600,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1862:2:149",
                      "memberName": "t0",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 55753,
                      "src": "1857:7:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 55601,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1868:1:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1857:12:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": " @dev If `twap.t0` is set to 0, then get the start time from the context.",
                  "id": 55617,
                  "nodeType": "IfStatement",
                  "src": "1853:95:149",
                  "trueBody": {
                    "id": 55616,
                    "nodeType": "Block",
                    "src": "1871:77:149",
                    "statements": [
                      {
                        "expression": {
                          "id": 55614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 55603,
                              "name": "twap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55590,
                              "src": "1885:4:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                "typeString": "struct TWAPOrder.Data memory"
                              }
                            },
                            "id": 55605,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "1890:2:149",
                            "memberName": "t0",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55753,
                            "src": "1885:7:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 55610,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55571,
                                    "src": "1925:5:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 55611,
                                    "name": "ctx",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55575,
                                    "src": "1932:3:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "expression": {
                                    "id": 55608,
                                    "name": "composableCow",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55557,
                                    "src": "1903:13:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ComposableCoW_$54254",
                                      "typeString": "contract ComposableCoW"
                                    }
                                  },
                                  "id": 55609,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1917:7:149",
                                  "memberName": "cabinet",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 53664,
                                  "src": "1903:21:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$_t_bytes32_$returns$_t_bytes32_$",
                                    "typeString": "function (address,bytes32) view external returns (bytes32)"
                                  }
                                },
                                "id": 55612,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1903:33:149",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 55607,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1895:7:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 55606,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1895:7:149",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 55613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1895:42:149",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1885:52:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 55615,
                        "nodeType": "ExpressionStatement",
                        "src": "1885:52:149"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 55623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55618,
                      "name": "order",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55584,
                      "src": "1958:5:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 55621,
                          "name": "twap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55590,
                          "src": "1985:4:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                            "typeString": "struct TWAPOrder.Data memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                            "typeString": "struct TWAPOrder.Data memory"
                          }
                        ],
                        "expression": {
                          "id": 55619,
                          "name": "TWAPOrder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55967,
                          "src": "1966:9:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55967_$",
                            "typeString": "type(library TWAPOrder)"
                          }
                        },
                        "id": 55620,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1976:8:149",
                        "memberName": "orderFor",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 55966,
                        "src": "1966:18:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_Data_$55762_memory_ptr_$returns$_t_struct$_Data_$14334_memory_ptr_$",
                          "typeString": "function (struct TWAPOrder.Data memory) view returns (struct GPv2Order.Data memory)"
                        }
                      },
                      "id": 55622,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1966:24:149",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                        "typeString": "struct GPv2Order.Data memory"
                      }
                    },
                    "src": "1958:32:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                      "typeString": "struct GPv2Order.Data memory"
                    }
                  },
                  "id": 55624,
                  "nodeType": "ExpressionStatement",
                  "src": "1958:32:149"
                },
                {
                  "condition": {
                    "id": 55631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2292:35:149",
                    "subExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55629,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 55625,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "2294:5:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 55626,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2300:9:149",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "2294:15:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "expression": {
                              "id": 55627,
                              "name": "order",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55584,
                              "src": "2313:5:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                                "typeString": "struct GPv2Order.Data memory"
                              }
                            },
                            "id": 55628,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2319:7:149",
                            "memberName": "validTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14321,
                            "src": "2313:13:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "2294:32:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 55630,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "2293:34:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "documentation": "@dev As the `TWAPOrder.orderFor` function will revert if the TWAP has not started\n      or if the TWAP has finished, the _only_ time now that `block.timestamp` can be\n      greater than `order.validTo` is if the order is outside the TWAP bundle's span.",
                  "id": 55675,
                  "nodeType": "IfStatement",
                  "src": "2288:712:149",
                  "trueBody": {
                    "id": 55674,
                    "nodeType": "Block",
                    "src": "2329:671:149",
                    "statements": [
                      {
                        "assignments": [
                          55633
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 55633,
                            "mutability": "mutable",
                            "name": "currentPart",
                            "nameLocation": "2410:11:149",
                            "nodeType": "VariableDeclaration",
                            "scope": 55674,
                            "src": "2402:19:149",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 55632,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2402:7:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 55646,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 55642,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 55638,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 55634,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "2426:5:149",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 55635,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "2432:9:149",
                                        "memberName": "timestamp",
                                        "nodeType": "MemberAccess",
                                        "src": "2426:15:149",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 55636,
                                          "name": "twap",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 55590,
                                          "src": "2444:4:149",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                            "typeString": "struct TWAPOrder.Data memory"
                                          }
                                        },
                                        "id": 55637,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "2449:2:149",
                                        "memberName": "t0",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 55753,
                                        "src": "2444:7:149",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2426:25:149",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 55639,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "2425:27:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "expression": {
                                    "id": 55640,
                                    "name": "twap",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55590,
                                    "src": "2455:4:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                      "typeString": "struct TWAPOrder.Data memory"
                                    }
                                  },
                                  "id": 55641,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2460:1:149",
                                  "memberName": "t",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 55757,
                                  "src": "2455:6:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2425:36:149",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 55643,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2424:38:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 55644,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2465:1:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "2424:42:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2402:64:149"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 55650,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 55647,
                            "name": "currentPart",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55633,
                            "src": "2485:11:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 55648,
                              "name": "twap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55590,
                              "src": "2500:4:149",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                "typeString": "struct TWAPOrder.Data memory"
                              }
                            },
                            "id": 55649,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2505:1:149",
                            "memberName": "n",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 55755,
                            "src": "2500:6:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2485:21:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 55672,
                          "nodeType": "Block",
                          "src": "2735:255:149",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 55668,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 55661,
                                        "name": "twap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 55590,
                                        "src": "2925:4:149",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                          "typeString": "struct TWAPOrder.Data memory"
                                        }
                                      },
                                      "id": 55662,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2930:2:149",
                                      "memberName": "t0",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 55753,
                                      "src": "2925:7:149",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 55666,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 55663,
                                            "name": "currentPart",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 55633,
                                            "src": "2936:11:149",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 55664,
                                              "name": "twap",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 55590,
                                              "src": "2950:4:149",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                                                "typeString": "struct TWAPOrder.Data memory"
                                              }
                                            },
                                            "id": 55665,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "2955:1:149",
                                            "memberName": "t",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 55757,
                                            "src": "2950:6:149",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "2936:20:149",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 55667,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "2935:22:149",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "2925:32:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 55669,
                                    "name": "NOT_WITHIN_SPAN",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55551,
                                    "src": "2959:15:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 55658,
                                    "name": "IConditionalOrder",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 54540,
                                    "src": "2892:17:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IConditionalOrder_$54540_$",
                                      "typeString": "type(contract IConditionalOrder)"
                                    }
                                  },
                                  "id": 55660,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2910:14:149",
                                  "memberName": "PollTryAtEpoch",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 54500,
                                  "src": "2892:32:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,string memory) pure"
                                  }
                                },
                                "id": 55670,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2892:83:149",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 55671,
                              "nodeType": "RevertStatement",
                              "src": "2885:90:149"
                            }
                          ]
                        },
                        "id": 55673,
                        "nodeType": "IfStatement",
                        "src": "2481:509:149",
                        "trueBody": {
                          "id": 55657,
                          "nodeType": "Block",
                          "src": "2508:221:149",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "id": 55654,
                                    "name": "NOT_WITHIN_SPAN",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 55551,
                                    "src": "2698:15:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 55651,
                                    "name": "IConditionalOrder",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 54540,
                                    "src": "2670:17:149",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IConditionalOrder_$54540_$",
                                      "typeString": "type(contract IConditionalOrder)"
                                    }
                                  },
                                  "id": 55653,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2688:9:149",
                                  "memberName": "PollNever",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 54504,
                                  "src": "2670:27:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 55655,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2670:44:149",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 55656,
                              "nodeType": "RevertStatement",
                              "src": "2663:51:149"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              53546
            ],
            "documentation": {
              "id": 55569,
              "nodeType": "StructuredDocumentation",
              "src": "943:120:149",
              "text": " @inheritdoc IConditionalOrderGenerator\n @dev `owner`, `sender` and `offchainInput` is not used."
            },
            "functionSelector": "b8296fc4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTradeableOrder",
            "nameLocation": "1077:17:149",
            "overrides": {
              "id": 55581,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1212:8:149"
            },
            "parameters": {
              "id": 55580,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55571,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1103:5:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1095:13:149",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55570,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1095:7:149",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55573,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1110:7:149",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55572,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1110:7:149",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55575,
                  "mutability": "mutable",
                  "name": "ctx",
                  "nameLocation": "1127:3:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1119:11:149",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 55574,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1119:7:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55577,
                  "mutability": "mutable",
                  "name": "staticInput",
                  "nameLocation": "1147:11:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1132:26:149",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55576,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:5:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55579,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1160:14:149",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55578,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1160:5:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1094:81:149"
            },
            "returnParameters": {
              "id": 55585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55584,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "1260:5:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55677,
                  "src": "1238:27:149",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$14334_memory_ptr",
                    "typeString": "struct GPv2Order.Data"
                  },
                  "typeName": {
                    "id": 55583,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55582,
                      "name": "GPv2Order.Data",
                      "nameLocations": [
                        "1238:9:149",
                        "1248:4:149"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14334,
                      "src": "1238:14:149"
                    },
                    "referencedDeclaration": 14334,
                    "src": "1238:14:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$14334_storage_ptr",
                      "typeString": "struct GPv2Order.Data"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1237:29:149"
            },
            "scope": 55698,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55697,
            "nodeType": "FunctionDefinition",
            "src": "3065:135:149",
            "nodes": [],
            "body": {
              "id": 55696,
              "nodeType": "Block",
              "src": "3129:71:149",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 55689,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55680,
                            "src": "3169:4:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "expression": {
                                  "id": 55690,
                                  "name": "TWAPOrder",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 55967,
                                  "src": "3176:9:149",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55967_$",
                                    "typeString": "type(library TWAPOrder)"
                                  }
                                },
                                "id": 55691,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3186:4:149",
                                "memberName": "Data",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 55762,
                                "src": "3176:14:149",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                                  "typeString": "type(struct TWAPOrder.Data storage pointer)"
                                }
                              }
                            ],
                            "id": 55692,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3175:16:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                              "typeString": "type(struct TWAPOrder.Data storage pointer)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_type$_t_struct$_Data_$55762_storage_ptr_$",
                              "typeString": "type(struct TWAPOrder.Data storage pointer)"
                            }
                          ],
                          "expression": {
                            "id": 55687,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3158:3:149",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 55688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3162:6:149",
                          "memberName": "decode",
                          "nodeType": "MemberAccess",
                          "src": "3158:10:149",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 55693,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3158:34:149",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                          "typeString": "struct TWAPOrder.Data memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Data_$55762_memory_ptr",
                          "typeString": "struct TWAPOrder.Data memory"
                        }
                      ],
                      "expression": {
                        "id": 55684,
                        "name": "TWAPOrder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55967,
                        "src": "3139:9:149",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_TWAPOrder_$55967_$",
                          "typeString": "type(library TWAPOrder)"
                        }
                      },
                      "id": 55686,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3149:8:149",
                      "memberName": "validate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 55912,
                      "src": "3139:18:149",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Data_$55762_memory_ptr_$returns$__$",
                        "typeString": "function (struct TWAPOrder.Data memory) pure"
                      }
                    },
                    "id": 55694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3139:54:149",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55695,
                  "nodeType": "ExpressionStatement",
                  "src": "3139:54:149"
                }
              ]
            },
            "baseFunctions": [
              53577
            ],
            "documentation": {
              "id": 55678,
              "nodeType": "StructuredDocumentation",
              "src": "3012:48:149",
              "text": " @inheritdoc IConditionalOrder"
            },
            "functionSelector": "a6ffa36c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateData",
            "nameLocation": "3074:12:149",
            "overrides": {
              "id": 55682,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3120:8:149"
            },
            "parameters": {
              "id": 55681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55680,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3100:4:149",
                  "nodeType": "VariableDeclaration",
                  "scope": 55697,
                  "src": "3087:17:149",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 55679,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3087:5:149",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3086:19:149"
            },
            "returnParameters": {
              "id": 55683,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3129:0:149"
            },
            "scope": 55698,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 55553,
              "name": "BaseConditionalOrder",
              "nameLocations": [
                "770:20:149"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 53578,
              "src": "770:20:149"
            },
            "id": 55554,
            "nodeType": "InheritanceSpecifier",
            "src": "770:20:149"
          }
        ],
        "canonicalName": "TWAP",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 55552,
          "nodeType": "StructuredDocumentation",
          "src": "332:420:149",
          "text": " @title TWAP Conditional Order\n @author mfw78 <mfw78@rndlabs.xyz>\n @notice TWAP conditional orders allow for splitting an order into a series of orders that are\n executed at a fixed interval. This is useful for ensuring that a trade is executed at a\n specific price, even if the price of the token changes during the trade.\n @dev Designed to be used with the CoW Protocol Conditional Order Framework."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          55698,
          53578,
          54571,
          52197,
          54540
        ],
        "name": "TWAP",
        "nameLocation": "762:4:149",
        "scope": 55699,
        "usedErrors": [
          54484,
          54488,
          54494,
          54500,
          54504
        ]
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 149
}