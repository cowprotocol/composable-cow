{"language":"Solidity","sources":{"src/value_factories/CurrentBlockTimestampFactory.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IValueFactory} from \"../interfaces/IValueFactory.sol\";\n\n/**\n * @title CurrentBlockTimestampFactory - An on-chain value factory that returns the current block timestamp\n * @dev Designed to be used with Safe + ExtensibleFallbackHandler + ComposableCoW\n * @author mfw78 <mfw78@rndlabs.xyz>\n */\ncontract CurrentBlockTimestampFactory is IValueFactory {\n    function getValue(bytes calldata) external view override returns (bytes32) {\n        return bytes32(block.timestamp);\n    }\n}\n"},"src/interfaces/IValueFactory.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IValueFactory - An interface for on-chain value determination\n * @author mfw78 <mfw78@rndlabs.xyz>\n * @dev Designed to be used with Safe + ExtensibleFallbackHandler + ComposableCoW\n */\ninterface IValueFactory {\n    /**\n     * Return a value at the time of the call\n     * @param data Implementation specific off-chain data\n     * @return value The value at the time of the call\n     */\n    function getValue(bytes calldata data) external view returns (bytes32 value);\n}\n"}},"settings":{"remappings":["@openzeppelin/=lib/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/@openzeppelin/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/","safe/=lib/safe/contracts/","cowprotocol/=lib/cowprotocol/src/","openzeppelin/=lib/@openzeppelin/contracts/"],"optimizer":{"enabled":true,"runs":20000},"modelChecker":{"contracts":{"/workspaces/composable-cow/src/types/twap/libraries/TWAPOrderMathLib.sol":["TWAPOrderMathLib"]},"engine":"chc","timeout":100000,"targets":["assert","underflow","overflow","divByZero","constantCondition","popEmptyArray","outOfBounds","balance"]},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":false,"libraries":{}}}
